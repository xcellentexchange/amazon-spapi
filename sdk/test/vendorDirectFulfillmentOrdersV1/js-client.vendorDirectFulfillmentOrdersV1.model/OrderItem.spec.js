/*
 * Selling Partner API for Direct Fulfillment Orders
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorDirectFulfillmentOrdersV1/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorDirectFulfillmentOrdersV1/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForDirectFulfillmentOrders);
  }
}(this, function(expect, SellingPartnerApiForDirectFulfillmentOrders) {
  'use strict';

  var instance;

  describe('vendorDirectFulfillmentOrdersV1', function() {
    describe('OrderItem', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForDirectFulfillmentOrders.OrderItem();
      });

      it('should create an instance of OrderItem', function() {
        // TODO: update the code to test OrderItem
        expect(instance).to.be.a(SellingPartnerApiForDirectFulfillmentOrders.OrderItem);
      });

      it('should have the property itemSequenceNumber (base name: "itemSequenceNumber")', function() {
        // TODO: update the code to test the property itemSequenceNumber
        expect(instance).to.have.property('itemSequenceNumber');
        // expect(instance.itemSequenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property buyerProductIdentifier (base name: "buyerProductIdentifier")', function() {
        // TODO: update the code to test the property buyerProductIdentifier
        expect(instance).to.have.property('buyerProductIdentifier');
        // expect(instance.buyerProductIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property vendorProductIdentifier (base name: "vendorProductIdentifier")', function() {
        // TODO: update the code to test the property vendorProductIdentifier
        expect(instance).to.have.property('vendorProductIdentifier');
        // expect(instance.vendorProductIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property orderedQuantity (base name: "orderedQuantity")', function() {
        // TODO: update the code to test the property orderedQuantity
        expect(instance).to.have.property('orderedQuantity');
        // expect(instance.orderedQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledDeliveryShipment (base name: "scheduledDeliveryShipment")', function() {
        // TODO: update the code to test the property scheduledDeliveryShipment
        expect(instance).to.have.property('scheduledDeliveryShipment');
        // expect(instance.scheduledDeliveryShipment).to.be(expectedValueLiteral);
      });

      it('should have the property giftDetails (base name: "giftDetails")', function() {
        // TODO: update the code to test the property giftDetails
        expect(instance).to.have.property('giftDetails');
        // expect(instance.giftDetails).to.be(expectedValueLiteral);
      });

      it('should have the property netPrice (base name: "netPrice")', function() {
        // TODO: update the code to test the property netPrice
        expect(instance).to.have.property('netPrice');
        // expect(instance.netPrice).to.be(expectedValueLiteral);
      });

      it('should have the property taxDetails (base name: "taxDetails")', function() {
        // TODO: update the code to test the property taxDetails
        expect(instance).to.have.property('taxDetails');
        // expect(instance.taxDetails).to.be(expectedValueLiteral);
      });

      it('should have the property totalPrice (base name: "totalPrice")', function() {
        // TODO: update the code to test the property totalPrice
        expect(instance).to.have.property('totalPrice');
        // expect(instance.totalPrice).to.be(expectedValueLiteral);
      });

    });
  });

}));
