/*
 * Selling Partner API for Direct Fulfillment Shipping
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorDirectFulfillmentShipping_2021-12-28/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorDirectFulfillmentShipping_2021-12-28/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForDirectFulfillmentShipping);
  }
}(this, function(expect, SellingPartnerApiForDirectFulfillmentShipping) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForDirectFulfillmentShipping.CustomerInvoicesApi();
  });

  describe('vendorDirectFulfillmentShipping_2021-12-28', function() {
    describe('CustomerInvoicesApi', function() {
      describe('getCustomerInvoice', function() {
        it('should call getCustomerInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for getCustomerInvoice call and complete the assertions
          /*
          var purchaseOrderNumber = "purchaseOrderNumber_example";

          instance.getCustomerInvoice(purchaseOrderNumber).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForDirectFulfillmentShipping.CustomerInvoice);
            expect(data.purchaseOrderNumber).to.be.a('string');
            // expect(data.purchaseOrderNumber).to.be("");
            expect(data.content).to.be.a('string');
            // expect(data.content).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCustomerInvoices', function() {
        it('should call getCustomerInvoices successfully', function(done) {
          // TODO: uncomment, update parameter values for getCustomerInvoices call and complete the assertions
          /*
          var createdAfter = new Date("2013-10-20T19:20:30+01:00");
          var createdBefore = new Date("2013-10-20T19:20:30+01:00");
          var opts = {};
          opts.shipFromPartyId = "shipFromPartyId_example";
          opts.limit = 56;
          opts.sortOrder = "sortOrder_example";
          opts.nextToken = "nextToken_example";

          instance.getCustomerInvoices(createdAfter, createdBefore, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForDirectFulfillmentShipping.CustomerInvoiceList);
            expect(data.pagination).to.be.a(SellingPartnerApiForDirectFulfillmentShipping.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");
            {
              let dataCtr = data.customerInvoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForDirectFulfillmentShipping.CustomerInvoice);
                expect(data.purchaseOrderNumber).to.be.a('string');
                // expect(data.purchaseOrderNumber).to.be("");
                expect(data.content).to.be.a('string');
                // expect(data.content).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
