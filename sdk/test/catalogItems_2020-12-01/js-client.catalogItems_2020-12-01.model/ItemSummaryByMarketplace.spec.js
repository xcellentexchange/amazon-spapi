/*
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, see the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2020-12-01-use-case-guide).
 *
 * OpenAPI spec version: 2020-12-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/catalogItems_2020-12-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/catalogItems_2020-12-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForCatalogItems);
  }
}(this, function(expect, SellingPartnerApiForCatalogItems) {
  'use strict';

  var instance;

  describe('catalogItems_2020-12-01', function() {
    describe('ItemSummaryByMarketplace', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      });

      it('should create an instance of ItemSummaryByMarketplace', function() {
        // TODO: update the code to test ItemSummaryByMarketplace
        expect(instance).to.be.a(SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace);
      });

      it('should have the property marketplaceId (base name: "marketplaceId")', function() {
        // TODO: update the code to test the property marketplaceId
        expect(instance).to.have.property('marketplaceId');
        // expect(instance.marketplaceId).to.be(expectedValueLiteral);
      });

      it('should have the property brandName (base name: "brandName")', function() {
        // TODO: update the code to test the property brandName
        expect(instance).to.have.property('brandName');
        // expect(instance.brandName).to.be(expectedValueLiteral);
      });

      it('should have the property browseNode (base name: "browseNode")', function() {
        // TODO: update the code to test the property browseNode
        expect(instance).to.have.property('browseNode');
        // expect(instance.browseNode).to.be(expectedValueLiteral);
      });

      it('should have the property colorName (base name: "colorName")', function() {
        // TODO: update the code to test the property colorName
        expect(instance).to.have.property('colorName');
        // expect(instance.colorName).to.be(expectedValueLiteral);
      });

      it('should have the property itemName (base name: "itemName")', function() {
        // TODO: update the code to test the property itemName
        expect(instance).to.have.property('itemName');
        // expect(instance.itemName).to.be(expectedValueLiteral);
      });

      it('should have the property manufacturer (base name: "manufacturer")', function() {
        // TODO: update the code to test the property manufacturer
        expect(instance).to.have.property('manufacturer');
        // expect(instance.manufacturer).to.be(expectedValueLiteral);
      });

      it('should have the property modelNumber (base name: "modelNumber")', function() {
        // TODO: update the code to test the property modelNumber
        expect(instance).to.have.property('modelNumber');
        // expect(instance.modelNumber).to.be(expectedValueLiteral);
      });

      it('should have the property sizeName (base name: "sizeName")', function() {
        // TODO: update the code to test the property sizeName
        expect(instance).to.have.property('sizeName');
        // expect(instance.sizeName).to.be(expectedValueLiteral);
      });

      it('should have the property styleName (base name: "styleName")', function() {
        // TODO: update the code to test the property styleName
        expect(instance).to.have.property('styleName');
        // expect(instance.styleName).to.be(expectedValueLiteral);
      });

    });
  });

}));
