/*
 * Selling Partner API for Shipping
 * Provides programmatic access to Amazon Shipping APIs.   **Note:** If you are new to the Amazon Shipping API, refer to the latest version of <a href=\"https://developer-docs.amazon.com/amazon-shipping/docs/shipping-api-v2-reference\">Amazon Shipping API (v2)</a> on the <a href=\"https://developer-docs.amazon.com/amazon-shipping/\">Amazon Shipping Developer Documentation</a> site.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/shipping/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/shipping/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForShipping);
  }
}(this, function(expect, SellingPartnerApiForShipping) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForShipping.ShippingApi();
  });

  describe('shipping', function() {
    describe('ShippingApi', function() {
      describe('cancelShipment', function() {
        it('should call cancelShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelShipment call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.cancelShipment(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipping.CancelShipmentResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForShipping.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createShipment', function() {
        it('should call createShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for createShipment call and complete the assertions
          /*
          var body = new SellingPartnerApiForShipping.CreateShipmentRequest();
          body.clientReferenceId = new SellingPartnerApiForShipping.ClientReferenceId();
          body.shipTo = new SellingPartnerApiForShipping.Address();
          body.shipTo.name = "";
          body.shipTo.addressLine1 = "";
          body.shipTo.addressLine2 = "";
          body.shipTo.addressLine3 = "";
          body.shipTo.stateOrRegion = new SellingPartnerApiForShipping.StateOrRegion();
          body.shipTo.city = new SellingPartnerApiForShipping.City();
          body.shipTo.countryCode = new SellingPartnerApiForShipping.CountryCode();
          body.shipTo.postalCode = new SellingPartnerApiForShipping.PostalCode();
          body.shipTo.email = "";
          body.shipTo.copyEmails = [""];
          body.shipTo.phoneNumber = "";
          body.shipFrom = new SellingPartnerApiForShipping.Address();
          body.shipFrom.name = "";
          body.shipFrom.addressLine1 = "";
          body.shipFrom.addressLine2 = "";
          body.shipFrom.addressLine3 = "";
          body.shipFrom.stateOrRegion = new SellingPartnerApiForShipping.StateOrRegion();
          body.shipFrom.city = new SellingPartnerApiForShipping.City();
          body.shipFrom.countryCode = new SellingPartnerApiForShipping.CountryCode();
          body.shipFrom.postalCode = new SellingPartnerApiForShipping.PostalCode();
          body.shipFrom.email = "";
          body.shipFrom.copyEmails = [""];
          body.shipFrom.phoneNumber = "";
          body.containers = new SellingPartnerApiForShipping.ContainerList();

          instance.createShipment(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipping.CreateShipmentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipping.CreateShipmentResult);
                  expect(data.payload.shipmentId).to.be.a(SellingPartnerApiForShipping.ShipmentId);
                  expect(data.payload.eligibleRates).to.be.a(SellingPartnerApiForShipping.RateList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForShipping.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAccount', function() {
        it('should call getAccount successfully', function(done) {
          // TODO: uncomment getAccount call and complete the assertions
          /*

          instance.getAccount().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipping.GetAccountResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipping.Account);
                  expect(data.payload.accountId).to.be.a(SellingPartnerApiForShipping.AccountId);
      
            expect(data.errors).to.be.a(SellingPartnerApiForShipping.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRates', function() {
        it('should call getRates successfully', function(done) {
          // TODO: uncomment, update parameter values for getRates call and complete the assertions
          /*
          var body = new SellingPartnerApiForShipping.GetRatesRequest();
          body.shipTo = new SellingPartnerApiForShipping.Address();
          body.shipTo.name = "";
          body.shipTo.addressLine1 = "";
          body.shipTo.addressLine2 = "";
          body.shipTo.addressLine3 = "";
          body.shipTo.stateOrRegion = new SellingPartnerApiForShipping.StateOrRegion();
          body.shipTo.city = new SellingPartnerApiForShipping.City();
          body.shipTo.countryCode = new SellingPartnerApiForShipping.CountryCode();
          body.shipTo.postalCode = new SellingPartnerApiForShipping.PostalCode();
          body.shipTo.email = "";
          body.shipTo.copyEmails = [""];
          body.shipTo.phoneNumber = "";
          body.shipFrom = new SellingPartnerApiForShipping.Address();
          body.shipFrom.name = "";
          body.shipFrom.addressLine1 = "";
          body.shipFrom.addressLine2 = "";
          body.shipFrom.addressLine3 = "";
          body.shipFrom.stateOrRegion = new SellingPartnerApiForShipping.StateOrRegion();
          body.shipFrom.city = new SellingPartnerApiForShipping.City();
          body.shipFrom.countryCode = new SellingPartnerApiForShipping.CountryCode();
          body.shipFrom.postalCode = new SellingPartnerApiForShipping.PostalCode();
          body.shipFrom.email = "";
          body.shipFrom.copyEmails = [""];
          body.shipFrom.phoneNumber = "";
          body.serviceTypes = new SellingPartnerApiForShipping.ServiceTypeList();
          body.shipDate = new Date();
          body.containerSpecifications = new SellingPartnerApiForShipping.ContainerSpecificationList();

          instance.getRates(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipping.GetRatesResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipping.GetRatesResult);
                  expect(data.payload.serviceRates).to.be.a(SellingPartnerApiForShipping.ServiceRateList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForShipping.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipment', function() {
        it('should call getShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipment call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.getShipment(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipping.GetShipmentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipping.Shipment);
                  expect(data.payload.shipmentId).to.be.a(SellingPartnerApiForShipping.ShipmentId);
                  expect(data.payload.clientReferenceId).to.be.a(SellingPartnerApiForShipping.ClientReferenceId);
                  expect(data.payload.shipFrom).to.be.a(SellingPartnerApiForShipping.Address);
                    expect(data.payload.shipFrom.name).to.be.a('string');
                // expect(data.payload.shipFrom.name).to.be("");
                expect(data.payload.shipFrom.addressLine1).to.be.a('string');
                // expect(data.payload.shipFrom.addressLine1).to.be("");
                expect(data.payload.shipFrom.addressLine2).to.be.a('string');
                // expect(data.payload.shipFrom.addressLine2).to.be("");
                expect(data.payload.shipFrom.addressLine3).to.be.a('string');
                // expect(data.payload.shipFrom.addressLine3).to.be("");
                expect(data.payload.shipFrom.stateOrRegion).to.be.a(SellingPartnerApiForShipping.StateOrRegion);
                    expect(data.payload.shipFrom.city).to.be.a(SellingPartnerApiForShipping.City);
                    expect(data.payload.shipFrom.countryCode).to.be.a(SellingPartnerApiForShipping.CountryCode);
                    expect(data.payload.shipFrom.postalCode).to.be.a(SellingPartnerApiForShipping.PostalCode);
                    expect(data.payload.shipFrom.email).to.be.a('string');
                // expect(data.payload.shipFrom.email).to.be("");
                {
                  let dataCtr = data.payload.shipFrom.copyEmails;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.payload.shipFrom.phoneNumber).to.be.a('string');
                // expect(data.payload.shipFrom.phoneNumber).to.be("");
              expect(data.payload.shipTo).to.be.a(SellingPartnerApiForShipping.Address);
                    expect(data.payload.shipTo.name).to.be.a('string');
                // expect(data.payload.shipTo.name).to.be("");
                expect(data.payload.shipTo.addressLine1).to.be.a('string');
                // expect(data.payload.shipTo.addressLine1).to.be("");
                expect(data.payload.shipTo.addressLine2).to.be.a('string');
                // expect(data.payload.shipTo.addressLine2).to.be("");
                expect(data.payload.shipTo.addressLine3).to.be.a('string');
                // expect(data.payload.shipTo.addressLine3).to.be("");
                expect(data.payload.shipTo.stateOrRegion).to.be.a(SellingPartnerApiForShipping.StateOrRegion);
                    expect(data.payload.shipTo.city).to.be.a(SellingPartnerApiForShipping.City);
                    expect(data.payload.shipTo.countryCode).to.be.a(SellingPartnerApiForShipping.CountryCode);
                    expect(data.payload.shipTo.postalCode).to.be.a(SellingPartnerApiForShipping.PostalCode);
                    expect(data.payload.shipTo.email).to.be.a('string');
                // expect(data.payload.shipTo.email).to.be("");
                {
                  let dataCtr = data.payload.shipTo.copyEmails;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.payload.shipTo.phoneNumber).to.be.a('string');
                // expect(data.payload.shipTo.phoneNumber).to.be("");
              expect(data.payload.acceptedRate).to.be.a(SellingPartnerApiForShipping.AcceptedRate);
                    expect(data.payload.acceptedRate.totalCharge).to.be.a(SellingPartnerApiForShipping.Currency);
                      expect(data.payload.acceptedRate.totalCharge.value).to.be.a('number');
                  // expect(data.payload.acceptedRate.totalCharge.value).to.be();
                  expect(data.payload.acceptedRate.totalCharge.unit).to.be.a('string');
                  // expect(data.payload.acceptedRate.totalCharge.unit).to.be("");
                expect(data.payload.acceptedRate.billedWeight).to.be.a(SellingPartnerApiForShipping.Weight);
                      expect(data.payload.acceptedRate.billedWeight.unit).to.be.a('string');
                  // expect(data.payload.acceptedRate.billedWeight.unit).to.be("g");
                  expect(data.payload.acceptedRate.billedWeight.value).to.be.a('number');
                  // expect(data.payload.acceptedRate.billedWeight.value).to.be();
                expect(data.payload.acceptedRate.serviceType).to.be.a(SellingPartnerApiForShipping.ServiceType);
                    expect(data.payload.acceptedRate.promise).to.be.a(SellingPartnerApiForShipping.ShippingPromiseSet);
                      expect(data.payload.acceptedRate.promise.deliveryWindow).to.be.a(SellingPartnerApiForShipping.TimeRange);
                        expect(data.payload.acceptedRate.promise.deliveryWindow.start).to.be.a(Date);
                    // expect(data.payload.acceptedRate.promise.deliveryWindow.start).to.be(new Date());
                    expect(data.payload.acceptedRate.promise.deliveryWindow.end).to.be.a(Date);
                    // expect(data.payload.acceptedRate.promise.deliveryWindow.end).to.be(new Date());
                  expect(data.payload.acceptedRate.promise.receiveWindow).to.be.a(SellingPartnerApiForShipping.TimeRange);
                        expect(data.payload.acceptedRate.promise.receiveWindow.start).to.be.a(Date);
                    // expect(data.payload.acceptedRate.promise.receiveWindow.start).to.be(new Date());
                    expect(data.payload.acceptedRate.promise.receiveWindow.end).to.be.a(Date);
                    // expect(data.payload.acceptedRate.promise.receiveWindow.end).to.be(new Date());
              expect(data.payload.shipper).to.be.a(SellingPartnerApiForShipping.Party);
                    expect(data.payload.shipper.accountId).to.be.a(SellingPartnerApiForShipping.AccountId);
        
              expect(data.payload.containers).to.be.a(SellingPartnerApiForShipping.ContainerList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForShipping.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackingInformation', function() {
        it('should call getTrackingInformation successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackingInformation call and complete the assertions
          /*
          var trackingId = "trackingId_example";

          instance.getTrackingInformation(trackingId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipping.GetTrackingInformationResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipping.TrackingInformation);
                  expect(data.payload.trackingId).to.be.a(SellingPartnerApiForShipping.TrackingId);
                  expect(data.payload.summary).to.be.a(SellingPartnerApiForShipping.TrackingSummary);
                    expect(data.payload.summary.status).to.be.a('string');
                // expect(data.payload.summary.status).to.be("");
              expect(data.payload.promisedDeliveryDate).to.be.a(SellingPartnerApiForShipping.PromisedDeliveryDate);
                  expect(data.payload.eventHistory).to.be.a(SellingPartnerApiForShipping.EventList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForShipping.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseLabels', function() {
        it('should call purchaseLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseLabels call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var body = new SellingPartnerApiForShipping.PurchaseLabelsRequest();
          body.rateId = new SellingPartnerApiForShipping.RateId();
          body.labelSpecification = new SellingPartnerApiForShipping.LabelSpecification();
          body.labelSpecification.labelFormat = "PNG";
          body.labelSpecification.labelStockSize = "4x6";

          instance.purchaseLabels(shipmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipping.PurchaseLabelsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipping.PurchaseLabelsResult);
                  expect(data.payload.shipmentId).to.be.a(SellingPartnerApiForShipping.ShipmentId);
                  expect(data.payload.clientReferenceId).to.be.a(SellingPartnerApiForShipping.ClientReferenceId);
                  expect(data.payload.acceptedRate).to.be.a(SellingPartnerApiForShipping.AcceptedRate);
                    expect(data.payload.acceptedRate.totalCharge).to.be.a(SellingPartnerApiForShipping.Currency);
                      expect(data.payload.acceptedRate.totalCharge.value).to.be.a('number');
                  // expect(data.payload.acceptedRate.totalCharge.value).to.be();
                  expect(data.payload.acceptedRate.totalCharge.unit).to.be.a('string');
                  // expect(data.payload.acceptedRate.totalCharge.unit).to.be("");
                expect(data.payload.acceptedRate.billedWeight).to.be.a(SellingPartnerApiForShipping.Weight);
                      expect(data.payload.acceptedRate.billedWeight.unit).to.be.a('string');
                  // expect(data.payload.acceptedRate.billedWeight.unit).to.be("g");
                  expect(data.payload.acceptedRate.billedWeight.value).to.be.a('number');
                  // expect(data.payload.acceptedRate.billedWeight.value).to.be();
                expect(data.payload.acceptedRate.serviceType).to.be.a(SellingPartnerApiForShipping.ServiceType);
                    expect(data.payload.acceptedRate.promise).to.be.a(SellingPartnerApiForShipping.ShippingPromiseSet);
                      expect(data.payload.acceptedRate.promise.deliveryWindow).to.be.a(SellingPartnerApiForShipping.TimeRange);
                        expect(data.payload.acceptedRate.promise.deliveryWindow.start).to.be.a(Date);
                    // expect(data.payload.acceptedRate.promise.deliveryWindow.start).to.be(new Date());
                    expect(data.payload.acceptedRate.promise.deliveryWindow.end).to.be.a(Date);
                    // expect(data.payload.acceptedRate.promise.deliveryWindow.end).to.be(new Date());
                  expect(data.payload.acceptedRate.promise.receiveWindow).to.be.a(SellingPartnerApiForShipping.TimeRange);
                        expect(data.payload.acceptedRate.promise.receiveWindow.start).to.be.a(Date);
                    // expect(data.payload.acceptedRate.promise.receiveWindow.start).to.be(new Date());
                    expect(data.payload.acceptedRate.promise.receiveWindow.end).to.be.a(Date);
                    // expect(data.payload.acceptedRate.promise.receiveWindow.end).to.be(new Date());
              expect(data.payload.labelResults).to.be.a(SellingPartnerApiForShipping.LabelResultList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForShipping.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseShipment', function() {
        it('should call purchaseShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseShipment call and complete the assertions
          /*
          var body = new SellingPartnerApiForShipping.PurchaseShipmentRequest();
          body.clientReferenceId = new SellingPartnerApiForShipping.ClientReferenceId();
          body.shipTo = new SellingPartnerApiForShipping.Address();
          body.shipTo.name = "";
          body.shipTo.addressLine1 = "";
          body.shipTo.addressLine2 = "";
          body.shipTo.addressLine3 = "";
          body.shipTo.stateOrRegion = new SellingPartnerApiForShipping.StateOrRegion();
          body.shipTo.city = new SellingPartnerApiForShipping.City();
          body.shipTo.countryCode = new SellingPartnerApiForShipping.CountryCode();
          body.shipTo.postalCode = new SellingPartnerApiForShipping.PostalCode();
          body.shipTo.email = "";
          body.shipTo.copyEmails = [""];
          body.shipTo.phoneNumber = "";
          body.shipFrom = new SellingPartnerApiForShipping.Address();
          body.shipFrom.name = "";
          body.shipFrom.addressLine1 = "";
          body.shipFrom.addressLine2 = "";
          body.shipFrom.addressLine3 = "";
          body.shipFrom.stateOrRegion = new SellingPartnerApiForShipping.StateOrRegion();
          body.shipFrom.city = new SellingPartnerApiForShipping.City();
          body.shipFrom.countryCode = new SellingPartnerApiForShipping.CountryCode();
          body.shipFrom.postalCode = new SellingPartnerApiForShipping.PostalCode();
          body.shipFrom.email = "";
          body.shipFrom.copyEmails = [""];
          body.shipFrom.phoneNumber = "";
          body.shipDate = new Date();
          body.serviceType = new SellingPartnerApiForShipping.ServiceType();
          body.containers = new SellingPartnerApiForShipping.ContainerList();
          body.labelSpecification = new SellingPartnerApiForShipping.LabelSpecification();
          body.labelSpecification.labelFormat = "PNG";
          body.labelSpecification.labelStockSize = "4x6";

          instance.purchaseShipment(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipping.PurchaseShipmentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipping.PurchaseShipmentResult);
                  expect(data.payload.shipmentId).to.be.a(SellingPartnerApiForShipping.ShipmentId);
                  expect(data.payload.serviceRate).to.be.a(SellingPartnerApiForShipping.ServiceRate);
                    expect(data.payload.serviceRate.totalCharge).to.be.a(SellingPartnerApiForShipping.Currency);
                      expect(data.payload.serviceRate.totalCharge.value).to.be.a('number');
                  // expect(data.payload.serviceRate.totalCharge.value).to.be();
                  expect(data.payload.serviceRate.totalCharge.unit).to.be.a('string');
                  // expect(data.payload.serviceRate.totalCharge.unit).to.be("");
                expect(data.payload.serviceRate.billableWeight).to.be.a(SellingPartnerApiForShipping.Weight);
                      expect(data.payload.serviceRate.billableWeight.unit).to.be.a('string');
                  // expect(data.payload.serviceRate.billableWeight.unit).to.be("g");
                  expect(data.payload.serviceRate.billableWeight.value).to.be.a('number');
                  // expect(data.payload.serviceRate.billableWeight.value).to.be();
                expect(data.payload.serviceRate.serviceType).to.be.a(SellingPartnerApiForShipping.ServiceType);
                    expect(data.payload.serviceRate.promise).to.be.a(SellingPartnerApiForShipping.ShippingPromiseSet);
                      expect(data.payload.serviceRate.promise.deliveryWindow).to.be.a(SellingPartnerApiForShipping.TimeRange);
                        expect(data.payload.serviceRate.promise.deliveryWindow.start).to.be.a(Date);
                    // expect(data.payload.serviceRate.promise.deliveryWindow.start).to.be(new Date());
                    expect(data.payload.serviceRate.promise.deliveryWindow.end).to.be.a(Date);
                    // expect(data.payload.serviceRate.promise.deliveryWindow.end).to.be(new Date());
                  expect(data.payload.serviceRate.promise.receiveWindow).to.be.a(SellingPartnerApiForShipping.TimeRange);
                        expect(data.payload.serviceRate.promise.receiveWindow.start).to.be.a(Date);
                    // expect(data.payload.serviceRate.promise.receiveWindow.start).to.be(new Date());
                    expect(data.payload.serviceRate.promise.receiveWindow.end).to.be.a(Date);
                    // expect(data.payload.serviceRate.promise.receiveWindow.end).to.be(new Date());
              expect(data.payload.labelResults).to.be.a(SellingPartnerApiForShipping.LabelResultList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForShipping.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('retrieveShippingLabel', function() {
        it('should call retrieveShippingLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for retrieveShippingLabel call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var trackingId = "trackingId_example";
          var body = new SellingPartnerApiForShipping.RetrieveShippingLabelRequest();
          body.labelSpecification = new SellingPartnerApiForShipping.LabelSpecification();
          body.labelSpecification.labelFormat = "PNG";
          body.labelSpecification.labelStockSize = "4x6";

          instance.retrieveShippingLabel(shipmentId, trackingId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipping.RetrieveShippingLabelResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipping.RetrieveShippingLabelResult);
                  expect(data.payload.labelStream).to.be.a(SellingPartnerApiForShipping.LabelStream);
                  expect(data.payload.labelSpecification).to.be.a(SellingPartnerApiForShipping.LabelSpecification);
                    expect(data.payload.labelSpecification.labelFormat).to.be.a('string');
                // expect(data.payload.labelSpecification.labelFormat).to.be("PNG");
                expect(data.payload.labelSpecification.labelStockSize).to.be.a('string');
                // expect(data.payload.labelSpecification.labelStockSize).to.be("4x6");
            expect(data.errors).to.be.a(SellingPartnerApiForShipping.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
