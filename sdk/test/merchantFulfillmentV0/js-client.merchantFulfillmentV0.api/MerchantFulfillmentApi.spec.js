/*
 * Selling Partner API for Merchant Fulfillment
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/merchantFulfillmentV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/merchantFulfillmentV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMerchantFulfillment);
  }
}(this, function(expect, SellingPartnerApiForMerchantFulfillment) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForMerchantFulfillment.MerchantFulfillmentApi();
  });

  describe('merchantFulfillmentV0', function() {
    describe('MerchantFulfillmentApi', function() {
      describe('cancelShipment', function() {
        it('should call cancelShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelShipment call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.cancelShipment(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMerchantFulfillment.CancelShipmentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForMerchantFulfillment.Shipment);
                  expect(data.payload.shipmentId).to.be.a(SellingPartnerApiForMerchantFulfillment.ShipmentId);
                  expect(data.payload.amazonOrderId).to.be.a(SellingPartnerApiForMerchantFulfillment.AmazonOrderId);
                  expect(data.payload.sellerOrderId).to.be.a(SellingPartnerApiForMerchantFulfillment.SellerOrderId);
                  expect(data.payload.itemList).to.be.a(SellingPartnerApiForMerchantFulfillment.ItemList);
                  expect(data.payload.shipFromAddress).to.be.a(SellingPartnerApiForMerchantFulfillment.Address);
                    expect(data.payload.shipFromAddress.name).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressName);
                    expect(data.payload.shipFromAddress.addressLine1).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine1);
                    expect(data.payload.shipFromAddress.addressLine2).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine2);
                    expect(data.payload.shipFromAddress.addressLine3).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine3);
                    expect(data.payload.shipFromAddress.districtOrCounty).to.be.a(SellingPartnerApiForMerchantFulfillment.DistrictOrCounty);
                    expect(data.payload.shipFromAddress.email).to.be.a(SellingPartnerApiForMerchantFulfillment.EmailAddress);
                    expect(data.payload.shipFromAddress.city).to.be.a(SellingPartnerApiForMerchantFulfillment.City);
                    expect(data.payload.shipFromAddress.stateOrProvinceCode).to.be.a(SellingPartnerApiForMerchantFulfillment.StateOrProvinceCode);
                    expect(data.payload.shipFromAddress.postalCode).to.be.a(SellingPartnerApiForMerchantFulfillment.PostalCode);
                    expect(data.payload.shipFromAddress.countryCode).to.be.a(SellingPartnerApiForMerchantFulfillment.CountryCode);
                    expect(data.payload.shipFromAddress.phone).to.be.a(SellingPartnerApiForMerchantFulfillment.PhoneNumber);
        
              expect(data.payload.shipToAddress).to.be.a(SellingPartnerApiForMerchantFulfillment.Address);
                    expect(data.payload.shipToAddress.name).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressName);
                    expect(data.payload.shipToAddress.addressLine1).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine1);
                    expect(data.payload.shipToAddress.addressLine2).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine2);
                    expect(data.payload.shipToAddress.addressLine3).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine3);
                    expect(data.payload.shipToAddress.districtOrCounty).to.be.a(SellingPartnerApiForMerchantFulfillment.DistrictOrCounty);
                    expect(data.payload.shipToAddress.email).to.be.a(SellingPartnerApiForMerchantFulfillment.EmailAddress);
                    expect(data.payload.shipToAddress.city).to.be.a(SellingPartnerApiForMerchantFulfillment.City);
                    expect(data.payload.shipToAddress.stateOrProvinceCode).to.be.a(SellingPartnerApiForMerchantFulfillment.StateOrProvinceCode);
                    expect(data.payload.shipToAddress.postalCode).to.be.a(SellingPartnerApiForMerchantFulfillment.PostalCode);
                    expect(data.payload.shipToAddress.countryCode).to.be.a(SellingPartnerApiForMerchantFulfillment.CountryCode);
                    expect(data.payload.shipToAddress.phone).to.be.a(SellingPartnerApiForMerchantFulfillment.PhoneNumber);
        
              expect(data.payload.packageDimensions).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimensions);
                    expect(data.payload.packageDimensions.length).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimension);
                    expect(data.payload.packageDimensions.width).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimension);
                    expect(data.payload.packageDimensions.height).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimension);
                    expect(data.payload.packageDimensions.unit).to.be.a(SellingPartnerApiForMerchantFulfillment.UnitOfLength);
                    expect(data.payload.packageDimensions.predefinedPackageDimensions).to.be.a(SellingPartnerApiForMerchantFulfillment.PredefinedPackageDimensions);
        
              expect(data.payload.weight).to.be.a(SellingPartnerApiForMerchantFulfillment.Weight);
                    expect(data.payload.weight.value).to.be.a(SellingPartnerApiForMerchantFulfillment.WeightValue);
                    expect(data.payload.weight.unit).to.be.a(SellingPartnerApiForMerchantFulfillment.UnitOfWeight);
        
              expect(data.payload.insurance).to.be.a(SellingPartnerApiForMerchantFulfillment.CurrencyAmount);
                    expect(data.payload.insurance.currencyCode).to.be.a('string');
                // expect(data.payload.insurance.currencyCode).to.be("");
                expect(data.payload.insurance.amount).to.be.a('number');
                // expect(data.payload.insurance.amount).to.be(0.0);
              expect(data.payload.shippingService).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingService);
                    expect(data.payload.shippingService.shippingServiceName).to.be.a('string');
                // expect(data.payload.shippingService.shippingServiceName).to.be("");
                expect(data.payload.shippingService.carrierName).to.be.a('string');
                // expect(data.payload.shippingService.carrierName).to.be("");
                expect(data.payload.shippingService.shippingServiceId).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingServiceIdentifier);
                    expect(data.payload.shippingService.shippingServiceOfferId).to.be.a('string');
                // expect(data.payload.shippingService.shippingServiceOfferId).to.be("");
                expect(data.payload.shippingService.shipDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                    expect(data.payload.shippingService.earliestEstimatedDeliveryDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                    expect(data.payload.shippingService.latestEstimatedDeliveryDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                    expect(data.payload.shippingService.rate).to.be.a(SellingPartnerApiForMerchantFulfillment.CurrencyAmount);
                      expect(data.payload.shippingService.rate.currencyCode).to.be.a('string');
                  // expect(data.payload.shippingService.rate.currencyCode).to.be("");
                  expect(data.payload.shippingService.rate.amount).to.be.a('number');
                  // expect(data.payload.shippingService.rate.amount).to.be(0.0);
                expect(data.payload.shippingService.shippingServiceOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingServiceOptions);
                      expect(data.payload.shippingService.shippingServiceOptions.deliveryExperience).to.be.a(SellingPartnerApiForMerchantFulfillment.DeliveryExperienceType);
                      expect(data.payload.shippingService.shippingServiceOptions.declaredValue).to.be.a(SellingPartnerApiForMerchantFulfillment.CurrencyAmount);
                        expect(data.payload.shippingService.shippingServiceOptions.declaredValue.currencyCode).to.be.a('string');
                    // expect(data.payload.shippingService.shippingServiceOptions.declaredValue.currencyCode).to.be("");
                    expect(data.payload.shippingService.shippingServiceOptions.declaredValue.amount).to.be.a('number');
                    // expect(data.payload.shippingService.shippingServiceOptions.declaredValue.amount).to.be(0.0);
                  expect(data.payload.shippingService.shippingServiceOptions.carrierWillPickUp).to.be.a('boolean');
                  // expect(data.payload.shippingService.shippingServiceOptions.carrierWillPickUp).to.be(false);
                  expect(data.payload.shippingService.shippingServiceOptions.carrierWillPickUpOption).to.be.a(SellingPartnerApiForMerchantFulfillment.CarrierWillPickUpOption);
                      expect(data.payload.shippingService.shippingServiceOptions.labelFormat).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelFormat);
          
                expect(data.payload.shippingService.availableShippingServiceOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableShippingServiceOptions);
                      expect(data.payload.shippingService.availableShippingServiceOptions.availableCarrierWillPickUpOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableCarrierWillPickUpOptionsList);
                      expect(data.payload.shippingService.availableShippingServiceOptions.availableDeliveryExperienceOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableDeliveryExperienceOptionsList);
          
                expect(data.payload.shippingService.availableLabelFormats).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelFormatList);
                    expect(data.payload.shippingService.availableFormatOptionsForLabel).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableFormatOptionsForLabelList);
                    expect(data.payload.shippingService.requiresAdditionalSellerInputs).to.be.a('boolean');
                // expect(data.payload.shippingService.requiresAdditionalSellerInputs).to.be(false);
                expect(data.payload.shippingService.benefits).to.be.a(SellingPartnerApiForMerchantFulfillment.Benefits);
                      expect(data.payload.shippingService.benefits.includedBenefits).to.be.a(SellingPartnerApiForMerchantFulfillment.IncludedBenefits);
                      expect(data.payload.shippingService.benefits.excludedBenefits).to.be.a(SellingPartnerApiForMerchantFulfillment.ExcludedBenefits);
          
              expect(data.payload.label).to.be.a(SellingPartnerApiForMerchantFulfillment.Label);
                    expect(data.payload.label.customTextForLabel).to.be.a(SellingPartnerApiForMerchantFulfillment.CustomTextForLabel);
                    expect(data.payload.label.dimensions).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelDimensions);
                      expect(data.payload.label.dimensions.length).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelDimension);
                      expect(data.payload.label.dimensions.width).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelDimension);
                      expect(data.payload.label.dimensions.unit).to.be.a(SellingPartnerApiForMerchantFulfillment.UnitOfLength);
          
                expect(data.payload.label.fileContents).to.be.a(SellingPartnerApiForMerchantFulfillment.FileContents);
                      expect(data.payload.label.fileContents.contents).to.be.a('string');
                  // expect(data.payload.label.fileContents.contents).to.be("");
                  expect(data.payload.label.fileContents.fileType).to.be.a(SellingPartnerApiForMerchantFulfillment.FileType);
                      expect(data.payload.label.fileContents.checksum).to.be.a('string');
                  // expect(data.payload.label.fileContents.checksum).to.be("");
                expect(data.payload.label.labelFormat).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelFormat);
                    expect(data.payload.label.standardIdForLabel).to.be.a(SellingPartnerApiForMerchantFulfillment.StandardIdForLabel);
        
              expect(data.payload.status).to.be.a(SellingPartnerApiForMerchantFulfillment.ShipmentStatus);
                  expect(data.payload.trackingId).to.be.a(SellingPartnerApiForMerchantFulfillment.TrackingId);
                  expect(data.payload.createdDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                  expect(data.payload.lastUpdatedDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
      
            expect(data.errors).to.be.a(SellingPartnerApiForMerchantFulfillment.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createShipment', function() {
        it('should call createShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for createShipment call and complete the assertions
          /*
          var body = new SellingPartnerApiForMerchantFulfillment.CreateShipmentRequest();
          body.shipmentRequestDetails = new SellingPartnerApiForMerchantFulfillment.ShipmentRequestDetails();
          body.shipmentRequestDetails.amazonOrderId = new SellingPartnerApiForMerchantFulfillment.AmazonOrderId();
          body.shipmentRequestDetails.sellerOrderId = new SellingPartnerApiForMerchantFulfillment.SellerOrderId();
          body.shipmentRequestDetails.itemList = new SellingPartnerApiForMerchantFulfillment.ItemList();
          body.shipmentRequestDetails.shipFromAddress = new SellingPartnerApiForMerchantFulfillment.Address();
          body.shipmentRequestDetails.shipFromAddress.name = new SellingPartnerApiForMerchantFulfillment.AddressName();
          body.shipmentRequestDetails.shipFromAddress.addressLine1 = new SellingPartnerApiForMerchantFulfillment.AddressLine1();
          body.shipmentRequestDetails.shipFromAddress.addressLine2 = new SellingPartnerApiForMerchantFulfillment.AddressLine2();
          body.shipmentRequestDetails.shipFromAddress.addressLine3 = new SellingPartnerApiForMerchantFulfillment.AddressLine3();
          body.shipmentRequestDetails.shipFromAddress.districtOrCounty = new SellingPartnerApiForMerchantFulfillment.DistrictOrCounty();
          body.shipmentRequestDetails.shipFromAddress.email = new SellingPartnerApiForMerchantFulfillment.EmailAddress();
          body.shipmentRequestDetails.shipFromAddress.city = new SellingPartnerApiForMerchantFulfillment.City();
          body.shipmentRequestDetails.shipFromAddress.stateOrProvinceCode = new SellingPartnerApiForMerchantFulfillment.StateOrProvinceCode();
          body.shipmentRequestDetails.shipFromAddress.postalCode = new SellingPartnerApiForMerchantFulfillment.PostalCode();
          body.shipmentRequestDetails.shipFromAddress.countryCode = new SellingPartnerApiForMerchantFulfillment.CountryCode();
          body.shipmentRequestDetails.shipFromAddress.phone = new SellingPartnerApiForMerchantFulfillment.PhoneNumber();
          body.shipmentRequestDetails.packageDimensions = new SellingPartnerApiForMerchantFulfillment.PackageDimensions();
          body.shipmentRequestDetails.packageDimensions.length = new SellingPartnerApiForMerchantFulfillment.PackageDimension();
          body.shipmentRequestDetails.packageDimensions.width = new SellingPartnerApiForMerchantFulfillment.PackageDimension();
          body.shipmentRequestDetails.packageDimensions.height = new SellingPartnerApiForMerchantFulfillment.PackageDimension();
          body.shipmentRequestDetails.packageDimensions.unit = new SellingPartnerApiForMerchantFulfillment.UnitOfLength();
          body.shipmentRequestDetails.packageDimensions.predefinedPackageDimensions = new SellingPartnerApiForMerchantFulfillment.PredefinedPackageDimensions();
          body.shipmentRequestDetails.weight = new SellingPartnerApiForMerchantFulfillment.Weight();
          body.shipmentRequestDetails.weight.value = new SellingPartnerApiForMerchantFulfillment.WeightValue();
          body.shipmentRequestDetails.weight.unit = new SellingPartnerApiForMerchantFulfillment.UnitOfWeight();
          body.shipmentRequestDetails.mustArriveByDate = new SellingPartnerApiForMerchantFulfillment.Timestamp();
          body.shipmentRequestDetails.shipDate = new SellingPartnerApiForMerchantFulfillment.Timestamp();
          body.shipmentRequestDetails.shippingServiceOptions = new SellingPartnerApiForMerchantFulfillment.ShippingServiceOptions();
          body.shipmentRequestDetails.shippingServiceOptions.deliveryExperience = new SellingPartnerApiForMerchantFulfillment.DeliveryExperienceType();
          body.shipmentRequestDetails.shippingServiceOptions.declaredValue = new SellingPartnerApiForMerchantFulfillment.CurrencyAmount();
          body.shipmentRequestDetails.shippingServiceOptions.declaredValue.currencyCode = "";
          body.shipmentRequestDetails.shippingServiceOptions.declaredValue.amount = 0.0;
          body.shipmentRequestDetails.shippingServiceOptions.carrierWillPickUp = false;
          body.shipmentRequestDetails.shippingServiceOptions.carrierWillPickUpOption = new SellingPartnerApiForMerchantFulfillment.CarrierWillPickUpOption();
          body.shipmentRequestDetails.shippingServiceOptions.labelFormat = new SellingPartnerApiForMerchantFulfillment.LabelFormat();
          body.shipmentRequestDetails.labelCustomization = new SellingPartnerApiForMerchantFulfillment.LabelCustomization();
          body.shipmentRequestDetails.labelCustomization.customTextForLabel = new SellingPartnerApiForMerchantFulfillment.CustomTextForLabel();
          body.shipmentRequestDetails.labelCustomization.standardIdForLabel = new SellingPartnerApiForMerchantFulfillment.StandardIdForLabel();
          body.shippingServiceId = new SellingPartnerApiForMerchantFulfillment.ShippingServiceIdentifier();
          body.shippingServiceOfferId = "";
          body.hazmatType = new SellingPartnerApiForMerchantFulfillment.HazmatType();
          body.labelFormatOption = new SellingPartnerApiForMerchantFulfillment.LabelFormatOptionRequest();
          body.labelFormatOption.includePackingSlipWithLabel = false;
          body.shipmentLevelSellerInputsList = new SellingPartnerApiForMerchantFulfillment.AdditionalSellerInputsList();

          instance.createShipment(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMerchantFulfillment.CreateShipmentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForMerchantFulfillment.Shipment);
                  expect(data.payload.shipmentId).to.be.a(SellingPartnerApiForMerchantFulfillment.ShipmentId);
                  expect(data.payload.amazonOrderId).to.be.a(SellingPartnerApiForMerchantFulfillment.AmazonOrderId);
                  expect(data.payload.sellerOrderId).to.be.a(SellingPartnerApiForMerchantFulfillment.SellerOrderId);
                  expect(data.payload.itemList).to.be.a(SellingPartnerApiForMerchantFulfillment.ItemList);
                  expect(data.payload.shipFromAddress).to.be.a(SellingPartnerApiForMerchantFulfillment.Address);
                    expect(data.payload.shipFromAddress.name).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressName);
                    expect(data.payload.shipFromAddress.addressLine1).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine1);
                    expect(data.payload.shipFromAddress.addressLine2).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine2);
                    expect(data.payload.shipFromAddress.addressLine3).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine3);
                    expect(data.payload.shipFromAddress.districtOrCounty).to.be.a(SellingPartnerApiForMerchantFulfillment.DistrictOrCounty);
                    expect(data.payload.shipFromAddress.email).to.be.a(SellingPartnerApiForMerchantFulfillment.EmailAddress);
                    expect(data.payload.shipFromAddress.city).to.be.a(SellingPartnerApiForMerchantFulfillment.City);
                    expect(data.payload.shipFromAddress.stateOrProvinceCode).to.be.a(SellingPartnerApiForMerchantFulfillment.StateOrProvinceCode);
                    expect(data.payload.shipFromAddress.postalCode).to.be.a(SellingPartnerApiForMerchantFulfillment.PostalCode);
                    expect(data.payload.shipFromAddress.countryCode).to.be.a(SellingPartnerApiForMerchantFulfillment.CountryCode);
                    expect(data.payload.shipFromAddress.phone).to.be.a(SellingPartnerApiForMerchantFulfillment.PhoneNumber);
        
              expect(data.payload.shipToAddress).to.be.a(SellingPartnerApiForMerchantFulfillment.Address);
                    expect(data.payload.shipToAddress.name).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressName);
                    expect(data.payload.shipToAddress.addressLine1).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine1);
                    expect(data.payload.shipToAddress.addressLine2).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine2);
                    expect(data.payload.shipToAddress.addressLine3).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine3);
                    expect(data.payload.shipToAddress.districtOrCounty).to.be.a(SellingPartnerApiForMerchantFulfillment.DistrictOrCounty);
                    expect(data.payload.shipToAddress.email).to.be.a(SellingPartnerApiForMerchantFulfillment.EmailAddress);
                    expect(data.payload.shipToAddress.city).to.be.a(SellingPartnerApiForMerchantFulfillment.City);
                    expect(data.payload.shipToAddress.stateOrProvinceCode).to.be.a(SellingPartnerApiForMerchantFulfillment.StateOrProvinceCode);
                    expect(data.payload.shipToAddress.postalCode).to.be.a(SellingPartnerApiForMerchantFulfillment.PostalCode);
                    expect(data.payload.shipToAddress.countryCode).to.be.a(SellingPartnerApiForMerchantFulfillment.CountryCode);
                    expect(data.payload.shipToAddress.phone).to.be.a(SellingPartnerApiForMerchantFulfillment.PhoneNumber);
        
              expect(data.payload.packageDimensions).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimensions);
                    expect(data.payload.packageDimensions.length).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimension);
                    expect(data.payload.packageDimensions.width).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimension);
                    expect(data.payload.packageDimensions.height).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimension);
                    expect(data.payload.packageDimensions.unit).to.be.a(SellingPartnerApiForMerchantFulfillment.UnitOfLength);
                    expect(data.payload.packageDimensions.predefinedPackageDimensions).to.be.a(SellingPartnerApiForMerchantFulfillment.PredefinedPackageDimensions);
        
              expect(data.payload.weight).to.be.a(SellingPartnerApiForMerchantFulfillment.Weight);
                    expect(data.payload.weight.value).to.be.a(SellingPartnerApiForMerchantFulfillment.WeightValue);
                    expect(data.payload.weight.unit).to.be.a(SellingPartnerApiForMerchantFulfillment.UnitOfWeight);
        
              expect(data.payload.insurance).to.be.a(SellingPartnerApiForMerchantFulfillment.CurrencyAmount);
                    expect(data.payload.insurance.currencyCode).to.be.a('string');
                // expect(data.payload.insurance.currencyCode).to.be("");
                expect(data.payload.insurance.amount).to.be.a('number');
                // expect(data.payload.insurance.amount).to.be(0.0);
              expect(data.payload.shippingService).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingService);
                    expect(data.payload.shippingService.shippingServiceName).to.be.a('string');
                // expect(data.payload.shippingService.shippingServiceName).to.be("");
                expect(data.payload.shippingService.carrierName).to.be.a('string');
                // expect(data.payload.shippingService.carrierName).to.be("");
                expect(data.payload.shippingService.shippingServiceId).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingServiceIdentifier);
                    expect(data.payload.shippingService.shippingServiceOfferId).to.be.a('string');
                // expect(data.payload.shippingService.shippingServiceOfferId).to.be("");
                expect(data.payload.shippingService.shipDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                    expect(data.payload.shippingService.earliestEstimatedDeliveryDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                    expect(data.payload.shippingService.latestEstimatedDeliveryDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                    expect(data.payload.shippingService.rate).to.be.a(SellingPartnerApiForMerchantFulfillment.CurrencyAmount);
                      expect(data.payload.shippingService.rate.currencyCode).to.be.a('string');
                  // expect(data.payload.shippingService.rate.currencyCode).to.be("");
                  expect(data.payload.shippingService.rate.amount).to.be.a('number');
                  // expect(data.payload.shippingService.rate.amount).to.be(0.0);
                expect(data.payload.shippingService.shippingServiceOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingServiceOptions);
                      expect(data.payload.shippingService.shippingServiceOptions.deliveryExperience).to.be.a(SellingPartnerApiForMerchantFulfillment.DeliveryExperienceType);
                      expect(data.payload.shippingService.shippingServiceOptions.declaredValue).to.be.a(SellingPartnerApiForMerchantFulfillment.CurrencyAmount);
                        expect(data.payload.shippingService.shippingServiceOptions.declaredValue.currencyCode).to.be.a('string');
                    // expect(data.payload.shippingService.shippingServiceOptions.declaredValue.currencyCode).to.be("");
                    expect(data.payload.shippingService.shippingServiceOptions.declaredValue.amount).to.be.a('number');
                    // expect(data.payload.shippingService.shippingServiceOptions.declaredValue.amount).to.be(0.0);
                  expect(data.payload.shippingService.shippingServiceOptions.carrierWillPickUp).to.be.a('boolean');
                  // expect(data.payload.shippingService.shippingServiceOptions.carrierWillPickUp).to.be(false);
                  expect(data.payload.shippingService.shippingServiceOptions.carrierWillPickUpOption).to.be.a(SellingPartnerApiForMerchantFulfillment.CarrierWillPickUpOption);
                      expect(data.payload.shippingService.shippingServiceOptions.labelFormat).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelFormat);
          
                expect(data.payload.shippingService.availableShippingServiceOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableShippingServiceOptions);
                      expect(data.payload.shippingService.availableShippingServiceOptions.availableCarrierWillPickUpOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableCarrierWillPickUpOptionsList);
                      expect(data.payload.shippingService.availableShippingServiceOptions.availableDeliveryExperienceOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableDeliveryExperienceOptionsList);
          
                expect(data.payload.shippingService.availableLabelFormats).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelFormatList);
                    expect(data.payload.shippingService.availableFormatOptionsForLabel).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableFormatOptionsForLabelList);
                    expect(data.payload.shippingService.requiresAdditionalSellerInputs).to.be.a('boolean');
                // expect(data.payload.shippingService.requiresAdditionalSellerInputs).to.be(false);
                expect(data.payload.shippingService.benefits).to.be.a(SellingPartnerApiForMerchantFulfillment.Benefits);
                      expect(data.payload.shippingService.benefits.includedBenefits).to.be.a(SellingPartnerApiForMerchantFulfillment.IncludedBenefits);
                      expect(data.payload.shippingService.benefits.excludedBenefits).to.be.a(SellingPartnerApiForMerchantFulfillment.ExcludedBenefits);
          
              expect(data.payload.label).to.be.a(SellingPartnerApiForMerchantFulfillment.Label);
                    expect(data.payload.label.customTextForLabel).to.be.a(SellingPartnerApiForMerchantFulfillment.CustomTextForLabel);
                    expect(data.payload.label.dimensions).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelDimensions);
                      expect(data.payload.label.dimensions.length).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelDimension);
                      expect(data.payload.label.dimensions.width).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelDimension);
                      expect(data.payload.label.dimensions.unit).to.be.a(SellingPartnerApiForMerchantFulfillment.UnitOfLength);
          
                expect(data.payload.label.fileContents).to.be.a(SellingPartnerApiForMerchantFulfillment.FileContents);
                      expect(data.payload.label.fileContents.contents).to.be.a('string');
                  // expect(data.payload.label.fileContents.contents).to.be("");
                  expect(data.payload.label.fileContents.fileType).to.be.a(SellingPartnerApiForMerchantFulfillment.FileType);
                      expect(data.payload.label.fileContents.checksum).to.be.a('string');
                  // expect(data.payload.label.fileContents.checksum).to.be("");
                expect(data.payload.label.labelFormat).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelFormat);
                    expect(data.payload.label.standardIdForLabel).to.be.a(SellingPartnerApiForMerchantFulfillment.StandardIdForLabel);
        
              expect(data.payload.status).to.be.a(SellingPartnerApiForMerchantFulfillment.ShipmentStatus);
                  expect(data.payload.trackingId).to.be.a(SellingPartnerApiForMerchantFulfillment.TrackingId);
                  expect(data.payload.createdDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                  expect(data.payload.lastUpdatedDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
      
            expect(data.errors).to.be.a(SellingPartnerApiForMerchantFulfillment.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAdditionalSellerInputs', function() {
        it('should call getAdditionalSellerInputs successfully', function(done) {
          // TODO: uncomment, update parameter values for getAdditionalSellerInputs call and complete the assertions
          /*
          var body = new SellingPartnerApiForMerchantFulfillment.GetAdditionalSellerInputsRequest();
          body.shippingServiceId = new SellingPartnerApiForMerchantFulfillment.ShippingServiceIdentifier();
          body.shipFromAddress = new SellingPartnerApiForMerchantFulfillment.Address();
          body.shipFromAddress.name = new SellingPartnerApiForMerchantFulfillment.AddressName();
          body.shipFromAddress.addressLine1 = new SellingPartnerApiForMerchantFulfillment.AddressLine1();
          body.shipFromAddress.addressLine2 = new SellingPartnerApiForMerchantFulfillment.AddressLine2();
          body.shipFromAddress.addressLine3 = new SellingPartnerApiForMerchantFulfillment.AddressLine3();
          body.shipFromAddress.districtOrCounty = new SellingPartnerApiForMerchantFulfillment.DistrictOrCounty();
          body.shipFromAddress.email = new SellingPartnerApiForMerchantFulfillment.EmailAddress();
          body.shipFromAddress.city = new SellingPartnerApiForMerchantFulfillment.City();
          body.shipFromAddress.stateOrProvinceCode = new SellingPartnerApiForMerchantFulfillment.StateOrProvinceCode();
          body.shipFromAddress.postalCode = new SellingPartnerApiForMerchantFulfillment.PostalCode();
          body.shipFromAddress.countryCode = new SellingPartnerApiForMerchantFulfillment.CountryCode();
          body.shipFromAddress.phone = new SellingPartnerApiForMerchantFulfillment.PhoneNumber();
          body.orderId = new SellingPartnerApiForMerchantFulfillment.AmazonOrderId();

          instance.getAdditionalSellerInputs(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMerchantFulfillment.GetAdditionalSellerInputsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForMerchantFulfillment.GetAdditionalSellerInputsResult);
                  expect(data.payload.shipmentLevelFields).to.be.a(SellingPartnerApiForMerchantFulfillment.AdditionalInputsList);
                  expect(data.payload.itemLevelFieldsList).to.be.a(SellingPartnerApiForMerchantFulfillment.ItemLevelFieldsList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForMerchantFulfillment.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEligibleShipmentServices', function() {
        it('should call getEligibleShipmentServices successfully', function(done) {
          // TODO: uncomment, update parameter values for getEligibleShipmentServices call and complete the assertions
          /*
          var body = new SellingPartnerApiForMerchantFulfillment.GetEligibleShipmentServicesRequest();
          body.shipmentRequestDetails = new SellingPartnerApiForMerchantFulfillment.ShipmentRequestDetails();
          body.shipmentRequestDetails.amazonOrderId = new SellingPartnerApiForMerchantFulfillment.AmazonOrderId();
          body.shipmentRequestDetails.sellerOrderId = new SellingPartnerApiForMerchantFulfillment.SellerOrderId();
          body.shipmentRequestDetails.itemList = new SellingPartnerApiForMerchantFulfillment.ItemList();
          body.shipmentRequestDetails.shipFromAddress = new SellingPartnerApiForMerchantFulfillment.Address();
          body.shipmentRequestDetails.shipFromAddress.name = new SellingPartnerApiForMerchantFulfillment.AddressName();
          body.shipmentRequestDetails.shipFromAddress.addressLine1 = new SellingPartnerApiForMerchantFulfillment.AddressLine1();
          body.shipmentRequestDetails.shipFromAddress.addressLine2 = new SellingPartnerApiForMerchantFulfillment.AddressLine2();
          body.shipmentRequestDetails.shipFromAddress.addressLine3 = new SellingPartnerApiForMerchantFulfillment.AddressLine3();
          body.shipmentRequestDetails.shipFromAddress.districtOrCounty = new SellingPartnerApiForMerchantFulfillment.DistrictOrCounty();
          body.shipmentRequestDetails.shipFromAddress.email = new SellingPartnerApiForMerchantFulfillment.EmailAddress();
          body.shipmentRequestDetails.shipFromAddress.city = new SellingPartnerApiForMerchantFulfillment.City();
          body.shipmentRequestDetails.shipFromAddress.stateOrProvinceCode = new SellingPartnerApiForMerchantFulfillment.StateOrProvinceCode();
          body.shipmentRequestDetails.shipFromAddress.postalCode = new SellingPartnerApiForMerchantFulfillment.PostalCode();
          body.shipmentRequestDetails.shipFromAddress.countryCode = new SellingPartnerApiForMerchantFulfillment.CountryCode();
          body.shipmentRequestDetails.shipFromAddress.phone = new SellingPartnerApiForMerchantFulfillment.PhoneNumber();
          body.shipmentRequestDetails.packageDimensions = new SellingPartnerApiForMerchantFulfillment.PackageDimensions();
          body.shipmentRequestDetails.packageDimensions.length = new SellingPartnerApiForMerchantFulfillment.PackageDimension();
          body.shipmentRequestDetails.packageDimensions.width = new SellingPartnerApiForMerchantFulfillment.PackageDimension();
          body.shipmentRequestDetails.packageDimensions.height = new SellingPartnerApiForMerchantFulfillment.PackageDimension();
          body.shipmentRequestDetails.packageDimensions.unit = new SellingPartnerApiForMerchantFulfillment.UnitOfLength();
          body.shipmentRequestDetails.packageDimensions.predefinedPackageDimensions = new SellingPartnerApiForMerchantFulfillment.PredefinedPackageDimensions();
          body.shipmentRequestDetails.weight = new SellingPartnerApiForMerchantFulfillment.Weight();
          body.shipmentRequestDetails.weight.value = new SellingPartnerApiForMerchantFulfillment.WeightValue();
          body.shipmentRequestDetails.weight.unit = new SellingPartnerApiForMerchantFulfillment.UnitOfWeight();
          body.shipmentRequestDetails.mustArriveByDate = new SellingPartnerApiForMerchantFulfillment.Timestamp();
          body.shipmentRequestDetails.shipDate = new SellingPartnerApiForMerchantFulfillment.Timestamp();
          body.shipmentRequestDetails.shippingServiceOptions = new SellingPartnerApiForMerchantFulfillment.ShippingServiceOptions();
          body.shipmentRequestDetails.shippingServiceOptions.deliveryExperience = new SellingPartnerApiForMerchantFulfillment.DeliveryExperienceType();
          body.shipmentRequestDetails.shippingServiceOptions.declaredValue = new SellingPartnerApiForMerchantFulfillment.CurrencyAmount();
          body.shipmentRequestDetails.shippingServiceOptions.declaredValue.currencyCode = "";
          body.shipmentRequestDetails.shippingServiceOptions.declaredValue.amount = 0.0;
          body.shipmentRequestDetails.shippingServiceOptions.carrierWillPickUp = false;
          body.shipmentRequestDetails.shippingServiceOptions.carrierWillPickUpOption = new SellingPartnerApiForMerchantFulfillment.CarrierWillPickUpOption();
          body.shipmentRequestDetails.shippingServiceOptions.labelFormat = new SellingPartnerApiForMerchantFulfillment.LabelFormat();
          body.shipmentRequestDetails.labelCustomization = new SellingPartnerApiForMerchantFulfillment.LabelCustomization();
          body.shipmentRequestDetails.labelCustomization.customTextForLabel = new SellingPartnerApiForMerchantFulfillment.CustomTextForLabel();
          body.shipmentRequestDetails.labelCustomization.standardIdForLabel = new SellingPartnerApiForMerchantFulfillment.StandardIdForLabel();
          body.shippingOfferingFilter = new SellingPartnerApiForMerchantFulfillment.ShippingOfferingFilter();
          body.shippingOfferingFilter.includePackingSlipWithLabel = false;
          body.shippingOfferingFilter.includeComplexShippingOptions = false;
          body.shippingOfferingFilter.carrierWillPickUp = new SellingPartnerApiForMerchantFulfillment.CarrierWillPickUpOption();
          body.shippingOfferingFilter.deliveryExperience = new SellingPartnerApiForMerchantFulfillment.DeliveryExperienceOption();

          instance.getEligibleShipmentServices(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMerchantFulfillment.GetEligibleShipmentServicesResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForMerchantFulfillment.GetEligibleShipmentServicesResult);
                  expect(data.payload.shippingServiceList).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingServiceList);
                  expect(data.payload.rejectedShippingServiceList).to.be.a(SellingPartnerApiForMerchantFulfillment.RejectedShippingServiceList);
                  expect(data.payload.temporarilyUnavailableCarrierList).to.be.a(SellingPartnerApiForMerchantFulfillment.TemporarilyUnavailableCarrierList);
                  expect(data.payload.termsAndConditionsNotAcceptedCarrierList).to.be.a(SellingPartnerApiForMerchantFulfillment.TermsAndConditionsNotAcceptedCarrierList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForMerchantFulfillment.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipment', function() {
        it('should call getShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipment call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.getShipment(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMerchantFulfillment.GetShipmentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForMerchantFulfillment.Shipment);
                  expect(data.payload.shipmentId).to.be.a(SellingPartnerApiForMerchantFulfillment.ShipmentId);
                  expect(data.payload.amazonOrderId).to.be.a(SellingPartnerApiForMerchantFulfillment.AmazonOrderId);
                  expect(data.payload.sellerOrderId).to.be.a(SellingPartnerApiForMerchantFulfillment.SellerOrderId);
                  expect(data.payload.itemList).to.be.a(SellingPartnerApiForMerchantFulfillment.ItemList);
                  expect(data.payload.shipFromAddress).to.be.a(SellingPartnerApiForMerchantFulfillment.Address);
                    expect(data.payload.shipFromAddress.name).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressName);
                    expect(data.payload.shipFromAddress.addressLine1).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine1);
                    expect(data.payload.shipFromAddress.addressLine2).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine2);
                    expect(data.payload.shipFromAddress.addressLine3).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine3);
                    expect(data.payload.shipFromAddress.districtOrCounty).to.be.a(SellingPartnerApiForMerchantFulfillment.DistrictOrCounty);
                    expect(data.payload.shipFromAddress.email).to.be.a(SellingPartnerApiForMerchantFulfillment.EmailAddress);
                    expect(data.payload.shipFromAddress.city).to.be.a(SellingPartnerApiForMerchantFulfillment.City);
                    expect(data.payload.shipFromAddress.stateOrProvinceCode).to.be.a(SellingPartnerApiForMerchantFulfillment.StateOrProvinceCode);
                    expect(data.payload.shipFromAddress.postalCode).to.be.a(SellingPartnerApiForMerchantFulfillment.PostalCode);
                    expect(data.payload.shipFromAddress.countryCode).to.be.a(SellingPartnerApiForMerchantFulfillment.CountryCode);
                    expect(data.payload.shipFromAddress.phone).to.be.a(SellingPartnerApiForMerchantFulfillment.PhoneNumber);
        
              expect(data.payload.shipToAddress).to.be.a(SellingPartnerApiForMerchantFulfillment.Address);
                    expect(data.payload.shipToAddress.name).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressName);
                    expect(data.payload.shipToAddress.addressLine1).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine1);
                    expect(data.payload.shipToAddress.addressLine2).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine2);
                    expect(data.payload.shipToAddress.addressLine3).to.be.a(SellingPartnerApiForMerchantFulfillment.AddressLine3);
                    expect(data.payload.shipToAddress.districtOrCounty).to.be.a(SellingPartnerApiForMerchantFulfillment.DistrictOrCounty);
                    expect(data.payload.shipToAddress.email).to.be.a(SellingPartnerApiForMerchantFulfillment.EmailAddress);
                    expect(data.payload.shipToAddress.city).to.be.a(SellingPartnerApiForMerchantFulfillment.City);
                    expect(data.payload.shipToAddress.stateOrProvinceCode).to.be.a(SellingPartnerApiForMerchantFulfillment.StateOrProvinceCode);
                    expect(data.payload.shipToAddress.postalCode).to.be.a(SellingPartnerApiForMerchantFulfillment.PostalCode);
                    expect(data.payload.shipToAddress.countryCode).to.be.a(SellingPartnerApiForMerchantFulfillment.CountryCode);
                    expect(data.payload.shipToAddress.phone).to.be.a(SellingPartnerApiForMerchantFulfillment.PhoneNumber);
        
              expect(data.payload.packageDimensions).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimensions);
                    expect(data.payload.packageDimensions.length).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimension);
                    expect(data.payload.packageDimensions.width).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimension);
                    expect(data.payload.packageDimensions.height).to.be.a(SellingPartnerApiForMerchantFulfillment.PackageDimension);
                    expect(data.payload.packageDimensions.unit).to.be.a(SellingPartnerApiForMerchantFulfillment.UnitOfLength);
                    expect(data.payload.packageDimensions.predefinedPackageDimensions).to.be.a(SellingPartnerApiForMerchantFulfillment.PredefinedPackageDimensions);
        
              expect(data.payload.weight).to.be.a(SellingPartnerApiForMerchantFulfillment.Weight);
                    expect(data.payload.weight.value).to.be.a(SellingPartnerApiForMerchantFulfillment.WeightValue);
                    expect(data.payload.weight.unit).to.be.a(SellingPartnerApiForMerchantFulfillment.UnitOfWeight);
        
              expect(data.payload.insurance).to.be.a(SellingPartnerApiForMerchantFulfillment.CurrencyAmount);
                    expect(data.payload.insurance.currencyCode).to.be.a('string');
                // expect(data.payload.insurance.currencyCode).to.be("");
                expect(data.payload.insurance.amount).to.be.a('number');
                // expect(data.payload.insurance.amount).to.be(0.0);
              expect(data.payload.shippingService).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingService);
                    expect(data.payload.shippingService.shippingServiceName).to.be.a('string');
                // expect(data.payload.shippingService.shippingServiceName).to.be("");
                expect(data.payload.shippingService.carrierName).to.be.a('string');
                // expect(data.payload.shippingService.carrierName).to.be("");
                expect(data.payload.shippingService.shippingServiceId).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingServiceIdentifier);
                    expect(data.payload.shippingService.shippingServiceOfferId).to.be.a('string');
                // expect(data.payload.shippingService.shippingServiceOfferId).to.be("");
                expect(data.payload.shippingService.shipDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                    expect(data.payload.shippingService.earliestEstimatedDeliveryDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                    expect(data.payload.shippingService.latestEstimatedDeliveryDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                    expect(data.payload.shippingService.rate).to.be.a(SellingPartnerApiForMerchantFulfillment.CurrencyAmount);
                      expect(data.payload.shippingService.rate.currencyCode).to.be.a('string');
                  // expect(data.payload.shippingService.rate.currencyCode).to.be("");
                  expect(data.payload.shippingService.rate.amount).to.be.a('number');
                  // expect(data.payload.shippingService.rate.amount).to.be(0.0);
                expect(data.payload.shippingService.shippingServiceOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingServiceOptions);
                      expect(data.payload.shippingService.shippingServiceOptions.deliveryExperience).to.be.a(SellingPartnerApiForMerchantFulfillment.DeliveryExperienceType);
                      expect(data.payload.shippingService.shippingServiceOptions.declaredValue).to.be.a(SellingPartnerApiForMerchantFulfillment.CurrencyAmount);
                        expect(data.payload.shippingService.shippingServiceOptions.declaredValue.currencyCode).to.be.a('string');
                    // expect(data.payload.shippingService.shippingServiceOptions.declaredValue.currencyCode).to.be("");
                    expect(data.payload.shippingService.shippingServiceOptions.declaredValue.amount).to.be.a('number');
                    // expect(data.payload.shippingService.shippingServiceOptions.declaredValue.amount).to.be(0.0);
                  expect(data.payload.shippingService.shippingServiceOptions.carrierWillPickUp).to.be.a('boolean');
                  // expect(data.payload.shippingService.shippingServiceOptions.carrierWillPickUp).to.be(false);
                  expect(data.payload.shippingService.shippingServiceOptions.carrierWillPickUpOption).to.be.a(SellingPartnerApiForMerchantFulfillment.CarrierWillPickUpOption);
                      expect(data.payload.shippingService.shippingServiceOptions.labelFormat).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelFormat);
          
                expect(data.payload.shippingService.availableShippingServiceOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableShippingServiceOptions);
                      expect(data.payload.shippingService.availableShippingServiceOptions.availableCarrierWillPickUpOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableCarrierWillPickUpOptionsList);
                      expect(data.payload.shippingService.availableShippingServiceOptions.availableDeliveryExperienceOptions).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableDeliveryExperienceOptionsList);
          
                expect(data.payload.shippingService.availableLabelFormats).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelFormatList);
                    expect(data.payload.shippingService.availableFormatOptionsForLabel).to.be.a(SellingPartnerApiForMerchantFulfillment.AvailableFormatOptionsForLabelList);
                    expect(data.payload.shippingService.requiresAdditionalSellerInputs).to.be.a('boolean');
                // expect(data.payload.shippingService.requiresAdditionalSellerInputs).to.be(false);
                expect(data.payload.shippingService.benefits).to.be.a(SellingPartnerApiForMerchantFulfillment.Benefits);
                      expect(data.payload.shippingService.benefits.includedBenefits).to.be.a(SellingPartnerApiForMerchantFulfillment.IncludedBenefits);
                      expect(data.payload.shippingService.benefits.excludedBenefits).to.be.a(SellingPartnerApiForMerchantFulfillment.ExcludedBenefits);
          
              expect(data.payload.label).to.be.a(SellingPartnerApiForMerchantFulfillment.Label);
                    expect(data.payload.label.customTextForLabel).to.be.a(SellingPartnerApiForMerchantFulfillment.CustomTextForLabel);
                    expect(data.payload.label.dimensions).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelDimensions);
                      expect(data.payload.label.dimensions.length).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelDimension);
                      expect(data.payload.label.dimensions.width).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelDimension);
                      expect(data.payload.label.dimensions.unit).to.be.a(SellingPartnerApiForMerchantFulfillment.UnitOfLength);
          
                expect(data.payload.label.fileContents).to.be.a(SellingPartnerApiForMerchantFulfillment.FileContents);
                      expect(data.payload.label.fileContents.contents).to.be.a('string');
                  // expect(data.payload.label.fileContents.contents).to.be("");
                  expect(data.payload.label.fileContents.fileType).to.be.a(SellingPartnerApiForMerchantFulfillment.FileType);
                      expect(data.payload.label.fileContents.checksum).to.be.a('string');
                  // expect(data.payload.label.fileContents.checksum).to.be("");
                expect(data.payload.label.labelFormat).to.be.a(SellingPartnerApiForMerchantFulfillment.LabelFormat);
                    expect(data.payload.label.standardIdForLabel).to.be.a(SellingPartnerApiForMerchantFulfillment.StandardIdForLabel);
        
              expect(data.payload.status).to.be.a(SellingPartnerApiForMerchantFulfillment.ShipmentStatus);
                  expect(data.payload.trackingId).to.be.a(SellingPartnerApiForMerchantFulfillment.TrackingId);
                  expect(data.payload.createdDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
                  expect(data.payload.lastUpdatedDate).to.be.a(SellingPartnerApiForMerchantFulfillment.Timestamp);
      
            expect(data.errors).to.be.a(SellingPartnerApiForMerchantFulfillment.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
