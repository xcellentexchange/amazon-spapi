/*
 * Selling Partner API for Merchant Fulfillment
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/merchantFulfillmentV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/merchantFulfillmentV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMerchantFulfillment);
  }
}(this, function(expect, SellingPartnerApiForMerchantFulfillment) {
  'use strict';

  var instance;

  describe('merchantFulfillmentV0', function() {
    describe('Item', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForMerchantFulfillment.Item();
      });

      it('should create an instance of Item', function() {
        // TODO: update the code to test Item
        expect(instance).to.be.a(SellingPartnerApiForMerchantFulfillment.Item);
      });

      it('should have the property orderItemId (base name: "OrderItemId")', function() {
        // TODO: update the code to test the property orderItemId
        expect(instance).to.have.property('orderItemId');
        // expect(instance.orderItemId).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "Quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property itemWeight (base name: "ItemWeight")', function() {
        // TODO: update the code to test the property itemWeight
        expect(instance).to.have.property('itemWeight');
        // expect(instance.itemWeight).to.be(expectedValueLiteral);
      });

      it('should have the property itemDescription (base name: "ItemDescription")', function() {
        // TODO: update the code to test the property itemDescription
        expect(instance).to.have.property('itemDescription');
        // expect(instance.itemDescription).to.be(expectedValueLiteral);
      });

      it('should have the property transparencyCodeList (base name: "TransparencyCodeList")', function() {
        // TODO: update the code to test the property transparencyCodeList
        expect(instance).to.have.property('transparencyCodeList');
        // expect(instance.transparencyCodeList).to.be(expectedValueLiteral);
      });

      it('should have the property itemLevelSellerInputsList (base name: "ItemLevelSellerInputsList")', function() {
        // TODO: update the code to test the property itemLevelSellerInputsList
        expect(instance).to.have.property('itemLevelSellerInputsList');
        // expect(instance.itemLevelSellerInputsList).to.be(expectedValueLiteral);
      });

      it('should have the property liquidVolume (base name: "LiquidVolume")', function() {
        // TODO: update the code to test the property liquidVolume
        expect(instance).to.have.property('liquidVolume');
        // expect(instance.liquidVolume).to.be(expectedValueLiteral);
      });

      it('should have the property isHazmat (base name: "IsHazmat")', function() {
        // TODO: update the code to test the property isHazmat
        expect(instance).to.have.property('isHazmat');
        // expect(instance.isHazmat).to.be(expectedValueLiteral);
      });

      it('should have the property dangerousGoodsDetails (base name: "DangerousGoodsDetails")', function() {
        // TODO: update the code to test the property dangerousGoodsDetails
        expect(instance).to.have.property('dangerousGoodsDetails');
        // expect(instance.dangerousGoodsDetails).to.be(expectedValueLiteral);
      });

    });
  });

}));
