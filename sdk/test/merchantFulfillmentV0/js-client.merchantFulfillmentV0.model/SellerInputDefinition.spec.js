/*
 * Selling Partner API for Merchant Fulfillment
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/merchantFulfillmentV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/merchantFulfillmentV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMerchantFulfillment);
  }
}(this, function(expect, SellingPartnerApiForMerchantFulfillment) {
  'use strict';

  var instance;

  describe('merchantFulfillmentV0', function() {
    describe('SellerInputDefinition', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForMerchantFulfillment.SellerInputDefinition();
      });

      it('should create an instance of SellerInputDefinition', function() {
        // TODO: update the code to test SellerInputDefinition
        expect(instance).to.be.a(SellingPartnerApiForMerchantFulfillment.SellerInputDefinition);
      });

      it('should have the property isRequired (base name: "IsRequired")', function() {
        // TODO: update the code to test the property isRequired
        expect(instance).to.have.property('isRequired');
        // expect(instance.isRequired).to.be(expectedValueLiteral);
      });

      it('should have the property dataType (base name: "DataType")', function() {
        // TODO: update the code to test the property dataType
        expect(instance).to.have.property('dataType');
        // expect(instance.dataType).to.be(expectedValueLiteral);
      });

      it('should have the property constraints (base name: "Constraints")', function() {
        // TODO: update the code to test the property constraints
        expect(instance).to.have.property('constraints');
        // expect(instance.constraints).to.be(expectedValueLiteral);
      });

      it('should have the property inputDisplayText (base name: "InputDisplayText")', function() {
        // TODO: update the code to test the property inputDisplayText
        expect(instance).to.have.property('inputDisplayText');
        // expect(instance.inputDisplayText).to.be(expectedValueLiteral);
      });

      it('should have the property inputTarget (base name: "InputTarget")', function() {
        // TODO: update the code to test the property inputTarget
        expect(instance).to.have.property('inputTarget');
        // expect(instance.inputTarget).to.be(expectedValueLiteral);
      });

      it('should have the property storedValue (base name: "StoredValue")', function() {
        // TODO: update the code to test the property storedValue
        expect(instance).to.have.property('storedValue');
        // expect(instance.storedValue).to.be(expectedValueLiteral);
      });

      it('should have the property restrictedSetValues (base name: "RestrictedSetValues")', function() {
        // TODO: update the code to test the property restrictedSetValues
        expect(instance).to.have.property('restrictedSetValues');
        // expect(instance.restrictedSetValues).to.be(expectedValueLiteral);
      });

    });
  });

}));
