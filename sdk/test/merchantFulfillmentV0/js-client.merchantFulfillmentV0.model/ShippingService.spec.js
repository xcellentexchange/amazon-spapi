/*
 * Selling Partner API for Merchant Fulfillment
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/merchantFulfillmentV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/merchantFulfillmentV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMerchantFulfillment);
  }
}(this, function(expect, SellingPartnerApiForMerchantFulfillment) {
  'use strict';

  var instance;

  describe('merchantFulfillmentV0', function() {
    describe('ShippingService', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      });

      it('should create an instance of ShippingService', function() {
        // TODO: update the code to test ShippingService
        expect(instance).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingService);
      });

      it('should have the property shippingServiceName (base name: "ShippingServiceName")', function() {
        // TODO: update the code to test the property shippingServiceName
        expect(instance).to.have.property('shippingServiceName');
        // expect(instance.shippingServiceName).to.be(expectedValueLiteral);
      });

      it('should have the property carrierName (base name: "CarrierName")', function() {
        // TODO: update the code to test the property carrierName
        expect(instance).to.have.property('carrierName');
        // expect(instance.carrierName).to.be(expectedValueLiteral);
      });

      it('should have the property shippingServiceId (base name: "ShippingServiceId")', function() {
        // TODO: update the code to test the property shippingServiceId
        expect(instance).to.have.property('shippingServiceId');
        // expect(instance.shippingServiceId).to.be(expectedValueLiteral);
      });

      it('should have the property shippingServiceOfferId (base name: "ShippingServiceOfferId")', function() {
        // TODO: update the code to test the property shippingServiceOfferId
        expect(instance).to.have.property('shippingServiceOfferId');
        // expect(instance.shippingServiceOfferId).to.be(expectedValueLiteral);
      });

      it('should have the property shipDate (base name: "ShipDate")', function() {
        // TODO: update the code to test the property shipDate
        expect(instance).to.have.property('shipDate');
        // expect(instance.shipDate).to.be(expectedValueLiteral);
      });

      it('should have the property earliestEstimatedDeliveryDate (base name: "EarliestEstimatedDeliveryDate")', function() {
        // TODO: update the code to test the property earliestEstimatedDeliveryDate
        expect(instance).to.have.property('earliestEstimatedDeliveryDate');
        // expect(instance.earliestEstimatedDeliveryDate).to.be(expectedValueLiteral);
      });

      it('should have the property latestEstimatedDeliveryDate (base name: "LatestEstimatedDeliveryDate")', function() {
        // TODO: update the code to test the property latestEstimatedDeliveryDate
        expect(instance).to.have.property('latestEstimatedDeliveryDate');
        // expect(instance.latestEstimatedDeliveryDate).to.be(expectedValueLiteral);
      });

      it('should have the property rate (base name: "Rate")', function() {
        // TODO: update the code to test the property rate
        expect(instance).to.have.property('rate');
        // expect(instance.rate).to.be(expectedValueLiteral);
      });

      it('should have the property shippingServiceOptions (base name: "ShippingServiceOptions")', function() {
        // TODO: update the code to test the property shippingServiceOptions
        expect(instance).to.have.property('shippingServiceOptions');
        // expect(instance.shippingServiceOptions).to.be(expectedValueLiteral);
      });

      it('should have the property availableShippingServiceOptions (base name: "AvailableShippingServiceOptions")', function() {
        // TODO: update the code to test the property availableShippingServiceOptions
        expect(instance).to.have.property('availableShippingServiceOptions');
        // expect(instance.availableShippingServiceOptions).to.be(expectedValueLiteral);
      });

      it('should have the property availableLabelFormats (base name: "AvailableLabelFormats")', function() {
        // TODO: update the code to test the property availableLabelFormats
        expect(instance).to.have.property('availableLabelFormats');
        // expect(instance.availableLabelFormats).to.be(expectedValueLiteral);
      });

      it('should have the property availableFormatOptionsForLabel (base name: "AvailableFormatOptionsForLabel")', function() {
        // TODO: update the code to test the property availableFormatOptionsForLabel
        expect(instance).to.have.property('availableFormatOptionsForLabel');
        // expect(instance.availableFormatOptionsForLabel).to.be(expectedValueLiteral);
      });

      it('should have the property requiresAdditionalSellerInputs (base name: "RequiresAdditionalSellerInputs")', function() {
        // TODO: update the code to test the property requiresAdditionalSellerInputs
        expect(instance).to.have.property('requiresAdditionalSellerInputs');
        // expect(instance.requiresAdditionalSellerInputs).to.be(expectedValueLiteral);
      });

      it('should have the property benefits (base name: "Benefits")', function() {
        // TODO: update the code to test the property benefits
        expect(instance).to.have.property('benefits');
        // expect(instance.benefits).to.be(expectedValueLiteral);
      });

    });
  });

}));
