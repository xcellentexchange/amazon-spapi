/*
 * Selling Partner API for Merchant Fulfillment
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/merchantFulfillmentV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/merchantFulfillmentV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMerchantFulfillment);
  }
}(this, function(expect, SellingPartnerApiForMerchantFulfillment) {
  'use strict';

  var instance;

  describe('merchantFulfillmentV0', function() {
    describe('AdditionalSellerInput', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForMerchantFulfillment.AdditionalSellerInput();
      });

      it('should create an instance of AdditionalSellerInput', function() {
        // TODO: update the code to test AdditionalSellerInput
        expect(instance).to.be.a(SellingPartnerApiForMerchantFulfillment.AdditionalSellerInput);
      });

      it('should have the property dataType (base name: "DataType")', function() {
        // TODO: update the code to test the property dataType
        expect(instance).to.have.property('dataType');
        // expect(instance.dataType).to.be(expectedValueLiteral);
      });

      it('should have the property valueAsString (base name: "ValueAsString")', function() {
        // TODO: update the code to test the property valueAsString
        expect(instance).to.have.property('valueAsString');
        // expect(instance.valueAsString).to.be(expectedValueLiteral);
      });

      it('should have the property valueAsBoolean (base name: "ValueAsBoolean")', function() {
        // TODO: update the code to test the property valueAsBoolean
        expect(instance).to.have.property('valueAsBoolean');
        // expect(instance.valueAsBoolean).to.be(expectedValueLiteral);
      });

      it('should have the property valueAsInteger (base name: "ValueAsInteger")', function() {
        // TODO: update the code to test the property valueAsInteger
        expect(instance).to.have.property('valueAsInteger');
        // expect(instance.valueAsInteger).to.be(expectedValueLiteral);
      });

      it('should have the property valueAsTimestamp (base name: "ValueAsTimestamp")', function() {
        // TODO: update the code to test the property valueAsTimestamp
        expect(instance).to.have.property('valueAsTimestamp');
        // expect(instance.valueAsTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property valueAsAddress (base name: "ValueAsAddress")', function() {
        // TODO: update the code to test the property valueAsAddress
        expect(instance).to.have.property('valueAsAddress');
        // expect(instance.valueAsAddress).to.be(expectedValueLiteral);
      });

      it('should have the property valueAsWeight (base name: "ValueAsWeight")', function() {
        // TODO: update the code to test the property valueAsWeight
        expect(instance).to.have.property('valueAsWeight');
        // expect(instance.valueAsWeight).to.be(expectedValueLiteral);
      });

      it('should have the property valueAsDimension (base name: "ValueAsDimension")', function() {
        // TODO: update the code to test the property valueAsDimension
        expect(instance).to.have.property('valueAsDimension');
        // expect(instance.valueAsDimension).to.be(expectedValueLiteral);
      });

      it('should have the property valueAsCurrency (base name: "ValueAsCurrency")', function() {
        // TODO: update the code to test the property valueAsCurrency
        expect(instance).to.have.property('valueAsCurrency');
        // expect(instance.valueAsCurrency).to.be(expectedValueLiteral);
      });

    });
  });

}));
