/*
 * Selling Partner API for Supply Sources
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/supplySources_2020-07-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/supplySources_2020-07-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForSupplySources);
  }
}(this, function(expect, SellingPartnerApiForSupplySources) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForSupplySources.SupplySourcesApi();
  });

  describe('supplySources_2020-07-01', function() {
    describe('SupplySourcesApi', function() {
      describe('archiveSupplySource', function() {
        it('should call archiveSupplySource successfully', function(done) {
          // TODO: uncomment, update parameter values for archiveSupplySource call and complete the assertions
          /*
          var supplySourceId = "supplySourceId_example";

          instance.archiveSupplySource(supplySourceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForSupplySources.ErrorList);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForSupplySources.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
                expect(data.details).to.be.a('string');
                // expect(data.details).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createSupplySource', function() {
        it('should call createSupplySource successfully', function(done) {
          // TODO: uncomment, update parameter values for createSupplySource call and complete the assertions
          /*
          var payload = new SellingPartnerApiForSupplySources.CreateSupplySourceRequest();
          payload.supplySourceCode = new SellingPartnerApiForSupplySources.SupplySourceCode();
          payload.alias = new SellingPartnerApiForSupplySources.SupplySourceAlias();
          payload.address = new SellingPartnerApiForSupplySources.Address();
          payload.address.name = "";
          payload.address.addressLine1 = "";
          payload.address.addressLine2 = "";
          payload.address.addressLine3 = "";
          payload.address.city = "";
          payload.address.county = "";
          payload.address.district = "";
          payload.address.stateOrRegion = "";
          payload.address.postalCode = "";
          payload.address.countryCode = "";
          payload.address.phone = "";

          instance.createSupplySource(payload).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForSupplySources.CreateSupplySourceResponse);
            expect(data.supplySourceId).to.be.a(SellingPartnerApiForSupplySources.SupplySourceId);
                expect(data.supplySourceCode).to.be.a(SellingPartnerApiForSupplySources.SupplySourceCode);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSupplySource', function() {
        it('should call getSupplySource successfully', function(done) {
          // TODO: uncomment, update parameter values for getSupplySource call and complete the assertions
          /*
          var supplySourceId = "supplySourceId_example";

          instance.getSupplySource(supplySourceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForSupplySources.SupplySource);
            expect(data.supplySourceId).to.be.a(SellingPartnerApiForSupplySources.SupplySourceId);
                expect(data.supplySourceCode).to.be.a(SellingPartnerApiForSupplySources.SupplySourceCode);
                expect(data.alias).to.be.a(SellingPartnerApiForSupplySources.SupplySourceAlias);
                expect(data.status).to.be.a(SellingPartnerApiForSupplySources.SupplySourceStatusReadOnly);
                expect(data.address).to.be.a(SellingPartnerApiForSupplySources.Address);
                  expect(data.address.name).to.be.a('string');
              // expect(data.address.name).to.be("");
              expect(data.address.addressLine1).to.be.a('string');
              // expect(data.address.addressLine1).to.be("");
              expect(data.address.addressLine2).to.be.a('string');
              // expect(data.address.addressLine2).to.be("");
              expect(data.address.addressLine3).to.be.a('string');
              // expect(data.address.addressLine3).to.be("");
              expect(data.address.city).to.be.a('string');
              // expect(data.address.city).to.be("");
              expect(data.address.county).to.be.a('string');
              // expect(data.address.county).to.be("");
              expect(data.address.district).to.be.a('string');
              // expect(data.address.district).to.be("");
              expect(data.address.stateOrRegion).to.be.a('string');
              // expect(data.address.stateOrRegion).to.be("");
              expect(data.address.postalCode).to.be.a('string');
              // expect(data.address.postalCode).to.be("");
              expect(data.address.countryCode).to.be.a('string');
              // expect(data.address.countryCode).to.be("");
              expect(data.address.phone).to.be.a('string');
              // expect(data.address.phone).to.be("");
            expect(data.configuration).to.be.a(SellingPartnerApiForSupplySources.SupplySourceConfiguration);
                  expect(data.configuration.operationalConfiguration).to.be.a(SellingPartnerApiForSupplySources.OperationalConfiguration);
                    expect(data.configuration.operationalConfiguration.contactDetails).to.be.a(SellingPartnerApiForSupplySources.ContactDetails);
                      expect(data.configuration.operationalConfiguration.contactDetails.primary).to.be.a(SellingPartnerApiForSupplySources.ContactDetailsPrimary);
                        expect(data.configuration.operationalConfiguration.contactDetails.primary.email).to.be.a(SellingPartnerApiForSupplySources.EmailAddress);
                        expect(data.configuration.operationalConfiguration.contactDetails.primary.phone).to.be.a('string');
                    // expect(data.configuration.operationalConfiguration.contactDetails.primary.phone).to.be("");
                expect(data.configuration.operationalConfiguration.throughputConfig).to.be.a(SellingPartnerApiForSupplySources.ThroughputConfig);
                      expect(data.configuration.operationalConfiguration.throughputConfig.throughputCap).to.be.a(SellingPartnerApiForSupplySources.ThroughputCap);
                        expect(data.configuration.operationalConfiguration.throughputConfig.throughputCap.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                        expect(data.configuration.operationalConfiguration.throughputConfig.throughputCap.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
            
                  expect(data.configuration.operationalConfiguration.throughputConfig.throughputUnit).to.be.a(SellingPartnerApiForSupplySources.ThroughputUnit);
          
                expect(data.configuration.operationalConfiguration.operatingHoursByDay).to.be.a(SellingPartnerApiForSupplySources.OperatingHoursByDay);
                      expect(data.configuration.operationalConfiguration.operatingHoursByDay.monday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                      expect(data.configuration.operationalConfiguration.operatingHoursByDay.tuesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                      expect(data.configuration.operationalConfiguration.operatingHoursByDay.wednesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                      expect(data.configuration.operationalConfiguration.operatingHoursByDay.thursday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                      expect(data.configuration.operationalConfiguration.operatingHoursByDay.friday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                      expect(data.configuration.operationalConfiguration.operatingHoursByDay.saturday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                      expect(data.configuration.operationalConfiguration.operatingHoursByDay.sunday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
          
                expect(data.configuration.operationalConfiguration.handlingTime).to.be.a(SellingPartnerApiForSupplySources.Duration);
                      expect(data.configuration.operationalConfiguration.handlingTime.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                      expect(data.configuration.operationalConfiguration.handlingTime.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
          
              expect(data.configuration.timezone).to.be.a('string');
              // expect(data.configuration.timezone).to.be("");
            expect(data.capabilities).to.be.a(SellingPartnerApiForSupplySources.SupplySourceCapabilities);
                  expect(data.capabilities.outbound).to.be.a(SellingPartnerApiForSupplySources.OutboundCapability);
                    expect(data.capabilities.outbound.isSupported).to.be.a('boolean');
                // expect(data.capabilities.outbound.isSupported).to.be(false);
                expect(data.capabilities.outbound.operationalConfiguration).to.be.a(SellingPartnerApiForSupplySources.OperationalConfiguration);
                      expect(data.capabilities.outbound.operationalConfiguration.contactDetails).to.be.a(SellingPartnerApiForSupplySources.ContactDetails);
                        expect(data.capabilities.outbound.operationalConfiguration.contactDetails.primary).to.be.a(SellingPartnerApiForSupplySources.ContactDetailsPrimary);
                          expect(data.capabilities.outbound.operationalConfiguration.contactDetails.primary.email).to.be.a(SellingPartnerApiForSupplySources.EmailAddress);
                          expect(data.capabilities.outbound.operationalConfiguration.contactDetails.primary.phone).to.be.a('string');
                      // expect(data.capabilities.outbound.operationalConfiguration.contactDetails.primary.phone).to.be("");
                  expect(data.capabilities.outbound.operationalConfiguration.throughputConfig).to.be.a(SellingPartnerApiForSupplySources.ThroughputConfig);
                        expect(data.capabilities.outbound.operationalConfiguration.throughputConfig.throughputCap).to.be.a(SellingPartnerApiForSupplySources.ThroughputCap);
                          expect(data.capabilities.outbound.operationalConfiguration.throughputConfig.throughputCap.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                          expect(data.capabilities.outbound.operationalConfiguration.throughputConfig.throughputCap.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
              
                    expect(data.capabilities.outbound.operationalConfiguration.throughputConfig.throughputUnit).to.be.a(SellingPartnerApiForSupplySources.ThroughputUnit);
            
                  expect(data.capabilities.outbound.operationalConfiguration.operatingHoursByDay).to.be.a(SellingPartnerApiForSupplySources.OperatingHoursByDay);
                        expect(data.capabilities.outbound.operationalConfiguration.operatingHoursByDay.monday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.outbound.operationalConfiguration.operatingHoursByDay.tuesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.outbound.operationalConfiguration.operatingHoursByDay.wednesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.outbound.operationalConfiguration.operatingHoursByDay.thursday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.outbound.operationalConfiguration.operatingHoursByDay.friday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.outbound.operationalConfiguration.operatingHoursByDay.saturday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.outbound.operationalConfiguration.operatingHoursByDay.sunday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
            
                  expect(data.capabilities.outbound.operationalConfiguration.handlingTime).to.be.a(SellingPartnerApiForSupplySources.Duration);
                        expect(data.capabilities.outbound.operationalConfiguration.handlingTime.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                        expect(data.capabilities.outbound.operationalConfiguration.handlingTime.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
            
                expect(data.capabilities.outbound.returnLocation).to.be.a(SellingPartnerApiForSupplySources.ReturnLocation);
                      expect(data.capabilities.outbound.returnLocation.supplySourceId).to.be.a('string');
                  // expect(data.capabilities.outbound.returnLocation.supplySourceId).to.be("");
                  expect(data.capabilities.outbound.returnLocation.addressWithContact).to.be.a(SellingPartnerApiForSupplySources.AddressWithContact);
                        expect(data.capabilities.outbound.returnLocation.addressWithContact.contactDetails).to.be.a(SellingPartnerApiForSupplySources.ContactDetails);
                          expect(data.capabilities.outbound.returnLocation.addressWithContact.contactDetails.primary).to.be.a(SellingPartnerApiForSupplySources.ContactDetailsPrimary);
                            expect(data.capabilities.outbound.returnLocation.addressWithContact.contactDetails.primary.email).to.be.a(SellingPartnerApiForSupplySources.EmailAddress);
                            expect(data.capabilities.outbound.returnLocation.addressWithContact.contactDetails.primary.phone).to.be.a('string');
                        // expect(data.capabilities.outbound.returnLocation.addressWithContact.contactDetails.primary.phone).to.be("");
                    expect(data.capabilities.outbound.returnLocation.addressWithContact.address).to.be.a(SellingPartnerApiForSupplySources.Address);
                          expect(data.capabilities.outbound.returnLocation.addressWithContact.address.name).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.name).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.addressLine1).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.addressLine1).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.addressLine2).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.addressLine2).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.addressLine3).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.addressLine3).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.city).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.city).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.county).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.county).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.district).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.district).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.stateOrRegion).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.stateOrRegion).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.postalCode).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.postalCode).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.countryCode).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.countryCode).to.be("");
                      expect(data.capabilities.outbound.returnLocation.addressWithContact.address.phone).to.be.a('string');
                      // expect(data.capabilities.outbound.returnLocation.addressWithContact.address.phone).to.be("");
                expect(data.capabilities.outbound.deliveryChannel).to.be.a(SellingPartnerApiForSupplySources.DeliveryChannel);
                      expect(data.capabilities.outbound.deliveryChannel.isSupported).to.be.a('boolean');
                  // expect(data.capabilities.outbound.deliveryChannel.isSupported).to.be(false);
                  expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration).to.be.a(SellingPartnerApiForSupplySources.OperationalConfiguration);
                        expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.contactDetails).to.be.a(SellingPartnerApiForSupplySources.ContactDetails);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.contactDetails.primary).to.be.a(SellingPartnerApiForSupplySources.ContactDetailsPrimary);
                            expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.contactDetails.primary.email).to.be.a(SellingPartnerApiForSupplySources.EmailAddress);
                            expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.contactDetails.primary.phone).to.be.a('string');
                        // expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.contactDetails.primary.phone).to.be("");
                    expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig).to.be.a(SellingPartnerApiForSupplySources.ThroughputConfig);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig.throughputCap).to.be.a(SellingPartnerApiForSupplySources.ThroughputCap);
                            expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig.throughputCap.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                            expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig.throughputCap.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
                
                      expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig.throughputUnit).to.be.a(SellingPartnerApiForSupplySources.ThroughputUnit);
              
                    expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay).to.be.a(SellingPartnerApiForSupplySources.OperatingHoursByDay);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.monday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.tuesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.wednesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.thursday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.friday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.saturday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.sunday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
              
                    expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.handlingTime).to.be.a(SellingPartnerApiForSupplySources.Duration);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.handlingTime.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                          expect(data.capabilities.outbound.deliveryChannel.operationalConfiguration.handlingTime.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
              
                expect(data.capabilities.outbound.pickupChannel).to.be.a(SellingPartnerApiForSupplySources.PickupChannel);
                      expect(data.capabilities.outbound.pickupChannel.inventoryHoldPeriod).to.be.a(SellingPartnerApiForSupplySources.Duration);
                        expect(data.capabilities.outbound.pickupChannel.inventoryHoldPeriod.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                        expect(data.capabilities.outbound.pickupChannel.inventoryHoldPeriod.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
            
                  expect(data.capabilities.outbound.pickupChannel.isSupported).to.be.a('boolean');
                  // expect(data.capabilities.outbound.pickupChannel.isSupported).to.be(false);
                  expect(data.capabilities.outbound.pickupChannel.operationalConfiguration).to.be.a(SellingPartnerApiForSupplySources.OperationalConfiguration);
                        expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.contactDetails).to.be.a(SellingPartnerApiForSupplySources.ContactDetails);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.contactDetails.primary).to.be.a(SellingPartnerApiForSupplySources.ContactDetailsPrimary);
                            expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.contactDetails.primary.email).to.be.a(SellingPartnerApiForSupplySources.EmailAddress);
                            expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.contactDetails.primary.phone).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.contactDetails.primary.phone).to.be("");
                    expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig).to.be.a(SellingPartnerApiForSupplySources.ThroughputConfig);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig.throughputCap).to.be.a(SellingPartnerApiForSupplySources.ThroughputCap);
                            expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig.throughputCap.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                            expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig.throughputCap.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
                
                      expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig.throughputUnit).to.be.a(SellingPartnerApiForSupplySources.ThroughputUnit);
              
                    expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay).to.be.a(SellingPartnerApiForSupplySources.OperatingHoursByDay);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.monday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.tuesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.wednesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.thursday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.friday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.saturday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.sunday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
              
                    expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.handlingTime).to.be.a(SellingPartnerApiForSupplySources.Duration);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.handlingTime.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                          expect(data.capabilities.outbound.pickupChannel.operationalConfiguration.handlingTime.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
              
                  expect(data.capabilities.outbound.pickupChannel.inStorePickupConfiguration).to.be.a(SellingPartnerApiForSupplySources.InStorePickupConfiguration);
                        expect(data.capabilities.outbound.pickupChannel.inStorePickupConfiguration.isSupported).to.be.a('boolean');
                    // expect(data.capabilities.outbound.pickupChannel.inStorePickupConfiguration.isSupported).to.be(false);
                    expect(data.capabilities.outbound.pickupChannel.inStorePickupConfiguration.parkingConfiguration).to.be.a(SellingPartnerApiForSupplySources.ParkingConfiguration);
                          expect(data.capabilities.outbound.pickupChannel.inStorePickupConfiguration.parkingConfiguration.parkingCostType).to.be.a(SellingPartnerApiForSupplySources.ParkingCostType);
                          expect(data.capabilities.outbound.pickupChannel.inStorePickupConfiguration.parkingConfiguration.parkingSpotIdentificationType).to.be.a(SellingPartnerApiForSupplySources.ParkingSpotIdentificationType);
                          expect(data.capabilities.outbound.pickupChannel.inStorePickupConfiguration.parkingConfiguration.numberOfParkingSpots).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
              
                  expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration).to.be.a(SellingPartnerApiForSupplySources.CurbsidePickupConfiguration);
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.isSupported).to.be.a('boolean');
                    // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.isSupported).to.be(false);
                    expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration).to.be.a(SellingPartnerApiForSupplySources.OperationalConfiguration);
                          expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.contactDetails).to.be.a(SellingPartnerApiForSupplySources.ContactDetails);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.contactDetails.primary).to.be.a(SellingPartnerApiForSupplySources.ContactDetailsPrimary);
                              expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.contactDetails.primary.email).to.be.a(SellingPartnerApiForSupplySources.EmailAddress);
                              expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.contactDetails.primary.phone).to.be.a('string');
                          // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.contactDetails.primary.phone).to.be("");
                      expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig).to.be.a(SellingPartnerApiForSupplySources.ThroughputConfig);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig.throughputCap).to.be.a(SellingPartnerApiForSupplySources.ThroughputCap);
                              expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig.throughputCap.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                              expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig.throughputCap.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
                  
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig.throughputUnit).to.be.a(SellingPartnerApiForSupplySources.ThroughputUnit);
                
                      expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay).to.be.a(SellingPartnerApiForSupplySources.OperatingHoursByDay);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.monday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.tuesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.wednesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.thursday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.friday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.saturday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.sunday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                
                      expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.handlingTime).to.be.a(SellingPartnerApiForSupplySources.Duration);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.handlingTime.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.handlingTime.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
                
                    expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration).to.be.a(SellingPartnerApiForSupplySources.ParkingWithAddressConfiguration);
                          expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.parkingCostType).to.be.a(SellingPartnerApiForSupplySources.ParkingCostType);
                          expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.parkingSpotIdentificationType).to.be.a(SellingPartnerApiForSupplySources.ParkingSpotIdentificationType);
                          expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.numberOfParkingSpots).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                          expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address).to.be.a(SellingPartnerApiForSupplySources.Address);
                            expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.name).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.name).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.addressLine1).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.addressLine1).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.addressLine2).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.addressLine2).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.addressLine3).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.addressLine3).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.city).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.city).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.county).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.county).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.district).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.district).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.stateOrRegion).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.stateOrRegion).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.postalCode).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.postalCode).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.countryCode).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.countryCode).to.be("");
                        expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.phone).to.be.a('string');
                        // expect(data.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.phone).to.be("");
              expect(data.capabilities.services).to.be.a(SellingPartnerApiForSupplySources.ServicesCapability);
                    expect(data.capabilities.services.isSupported).to.be.a('boolean');
                // expect(data.capabilities.services.isSupported).to.be(false);
                expect(data.capabilities.services.operationalConfiguration).to.be.a(SellingPartnerApiForSupplySources.OperationalConfiguration);
                      expect(data.capabilities.services.operationalConfiguration.contactDetails).to.be.a(SellingPartnerApiForSupplySources.ContactDetails);
                        expect(data.capabilities.services.operationalConfiguration.contactDetails.primary).to.be.a(SellingPartnerApiForSupplySources.ContactDetailsPrimary);
                          expect(data.capabilities.services.operationalConfiguration.contactDetails.primary.email).to.be.a(SellingPartnerApiForSupplySources.EmailAddress);
                          expect(data.capabilities.services.operationalConfiguration.contactDetails.primary.phone).to.be.a('string');
                      // expect(data.capabilities.services.operationalConfiguration.contactDetails.primary.phone).to.be("");
                  expect(data.capabilities.services.operationalConfiguration.throughputConfig).to.be.a(SellingPartnerApiForSupplySources.ThroughputConfig);
                        expect(data.capabilities.services.operationalConfiguration.throughputConfig.throughputCap).to.be.a(SellingPartnerApiForSupplySources.ThroughputCap);
                          expect(data.capabilities.services.operationalConfiguration.throughputConfig.throughputCap.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                          expect(data.capabilities.services.operationalConfiguration.throughputConfig.throughputCap.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
              
                    expect(data.capabilities.services.operationalConfiguration.throughputConfig.throughputUnit).to.be.a(SellingPartnerApiForSupplySources.ThroughputUnit);
            
                  expect(data.capabilities.services.operationalConfiguration.operatingHoursByDay).to.be.a(SellingPartnerApiForSupplySources.OperatingHoursByDay);
                        expect(data.capabilities.services.operationalConfiguration.operatingHoursByDay.monday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.services.operationalConfiguration.operatingHoursByDay.tuesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.services.operationalConfiguration.operatingHoursByDay.wednesday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.services.operationalConfiguration.operatingHoursByDay.thursday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.services.operationalConfiguration.operatingHoursByDay.friday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.services.operationalConfiguration.operatingHoursByDay.saturday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
                        expect(data.capabilities.services.operationalConfiguration.operatingHoursByDay.sunday).to.be.a(SellingPartnerApiForSupplySources.OperatingHours);
            
                  expect(data.capabilities.services.operationalConfiguration.handlingTime).to.be.a(SellingPartnerApiForSupplySources.Duration);
                        expect(data.capabilities.services.operationalConfiguration.handlingTime.value).to.be.a(SellingPartnerApiForSupplySources.NonNegativeInteger);
                        expect(data.capabilities.services.operationalConfiguration.handlingTime.timeUnit).to.be.a(SellingPartnerApiForSupplySources.TimeUnit);
            
            expect(data.createdAt).to.be.a(Date);
            // expect(data.createdAt).to.be();
            expect(data.updatedAt).to.be.a(Date);
            // expect(data.updatedAt).to.be();

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSupplySources', function() {
        it('should call getSupplySources successfully', function(done) {
          // TODO: uncomment, update parameter values for getSupplySources call and complete the assertions
          /*
          var opts = {};
          opts.nextPageToken = "nextPageToken_example";
          opts.pageSize = 10;

          instance.getSupplySources(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForSupplySources.GetSupplySourcesResponse);
            expect(data.supplySources).to.be.a(SellingPartnerApiForSupplySources.SupplySourceList);
                expect(data.nextPageToken).to.be.a('string');
            // expect(data.nextPageToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSupplySource', function() {
        it('should call updateSupplySource successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSupplySource call and complete the assertions
          /*
          var supplySourceId = "supplySourceId_example";
          var opts = {};
          opts.payload = new SellingPartnerApiForSupplySources.UpdateSupplySourceRequest();
          opts.payload.alias = new SellingPartnerApiForSupplySources.SupplySourceAlias();
          opts.payload.configuration = new SellingPartnerApiForSupplySources.SupplySourceConfiguration();
          opts.payload.configuration.operationalConfiguration = new SellingPartnerApiForSupplySources.OperationalConfiguration();
          opts.payload.configuration.operationalConfiguration.contactDetails = new SellingPartnerApiForSupplySources.ContactDetails();
          opts.payload.configuration.operationalConfiguration.contactDetails.primary = new SellingPartnerApiForSupplySources.ContactDetailsPrimary();
          opts.payload.configuration.operationalConfiguration.contactDetails.primary.email = new SellingPartnerApiForSupplySources.EmailAddress();
          opts.payload.configuration.operationalConfiguration.contactDetails.primary.phone = "";
          opts.payload.configuration.operationalConfiguration.throughputConfig = new SellingPartnerApiForSupplySources.ThroughputConfig();
          opts.payload.configuration.operationalConfiguration.throughputConfig.throughputCap = new SellingPartnerApiForSupplySources.ThroughputCap();
          opts.payload.configuration.operationalConfiguration.throughputConfig.throughputCap.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.configuration.operationalConfiguration.throughputConfig.throughputCap.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.configuration.operationalConfiguration.throughputConfig.throughputUnit = new SellingPartnerApiForSupplySources.ThroughputUnit();
          opts.payload.configuration.operationalConfiguration.operatingHoursByDay = new SellingPartnerApiForSupplySources.OperatingHoursByDay();
          opts.payload.configuration.operationalConfiguration.operatingHoursByDay.monday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.configuration.operationalConfiguration.operatingHoursByDay.tuesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.configuration.operationalConfiguration.operatingHoursByDay.wednesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.configuration.operationalConfiguration.operatingHoursByDay.thursday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.configuration.operationalConfiguration.operatingHoursByDay.friday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.configuration.operationalConfiguration.operatingHoursByDay.saturday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.configuration.operationalConfiguration.operatingHoursByDay.sunday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.configuration.operationalConfiguration.handlingTime = new SellingPartnerApiForSupplySources.Duration();
          opts.payload.configuration.operationalConfiguration.handlingTime.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.configuration.operationalConfiguration.handlingTime.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.configuration.timezone = "";
          opts.payload.capabilities = new SellingPartnerApiForSupplySources.SupplySourceCapabilities();
          opts.payload.capabilities.outbound = new SellingPartnerApiForSupplySources.OutboundCapability();
          opts.payload.capabilities.outbound.isSupported = false;
          opts.payload.capabilities.outbound.operationalConfiguration = new SellingPartnerApiForSupplySources.OperationalConfiguration();
          opts.payload.capabilities.outbound.operationalConfiguration.contactDetails = new SellingPartnerApiForSupplySources.ContactDetails();
          opts.payload.capabilities.outbound.operationalConfiguration.contactDetails.primary = new SellingPartnerApiForSupplySources.ContactDetailsPrimary();
          opts.payload.capabilities.outbound.operationalConfiguration.contactDetails.primary.email = new SellingPartnerApiForSupplySources.EmailAddress();
          opts.payload.capabilities.outbound.operationalConfiguration.contactDetails.primary.phone = "";
          opts.payload.capabilities.outbound.operationalConfiguration.throughputConfig = new SellingPartnerApiForSupplySources.ThroughputConfig();
          opts.payload.capabilities.outbound.operationalConfiguration.throughputConfig.throughputCap = new SellingPartnerApiForSupplySources.ThroughputCap();
          opts.payload.capabilities.outbound.operationalConfiguration.throughputConfig.throughputCap.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.operationalConfiguration.throughputConfig.throughputCap.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.outbound.operationalConfiguration.throughputConfig.throughputUnit = new SellingPartnerApiForSupplySources.ThroughputUnit();
          opts.payload.capabilities.outbound.operationalConfiguration.operatingHoursByDay = new SellingPartnerApiForSupplySources.OperatingHoursByDay();
          opts.payload.capabilities.outbound.operationalConfiguration.operatingHoursByDay.monday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.operationalConfiguration.operatingHoursByDay.tuesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.operationalConfiguration.operatingHoursByDay.wednesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.operationalConfiguration.operatingHoursByDay.thursday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.operationalConfiguration.operatingHoursByDay.friday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.operationalConfiguration.operatingHoursByDay.saturday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.operationalConfiguration.operatingHoursByDay.sunday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.operationalConfiguration.handlingTime = new SellingPartnerApiForSupplySources.Duration();
          opts.payload.capabilities.outbound.operationalConfiguration.handlingTime.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.operationalConfiguration.handlingTime.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.outbound.returnLocation = new SellingPartnerApiForSupplySources.ReturnLocation();
          opts.payload.capabilities.outbound.returnLocation.supplySourceId = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact = new SellingPartnerApiForSupplySources.AddressWithContact();
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.contactDetails = new SellingPartnerApiForSupplySources.ContactDetails();
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.contactDetails.primary = new SellingPartnerApiForSupplySources.ContactDetailsPrimary();
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.contactDetails.primary.email = new SellingPartnerApiForSupplySources.EmailAddress();
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.contactDetails.primary.phone = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address = new SellingPartnerApiForSupplySources.Address();
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.name = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.addressLine1 = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.addressLine2 = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.addressLine3 = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.city = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.county = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.district = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.stateOrRegion = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.postalCode = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.countryCode = "";
          opts.payload.capabilities.outbound.returnLocation.addressWithContact.address.phone = "";
          opts.payload.capabilities.outbound.deliveryChannel = new SellingPartnerApiForSupplySources.DeliveryChannel();
          opts.payload.capabilities.outbound.deliveryChannel.isSupported = false;
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration = new SellingPartnerApiForSupplySources.OperationalConfiguration();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.contactDetails = new SellingPartnerApiForSupplySources.ContactDetails();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.contactDetails.primary = new SellingPartnerApiForSupplySources.ContactDetailsPrimary();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.contactDetails.primary.email = new SellingPartnerApiForSupplySources.EmailAddress();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.contactDetails.primary.phone = "";
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig = new SellingPartnerApiForSupplySources.ThroughputConfig();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig.throughputCap = new SellingPartnerApiForSupplySources.ThroughputCap();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig.throughputCap.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig.throughputCap.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.throughputConfig.throughputUnit = new SellingPartnerApiForSupplySources.ThroughputUnit();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay = new SellingPartnerApiForSupplySources.OperatingHoursByDay();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.monday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.tuesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.wednesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.thursday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.friday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.saturday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.operatingHoursByDay.sunday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.handlingTime = new SellingPartnerApiForSupplySources.Duration();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.handlingTime.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.deliveryChannel.operationalConfiguration.handlingTime.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.outbound.pickupChannel = new SellingPartnerApiForSupplySources.PickupChannel();
          opts.payload.capabilities.outbound.pickupChannel.inventoryHoldPeriod = new SellingPartnerApiForSupplySources.Duration();
          opts.payload.capabilities.outbound.pickupChannel.inventoryHoldPeriod.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.pickupChannel.inventoryHoldPeriod.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.outbound.pickupChannel.isSupported = false;
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration = new SellingPartnerApiForSupplySources.OperationalConfiguration();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.contactDetails = new SellingPartnerApiForSupplySources.ContactDetails();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.contactDetails.primary = new SellingPartnerApiForSupplySources.ContactDetailsPrimary();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.contactDetails.primary.email = new SellingPartnerApiForSupplySources.EmailAddress();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.contactDetails.primary.phone = "";
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig = new SellingPartnerApiForSupplySources.ThroughputConfig();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig.throughputCap = new SellingPartnerApiForSupplySources.ThroughputCap();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig.throughputCap.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig.throughputCap.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.throughputConfig.throughputUnit = new SellingPartnerApiForSupplySources.ThroughputUnit();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay = new SellingPartnerApiForSupplySources.OperatingHoursByDay();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.monday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.tuesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.wednesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.thursday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.friday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.saturday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.operatingHoursByDay.sunday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.handlingTime = new SellingPartnerApiForSupplySources.Duration();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.handlingTime.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.pickupChannel.operationalConfiguration.handlingTime.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.outbound.pickupChannel.inStorePickupConfiguration = new SellingPartnerApiForSupplySources.InStorePickupConfiguration();
          opts.payload.capabilities.outbound.pickupChannel.inStorePickupConfiguration.isSupported = false;
          opts.payload.capabilities.outbound.pickupChannel.inStorePickupConfiguration.parkingConfiguration = new SellingPartnerApiForSupplySources.ParkingConfiguration();
          opts.payload.capabilities.outbound.pickupChannel.inStorePickupConfiguration.parkingConfiguration.parkingCostType = new SellingPartnerApiForSupplySources.ParkingCostType();
          opts.payload.capabilities.outbound.pickupChannel.inStorePickupConfiguration.parkingConfiguration.parkingSpotIdentificationType = new SellingPartnerApiForSupplySources.ParkingSpotIdentificationType();
          opts.payload.capabilities.outbound.pickupChannel.inStorePickupConfiguration.parkingConfiguration.numberOfParkingSpots = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration = new SellingPartnerApiForSupplySources.CurbsidePickupConfiguration();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.isSupported = false;
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration = new SellingPartnerApiForSupplySources.OperationalConfiguration();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.contactDetails = new SellingPartnerApiForSupplySources.ContactDetails();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.contactDetails.primary = new SellingPartnerApiForSupplySources.ContactDetailsPrimary();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.contactDetails.primary.email = new SellingPartnerApiForSupplySources.EmailAddress();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.contactDetails.primary.phone = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig = new SellingPartnerApiForSupplySources.ThroughputConfig();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig.throughputCap = new SellingPartnerApiForSupplySources.ThroughputCap();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig.throughputCap.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig.throughputCap.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.throughputConfig.throughputUnit = new SellingPartnerApiForSupplySources.ThroughputUnit();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay = new SellingPartnerApiForSupplySources.OperatingHoursByDay();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.monday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.tuesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.wednesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.thursday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.friday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.saturday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.operatingHoursByDay.sunday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.handlingTime = new SellingPartnerApiForSupplySources.Duration();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.handlingTime.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.operationalConfiguration.handlingTime.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration = new SellingPartnerApiForSupplySources.ParkingWithAddressConfiguration();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.parkingCostType = new SellingPartnerApiForSupplySources.ParkingCostType();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.parkingSpotIdentificationType = new SellingPartnerApiForSupplySources.ParkingSpotIdentificationType();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.numberOfParkingSpots = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address = new SellingPartnerApiForSupplySources.Address();
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.name = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.addressLine1 = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.addressLine2 = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.addressLine3 = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.city = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.county = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.district = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.stateOrRegion = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.postalCode = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.countryCode = "";
          opts.payload.capabilities.outbound.pickupChannel.curbsidePickupConfiguration.parkingWithAddressConfiguration.address.phone = "";
          opts.payload.capabilities.services = new SellingPartnerApiForSupplySources.ServicesCapability();
          opts.payload.capabilities.services.isSupported = false;
          opts.payload.capabilities.services.operationalConfiguration = new SellingPartnerApiForSupplySources.OperationalConfiguration();
          opts.payload.capabilities.services.operationalConfiguration.contactDetails = new SellingPartnerApiForSupplySources.ContactDetails();
          opts.payload.capabilities.services.operationalConfiguration.contactDetails.primary = new SellingPartnerApiForSupplySources.ContactDetailsPrimary();
          opts.payload.capabilities.services.operationalConfiguration.contactDetails.primary.email = new SellingPartnerApiForSupplySources.EmailAddress();
          opts.payload.capabilities.services.operationalConfiguration.contactDetails.primary.phone = "";
          opts.payload.capabilities.services.operationalConfiguration.throughputConfig = new SellingPartnerApiForSupplySources.ThroughputConfig();
          opts.payload.capabilities.services.operationalConfiguration.throughputConfig.throughputCap = new SellingPartnerApiForSupplySources.ThroughputCap();
          opts.payload.capabilities.services.operationalConfiguration.throughputConfig.throughputCap.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.services.operationalConfiguration.throughputConfig.throughputCap.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();
          opts.payload.capabilities.services.operationalConfiguration.throughputConfig.throughputUnit = new SellingPartnerApiForSupplySources.ThroughputUnit();
          opts.payload.capabilities.services.operationalConfiguration.operatingHoursByDay = new SellingPartnerApiForSupplySources.OperatingHoursByDay();
          opts.payload.capabilities.services.operationalConfiguration.operatingHoursByDay.monday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.services.operationalConfiguration.operatingHoursByDay.tuesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.services.operationalConfiguration.operatingHoursByDay.wednesday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.services.operationalConfiguration.operatingHoursByDay.thursday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.services.operationalConfiguration.operatingHoursByDay.friday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.services.operationalConfiguration.operatingHoursByDay.saturday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.services.operationalConfiguration.operatingHoursByDay.sunday = new SellingPartnerApiForSupplySources.OperatingHours();
          opts.payload.capabilities.services.operationalConfiguration.handlingTime = new SellingPartnerApiForSupplySources.Duration();
          opts.payload.capabilities.services.operationalConfiguration.handlingTime.value = new SellingPartnerApiForSupplySources.NonNegativeInteger();
          opts.payload.capabilities.services.operationalConfiguration.handlingTime.timeUnit = new SellingPartnerApiForSupplySources.TimeUnit();

          instance.updateSupplySource(supplySourceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForSupplySources.ErrorList);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForSupplySources.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
                expect(data.details).to.be.a('string');
                // expect(data.details).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSupplySourceStatus', function() {
        it('should call updateSupplySourceStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSupplySourceStatus call and complete the assertions
          /*
          var supplySourceId = "supplySourceId_example";
          var opts = {};
          opts.payload = new SellingPartnerApiForSupplySources.UpdateSupplySourceStatusRequest();
          opts.payload.status = new SellingPartnerApiForSupplySources.SupplySourceStatus();

          instance.updateSupplySourceStatus(supplySourceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForSupplySources.ErrorList);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForSupplySources.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
                expect(data.details).to.be.a('string');
                // expect(data.details).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
