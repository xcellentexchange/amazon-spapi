/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/productPricing_2022-05-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/productPricing_2022-05-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForPricing);
  }
}(this, function(expect, SellingPartnerApiForPricing) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForPricing.ProductPricingApi();
  });

  describe('productPricing_2022-05-01', function() {
    describe('ProductPricingApi', function() {
      describe('getCompetitiveSummary', function() {
        it('should call getCompetitiveSummary successfully', function(done) {
          // TODO: uncomment, update parameter values for getCompetitiveSummary call and complete the assertions
          /*
          var requests = new SellingPartnerApiForPricing.CompetitiveSummaryBatchRequest();
          requests.requests = new SellingPartnerApiForPricing.CompetitiveSummaryRequestList();

          instance.getCompetitiveSummary(requests).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForPricing.CompetitiveSummaryBatchResponse);
            expect(data.responses).to.be.a(SellingPartnerApiForPricing.CompetitiveSummaryResponseList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeaturedOfferExpectedPriceBatch', function() {
        it('should call getFeaturedOfferExpectedPriceBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeaturedOfferExpectedPriceBatch call and complete the assertions
          /*
          var getFeaturedOfferExpectedPriceBatchRequestBody = new SellingPartnerApiForPricing.GetFeaturedOfferExpectedPriceBatchRequest();
          getFeaturedOfferExpectedPriceBatchRequestBody.requests = new SellingPartnerApiForPricing.FeaturedOfferExpectedPriceRequestList();

          instance.getFeaturedOfferExpectedPriceBatch(getFeaturedOfferExpectedPriceBatchRequestBody).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForPricing.GetFeaturedOfferExpectedPriceBatchResponse);
            expect(data.responses).to.be.a(SellingPartnerApiForPricing.FeaturedOfferExpectedPriceResponseList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
