/*
 * Selling Partner API for Direct Fulfillment Payments
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorDirectFulfillmentPaymentsV1/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorDirectFulfillmentPaymentsV1/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForDirectFulfillmentPayments);
  }
}(this, function(expect, SellingPartnerApiForDirectFulfillmentPayments) {
  'use strict';

  var instance;

  describe('vendorDirectFulfillmentPaymentsV1', function() {
    describe('InvoiceItem', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForDirectFulfillmentPayments.InvoiceItem();
      });

      it('should create an instance of InvoiceItem', function() {
        // TODO: update the code to test InvoiceItem
        expect(instance).to.be.a(SellingPartnerApiForDirectFulfillmentPayments.InvoiceItem);
      });

      it('should have the property itemSequenceNumber (base name: "itemSequenceNumber")', function() {
        // TODO: update the code to test the property itemSequenceNumber
        expect(instance).to.have.property('itemSequenceNumber');
        // expect(instance.itemSequenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property buyerProductIdentifier (base name: "buyerProductIdentifier")', function() {
        // TODO: update the code to test the property buyerProductIdentifier
        expect(instance).to.have.property('buyerProductIdentifier');
        // expect(instance.buyerProductIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property vendorProductIdentifier (base name: "vendorProductIdentifier")', function() {
        // TODO: update the code to test the property vendorProductIdentifier
        expect(instance).to.have.property('vendorProductIdentifier');
        // expect(instance.vendorProductIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property invoicedQuantity (base name: "invoicedQuantity")', function() {
        // TODO: update the code to test the property invoicedQuantity
        expect(instance).to.have.property('invoicedQuantity');
        // expect(instance.invoicedQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property netCost (base name: "netCost")', function() {
        // TODO: update the code to test the property netCost
        expect(instance).to.have.property('netCost');
        // expect(instance.netCost).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseOrderNumber (base name: "purchaseOrderNumber")', function() {
        // TODO: update the code to test the property purchaseOrderNumber
        expect(instance).to.have.property('purchaseOrderNumber');
        // expect(instance.purchaseOrderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property vendorOrderNumber (base name: "vendorOrderNumber")', function() {
        // TODO: update the code to test the property vendorOrderNumber
        expect(instance).to.have.property('vendorOrderNumber');
        // expect(instance.vendorOrderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property hsnCode (base name: "hsnCode")', function() {
        // TODO: update the code to test the property hsnCode
        expect(instance).to.have.property('hsnCode');
        // expect(instance.hsnCode).to.be(expectedValueLiteral);
      });

      it('should have the property taxDetails (base name: "taxDetails")', function() {
        // TODO: update the code to test the property taxDetails
        expect(instance).to.have.property('taxDetails');
        // expect(instance.taxDetails).to.be(expectedValueLiteral);
      });

      it('should have the property chargeDetails (base name: "chargeDetails")', function() {
        // TODO: update the code to test the property chargeDetails
        expect(instance).to.have.property('chargeDetails');
        // expect(instance.chargeDetails).to.be(expectedValueLiteral);
      });

    });
  });

}));
