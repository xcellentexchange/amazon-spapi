/*
 * Selling Partner API for Direct Fulfillment Payments
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorDirectFulfillmentPaymentsV1/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorDirectFulfillmentPaymentsV1/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForDirectFulfillmentPayments);
  }
}(this, function(expect, SellingPartnerApiForDirectFulfillmentPayments) {
  'use strict';

  var instance;

  describe('vendorDirectFulfillmentPaymentsV1', function() {
    describe('InvoiceDetail', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForDirectFulfillmentPayments.InvoiceDetail();
      });

      it('should create an instance of InvoiceDetail', function() {
        // TODO: update the code to test InvoiceDetail
        expect(instance).to.be.a(SellingPartnerApiForDirectFulfillmentPayments.InvoiceDetail);
      });

      it('should have the property invoiceNumber (base name: "invoiceNumber")', function() {
        // TODO: update the code to test the property invoiceNumber
        expect(instance).to.have.property('invoiceNumber');
        // expect(instance.invoiceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceDate (base name: "invoiceDate")', function() {
        // TODO: update the code to test the property invoiceDate
        expect(instance).to.have.property('invoiceDate');
        // expect(instance.invoiceDate).to.be(expectedValueLiteral);
      });

      it('should have the property referenceNumber (base name: "referenceNumber")', function() {
        // TODO: update the code to test the property referenceNumber
        expect(instance).to.have.property('referenceNumber');
        // expect(instance.referenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property remitToParty (base name: "remitToParty")', function() {
        // TODO: update the code to test the property remitToParty
        expect(instance).to.have.property('remitToParty');
        // expect(instance.remitToParty).to.be(expectedValueLiteral);
      });

      it('should have the property shipFromParty (base name: "shipFromParty")', function() {
        // TODO: update the code to test the property shipFromParty
        expect(instance).to.have.property('shipFromParty');
        // expect(instance.shipFromParty).to.be(expectedValueLiteral);
      });

      it('should have the property billToParty (base name: "billToParty")', function() {
        // TODO: update the code to test the property billToParty
        expect(instance).to.have.property('billToParty');
        // expect(instance.billToParty).to.be(expectedValueLiteral);
      });

      it('should have the property shipToCountryCode (base name: "shipToCountryCode")', function() {
        // TODO: update the code to test the property shipToCountryCode
        expect(instance).to.have.property('shipToCountryCode');
        // expect(instance.shipToCountryCode).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTermsCode (base name: "paymentTermsCode")', function() {
        // TODO: update the code to test the property paymentTermsCode
        expect(instance).to.have.property('paymentTermsCode');
        // expect(instance.paymentTermsCode).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceTotal (base name: "invoiceTotal")', function() {
        // TODO: update the code to test the property invoiceTotal
        expect(instance).to.have.property('invoiceTotal');
        // expect(instance.invoiceTotal).to.be(expectedValueLiteral);
      });

      it('should have the property taxTotals (base name: "taxTotals")', function() {
        // TODO: update the code to test the property taxTotals
        expect(instance).to.have.property('taxTotals');
        // expect(instance.taxTotals).to.be(expectedValueLiteral);
      });

      it('should have the property additionalDetails (base name: "additionalDetails")', function() {
        // TODO: update the code to test the property additionalDetails
        expect(instance).to.have.property('additionalDetails');
        // expect(instance.additionalDetails).to.be(expectedValueLiteral);
      });

      it('should have the property chargeDetails (base name: "chargeDetails")', function() {
        // TODO: update the code to test the property chargeDetails
        expect(instance).to.have.property('chargeDetails');
        // expect(instance.chargeDetails).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        // TODO: update the code to test the property items
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

    });
  });

}));
