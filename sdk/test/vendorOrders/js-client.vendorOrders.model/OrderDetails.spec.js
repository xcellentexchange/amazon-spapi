/*
 * Selling Partner API for Retail Procurement Orders
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorOrders/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorOrders/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementOrders);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementOrders) {
  'use strict';

  var instance;

  describe('vendorOrders', function() {
    describe('OrderDetails', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForRetailProcurementOrders.OrderDetails();
      });

      it('should create an instance of OrderDetails', function() {
        // TODO: update the code to test OrderDetails
        expect(instance).to.be.a(SellingPartnerApiForRetailProcurementOrders.OrderDetails);
      });

      it('should have the property purchaseOrderDate (base name: "purchaseOrderDate")', function() {
        // TODO: update the code to test the property purchaseOrderDate
        expect(instance).to.have.property('purchaseOrderDate');
        // expect(instance.purchaseOrderDate).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseOrderChangedDate (base name: "purchaseOrderChangedDate")', function() {
        // TODO: update the code to test the property purchaseOrderChangedDate
        expect(instance).to.have.property('purchaseOrderChangedDate');
        // expect(instance.purchaseOrderChangedDate).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseOrderStateChangedDate (base name: "purchaseOrderStateChangedDate")', function() {
        // TODO: update the code to test the property purchaseOrderStateChangedDate
        expect(instance).to.have.property('purchaseOrderStateChangedDate');
        // expect(instance.purchaseOrderStateChangedDate).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseOrderType (base name: "purchaseOrderType")', function() {
        // TODO: update the code to test the property purchaseOrderType
        expect(instance).to.have.property('purchaseOrderType');
        // expect(instance.purchaseOrderType).to.be(expectedValueLiteral);
      });

      it('should have the property importDetails (base name: "importDetails")', function() {
        // TODO: update the code to test the property importDetails
        expect(instance).to.have.property('importDetails');
        // expect(instance.importDetails).to.be(expectedValueLiteral);
      });

      it('should have the property dealCode (base name: "dealCode")', function() {
        // TODO: update the code to test the property dealCode
        expect(instance).to.have.property('dealCode');
        // expect(instance.dealCode).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethod (base name: "paymentMethod")', function() {
        // TODO: update the code to test the property paymentMethod
        expect(instance).to.have.property('paymentMethod');
        // expect(instance.paymentMethod).to.be(expectedValueLiteral);
      });

      it('should have the property buyingParty (base name: "buyingParty")', function() {
        // TODO: update the code to test the property buyingParty
        expect(instance).to.have.property('buyingParty');
        // expect(instance.buyingParty).to.be(expectedValueLiteral);
      });

      it('should have the property sellingParty (base name: "sellingParty")', function() {
        // TODO: update the code to test the property sellingParty
        expect(instance).to.have.property('sellingParty');
        // expect(instance.sellingParty).to.be(expectedValueLiteral);
      });

      it('should have the property shipToParty (base name: "shipToParty")', function() {
        // TODO: update the code to test the property shipToParty
        expect(instance).to.have.property('shipToParty');
        // expect(instance.shipToParty).to.be(expectedValueLiteral);
      });

      it('should have the property billToParty (base name: "billToParty")', function() {
        // TODO: update the code to test the property billToParty
        expect(instance).to.have.property('billToParty');
        // expect(instance.billToParty).to.be(expectedValueLiteral);
      });

      it('should have the property shipWindow (base name: "shipWindow")', function() {
        // TODO: update the code to test the property shipWindow
        expect(instance).to.have.property('shipWindow');
        // expect(instance.shipWindow).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryWindow (base name: "deliveryWindow")', function() {
        // TODO: update the code to test the property deliveryWindow
        expect(instance).to.have.property('deliveryWindow');
        // expect(instance.deliveryWindow).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        // TODO: update the code to test the property items
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

    });
  });

}));
