/*
 * Selling Partner API for Retail Procurement Orders
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorOrders/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorOrders/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementOrders);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementOrders) {
  'use strict';

  var instance;

  describe('vendorOrders', function() {
    describe('OrderAcknowledgementItem', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForRetailProcurementOrders.OrderAcknowledgementItem();
      });

      it('should create an instance of OrderAcknowledgementItem', function() {
        // TODO: update the code to test OrderAcknowledgementItem
        expect(instance).to.be.a(SellingPartnerApiForRetailProcurementOrders.OrderAcknowledgementItem);
      });

      it('should have the property itemSequenceNumber (base name: "itemSequenceNumber")', function() {
        // TODO: update the code to test the property itemSequenceNumber
        expect(instance).to.have.property('itemSequenceNumber');
        // expect(instance.itemSequenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property amazonProductIdentifier (base name: "amazonProductIdentifier")', function() {
        // TODO: update the code to test the property amazonProductIdentifier
        expect(instance).to.have.property('amazonProductIdentifier');
        // expect(instance.amazonProductIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property vendorProductIdentifier (base name: "vendorProductIdentifier")', function() {
        // TODO: update the code to test the property vendorProductIdentifier
        expect(instance).to.have.property('vendorProductIdentifier');
        // expect(instance.vendorProductIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property orderedQuantity (base name: "orderedQuantity")', function() {
        // TODO: update the code to test the property orderedQuantity
        expect(instance).to.have.property('orderedQuantity');
        // expect(instance.orderedQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property netCost (base name: "netCost")', function() {
        // TODO: update the code to test the property netCost
        expect(instance).to.have.property('netCost');
        // expect(instance.netCost).to.be(expectedValueLiteral);
      });

      it('should have the property listPrice (base name: "listPrice")', function() {
        // TODO: update the code to test the property listPrice
        expect(instance).to.have.property('listPrice');
        // expect(instance.listPrice).to.be(expectedValueLiteral);
      });

      it('should have the property discountMultiplier (base name: "discountMultiplier")', function() {
        // TODO: update the code to test the property discountMultiplier
        expect(instance).to.have.property('discountMultiplier');
        // expect(instance.discountMultiplier).to.be(expectedValueLiteral);
      });

      it('should have the property itemAcknowledgements (base name: "itemAcknowledgements")', function() {
        // TODO: update the code to test the property itemAcknowledgements
        expect(instance).to.have.property('itemAcknowledgements');
        // expect(instance.itemAcknowledgements).to.be(expectedValueLiteral);
      });

    });
  });

}));
