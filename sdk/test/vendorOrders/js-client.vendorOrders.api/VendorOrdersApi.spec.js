/*
 * Selling Partner API for Retail Procurement Orders
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorOrders/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorOrders/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementOrders);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementOrders) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForRetailProcurementOrders.VendorOrdersApi();
  });

  describe('vendorOrders', function() {
    describe('VendorOrdersApi', function() {
      describe('getPurchaseOrder', function() {
        it('should call getPurchaseOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for getPurchaseOrder call and complete the assertions
          /*
          var purchaseOrderNumber = "purchaseOrderNumber_example";

          instance.getPurchaseOrder(purchaseOrderNumber).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForRetailProcurementOrders.GetPurchaseOrderResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForRetailProcurementOrders.Order);
                  expect(data.payload.purchaseOrderNumber).to.be.a('string');
              // expect(data.payload.purchaseOrderNumber).to.be("");
              expect(data.payload.purchaseOrderState).to.be.a('string');
              // expect(data.payload.purchaseOrderState).to.be("New");
              expect(data.payload.orderDetails).to.be.a(SellingPartnerApiForRetailProcurementOrders.OrderDetails);
                    expect(data.payload.orderDetails.purchaseOrderDate).to.be.a(Date);
                // expect(data.payload.orderDetails.purchaseOrderDate).to.be(new Date());
                expect(data.payload.orderDetails.purchaseOrderChangedDate).to.be.a(Date);
                // expect(data.payload.orderDetails.purchaseOrderChangedDate).to.be(new Date());
                expect(data.payload.orderDetails.purchaseOrderStateChangedDate).to.be.a(Date);
                // expect(data.payload.orderDetails.purchaseOrderStateChangedDate).to.be(new Date());
                expect(data.payload.orderDetails.purchaseOrderType).to.be.a('string');
                // expect(data.payload.orderDetails.purchaseOrderType).to.be("RegularOrder");
                expect(data.payload.orderDetails.importDetails).to.be.a(SellingPartnerApiForRetailProcurementOrders.ImportDetails);
                      expect(data.payload.orderDetails.importDetails.methodOfPayment).to.be.a('string');
                  // expect(data.payload.orderDetails.importDetails.methodOfPayment).to.be("PaidByBuyer");
                  expect(data.payload.orderDetails.importDetails.internationalCommercialTerms).to.be.a('string');
                  // expect(data.payload.orderDetails.importDetails.internationalCommercialTerms).to.be("ExWorks");
                  expect(data.payload.orderDetails.importDetails.portOfDelivery).to.be.a('string');
                  // expect(data.payload.orderDetails.importDetails.portOfDelivery).to.be("");
                  expect(data.payload.orderDetails.importDetails.importContainers).to.be.a('string');
                  // expect(data.payload.orderDetails.importDetails.importContainers).to.be("");
                  expect(data.payload.orderDetails.importDetails.shippingInstructions).to.be.a('string');
                  // expect(data.payload.orderDetails.importDetails.shippingInstructions).to.be("");
                expect(data.payload.orderDetails.dealCode).to.be.a('string');
                // expect(data.payload.orderDetails.dealCode).to.be("");
                expect(data.payload.orderDetails.paymentMethod).to.be.a('string');
                // expect(data.payload.orderDetails.paymentMethod).to.be("Invoice");
                expect(data.payload.orderDetails.buyingParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                      expect(data.payload.orderDetails.buyingParty.partyId).to.be.a('string');
                  // expect(data.payload.orderDetails.buyingParty.partyId).to.be("");
                  expect(data.payload.orderDetails.buyingParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                        expect(data.payload.orderDetails.buyingParty.address.name).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.name).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.addressLine1).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.addressLine1).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.addressLine2).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.addressLine2).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.addressLine3).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.addressLine3).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.city).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.city).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.county).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.county).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.district).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.district).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.stateOrRegion).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.stateOrRegion).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.postalCode).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.postalCode).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.countryCode).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.countryCode).to.be("");
                    expect(data.payload.orderDetails.buyingParty.address.phone).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.address.phone).to.be("");
                  expect(data.payload.orderDetails.buyingParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                        expect(data.payload.orderDetails.buyingParty.taxInfo.taxRegistrationType).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.taxInfo.taxRegistrationType).to.be("VAT");
                    expect(data.payload.orderDetails.buyingParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                    // expect(data.payload.orderDetails.buyingParty.taxInfo.taxRegistrationNumber).to.be("");
                expect(data.payload.orderDetails.sellingParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                      expect(data.payload.orderDetails.sellingParty.partyId).to.be.a('string');
                  // expect(data.payload.orderDetails.sellingParty.partyId).to.be("");
                  expect(data.payload.orderDetails.sellingParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                        expect(data.payload.orderDetails.sellingParty.address.name).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.name).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.addressLine1).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.addressLine1).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.addressLine2).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.addressLine2).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.addressLine3).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.addressLine3).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.city).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.city).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.county).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.county).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.district).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.district).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.stateOrRegion).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.stateOrRegion).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.postalCode).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.postalCode).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.countryCode).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.countryCode).to.be("");
                    expect(data.payload.orderDetails.sellingParty.address.phone).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.address.phone).to.be("");
                  expect(data.payload.orderDetails.sellingParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                        expect(data.payload.orderDetails.sellingParty.taxInfo.taxRegistrationType).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.taxInfo.taxRegistrationType).to.be("VAT");
                    expect(data.payload.orderDetails.sellingParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                    // expect(data.payload.orderDetails.sellingParty.taxInfo.taxRegistrationNumber).to.be("");
                expect(data.payload.orderDetails.shipToParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                      expect(data.payload.orderDetails.shipToParty.partyId).to.be.a('string');
                  // expect(data.payload.orderDetails.shipToParty.partyId).to.be("");
                  expect(data.payload.orderDetails.shipToParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                        expect(data.payload.orderDetails.shipToParty.address.name).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.name).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.addressLine1).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.addressLine1).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.addressLine2).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.addressLine2).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.addressLine3).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.addressLine3).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.city).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.city).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.county).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.county).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.district).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.district).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.stateOrRegion).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.stateOrRegion).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.postalCode).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.postalCode).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.countryCode).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.countryCode).to.be("");
                    expect(data.payload.orderDetails.shipToParty.address.phone).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.address.phone).to.be("");
                  expect(data.payload.orderDetails.shipToParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                        expect(data.payload.orderDetails.shipToParty.taxInfo.taxRegistrationType).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.taxInfo.taxRegistrationType).to.be("VAT");
                    expect(data.payload.orderDetails.shipToParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                    // expect(data.payload.orderDetails.shipToParty.taxInfo.taxRegistrationNumber).to.be("");
                expect(data.payload.orderDetails.billToParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                      expect(data.payload.orderDetails.billToParty.partyId).to.be.a('string');
                  // expect(data.payload.orderDetails.billToParty.partyId).to.be("");
                  expect(data.payload.orderDetails.billToParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                        expect(data.payload.orderDetails.billToParty.address.name).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.name).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.addressLine1).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.addressLine1).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.addressLine2).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.addressLine2).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.addressLine3).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.addressLine3).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.city).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.city).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.county).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.county).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.district).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.district).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.stateOrRegion).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.stateOrRegion).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.postalCode).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.postalCode).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.countryCode).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.countryCode).to.be("");
                    expect(data.payload.orderDetails.billToParty.address.phone).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.address.phone).to.be("");
                  expect(data.payload.orderDetails.billToParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                        expect(data.payload.orderDetails.billToParty.taxInfo.taxRegistrationType).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.taxInfo.taxRegistrationType).to.be("VAT");
                    expect(data.payload.orderDetails.billToParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                    // expect(data.payload.orderDetails.billToParty.taxInfo.taxRegistrationNumber).to.be("");
                expect(data.payload.orderDetails.shipWindow).to.be.a(SellingPartnerApiForRetailProcurementOrders.DateTimeInterval);
                    expect(data.payload.orderDetails.deliveryWindow).to.be.a(SellingPartnerApiForRetailProcurementOrders.DateTimeInterval);
                    {
                  let dataCtr = data.payload.orderDetails.items;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForRetailProcurementOrders.OrderItem);
                    expect(data.itemSequenceNumber).to.be.a('string');
                    // expect(data.itemSequenceNumber).to.be("");
                    expect(data.amazonProductIdentifier).to.be.a('string');
                    // expect(data.amazonProductIdentifier).to.be("");
                    expect(data.vendorProductIdentifier).to.be.a('string');
                    // expect(data.vendorProductIdentifier).to.be("");
                    expect(data.orderedQuantity).to.be.a(SellingPartnerApiForRetailProcurementOrders.ItemQuantity);
                          expect(data.orderedQuantity.amount).to.be.a('number');
                      // expect(data.orderedQuantity.amount).to.be(0);
                      expect(data.orderedQuantity.unitOfMeasure).to.be.a('string');
                      // expect(data.orderedQuantity.unitOfMeasure).to.be("Cases");
                      expect(data.orderedQuantity.unitSize).to.be.a('number');
                      // expect(data.orderedQuantity.unitSize).to.be(0);
                    expect(data.isBackOrderAllowed).to.be.a('boolean');
                    // expect(data.isBackOrderAllowed).to.be(false);
                    expect(data.netCost).to.be.a(SellingPartnerApiForRetailProcurementOrders.Money);
                          expect(data.netCost.currencyCode).to.be.a('string');
                      // expect(data.netCost.currencyCode).to.be("");
                      expect(data.netCost.amount).to.be.a(SellingPartnerApiForRetailProcurementOrders.Decimal);
                          expect(data.netCost.unitOfMeasure).to.be.a('string');
                      // expect(data.netCost.unitOfMeasure).to.be("POUNDS");
                    expect(data.listPrice).to.be.a(SellingPartnerApiForRetailProcurementOrders.Money);
                          expect(data.listPrice.currencyCode).to.be.a('string');
                      // expect(data.listPrice.currencyCode).to.be("");
                      expect(data.listPrice.amount).to.be.a(SellingPartnerApiForRetailProcurementOrders.Decimal);
                          expect(data.listPrice.unitOfMeasure).to.be.a('string');
                      // expect(data.listPrice.unitOfMeasure).to.be("POUNDS");
                  }
                }
            expect(data.errors).to.be.a(SellingPartnerApiForRetailProcurementOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPurchaseOrders', function() {
        it('should call getPurchaseOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getPurchaseOrders call and complete the assertions
          /*
          var opts = {};
          opts.limit = 789;
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.sortOrder = "sortOrder_example";
          opts.nextToken = "nextToken_example";
          opts.includeDetails = "includeDetails_example";
          opts.changedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.changedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.poItemState = "poItemState_example";
          opts.isPOChanged = "isPOChanged_example";
          opts.purchaseOrderState = "purchaseOrderState_example";
          opts.orderingVendorCode = "orderingVendorCode_example";

          instance.getPurchaseOrders(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForRetailProcurementOrders.GetPurchaseOrdersResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForRetailProcurementOrders.OrderList);
                  expect(data.payload.pagination).to.be.a(SellingPartnerApiForRetailProcurementOrders.Pagination);
                    expect(data.payload.pagination.nextToken).to.be.a('string');
                // expect(data.payload.pagination.nextToken).to.be("");
              {
                let dataCtr = data.payload.orders;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForRetailProcurementOrders.Order);
                  expect(data.purchaseOrderNumber).to.be.a('string');
                  // expect(data.purchaseOrderNumber).to.be("");
                  expect(data.purchaseOrderState).to.be.a('string');
                  // expect(data.purchaseOrderState).to.be("New");
                  expect(data.orderDetails).to.be.a(SellingPartnerApiForRetailProcurementOrders.OrderDetails);
                        expect(data.orderDetails.purchaseOrderDate).to.be.a(Date);
                    // expect(data.orderDetails.purchaseOrderDate).to.be(new Date());
                    expect(data.orderDetails.purchaseOrderChangedDate).to.be.a(Date);
                    // expect(data.orderDetails.purchaseOrderChangedDate).to.be(new Date());
                    expect(data.orderDetails.purchaseOrderStateChangedDate).to.be.a(Date);
                    // expect(data.orderDetails.purchaseOrderStateChangedDate).to.be(new Date());
                    expect(data.orderDetails.purchaseOrderType).to.be.a('string');
                    // expect(data.orderDetails.purchaseOrderType).to.be("RegularOrder");
                    expect(data.orderDetails.importDetails).to.be.a(SellingPartnerApiForRetailProcurementOrders.ImportDetails);
                          expect(data.orderDetails.importDetails.methodOfPayment).to.be.a('string');
                      // expect(data.orderDetails.importDetails.methodOfPayment).to.be("PaidByBuyer");
                      expect(data.orderDetails.importDetails.internationalCommercialTerms).to.be.a('string');
                      // expect(data.orderDetails.importDetails.internationalCommercialTerms).to.be("ExWorks");
                      expect(data.orderDetails.importDetails.portOfDelivery).to.be.a('string');
                      // expect(data.orderDetails.importDetails.portOfDelivery).to.be("");
                      expect(data.orderDetails.importDetails.importContainers).to.be.a('string');
                      // expect(data.orderDetails.importDetails.importContainers).to.be("");
                      expect(data.orderDetails.importDetails.shippingInstructions).to.be.a('string');
                      // expect(data.orderDetails.importDetails.shippingInstructions).to.be("");
                    expect(data.orderDetails.dealCode).to.be.a('string');
                    // expect(data.orderDetails.dealCode).to.be("");
                    expect(data.orderDetails.paymentMethod).to.be.a('string');
                    // expect(data.orderDetails.paymentMethod).to.be("Invoice");
                    expect(data.orderDetails.buyingParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                          expect(data.orderDetails.buyingParty.partyId).to.be.a('string');
                      // expect(data.orderDetails.buyingParty.partyId).to.be("");
                      expect(data.orderDetails.buyingParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                            expect(data.orderDetails.buyingParty.address.name).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.name).to.be("");
                        expect(data.orderDetails.buyingParty.address.addressLine1).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.addressLine1).to.be("");
                        expect(data.orderDetails.buyingParty.address.addressLine2).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.addressLine2).to.be("");
                        expect(data.orderDetails.buyingParty.address.addressLine3).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.addressLine3).to.be("");
                        expect(data.orderDetails.buyingParty.address.city).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.city).to.be("");
                        expect(data.orderDetails.buyingParty.address.county).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.county).to.be("");
                        expect(data.orderDetails.buyingParty.address.district).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.district).to.be("");
                        expect(data.orderDetails.buyingParty.address.stateOrRegion).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.stateOrRegion).to.be("");
                        expect(data.orderDetails.buyingParty.address.postalCode).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.postalCode).to.be("");
                        expect(data.orderDetails.buyingParty.address.countryCode).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.countryCode).to.be("");
                        expect(data.orderDetails.buyingParty.address.phone).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.address.phone).to.be("");
                      expect(data.orderDetails.buyingParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                            expect(data.orderDetails.buyingParty.taxInfo.taxRegistrationType).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.taxInfo.taxRegistrationType).to.be("VAT");
                        expect(data.orderDetails.buyingParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                        // expect(data.orderDetails.buyingParty.taxInfo.taxRegistrationNumber).to.be("");
                    expect(data.orderDetails.sellingParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                          expect(data.orderDetails.sellingParty.partyId).to.be.a('string');
                      // expect(data.orderDetails.sellingParty.partyId).to.be("");
                      expect(data.orderDetails.sellingParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                            expect(data.orderDetails.sellingParty.address.name).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.name).to.be("");
                        expect(data.orderDetails.sellingParty.address.addressLine1).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.addressLine1).to.be("");
                        expect(data.orderDetails.sellingParty.address.addressLine2).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.addressLine2).to.be("");
                        expect(data.orderDetails.sellingParty.address.addressLine3).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.addressLine3).to.be("");
                        expect(data.orderDetails.sellingParty.address.city).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.city).to.be("");
                        expect(data.orderDetails.sellingParty.address.county).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.county).to.be("");
                        expect(data.orderDetails.sellingParty.address.district).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.district).to.be("");
                        expect(data.orderDetails.sellingParty.address.stateOrRegion).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.stateOrRegion).to.be("");
                        expect(data.orderDetails.sellingParty.address.postalCode).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.postalCode).to.be("");
                        expect(data.orderDetails.sellingParty.address.countryCode).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.countryCode).to.be("");
                        expect(data.orderDetails.sellingParty.address.phone).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.address.phone).to.be("");
                      expect(data.orderDetails.sellingParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                            expect(data.orderDetails.sellingParty.taxInfo.taxRegistrationType).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.taxInfo.taxRegistrationType).to.be("VAT");
                        expect(data.orderDetails.sellingParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                        // expect(data.orderDetails.sellingParty.taxInfo.taxRegistrationNumber).to.be("");
                    expect(data.orderDetails.shipToParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                          expect(data.orderDetails.shipToParty.partyId).to.be.a('string');
                      // expect(data.orderDetails.shipToParty.partyId).to.be("");
                      expect(data.orderDetails.shipToParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                            expect(data.orderDetails.shipToParty.address.name).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.name).to.be("");
                        expect(data.orderDetails.shipToParty.address.addressLine1).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.addressLine1).to.be("");
                        expect(data.orderDetails.shipToParty.address.addressLine2).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.addressLine2).to.be("");
                        expect(data.orderDetails.shipToParty.address.addressLine3).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.addressLine3).to.be("");
                        expect(data.orderDetails.shipToParty.address.city).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.city).to.be("");
                        expect(data.orderDetails.shipToParty.address.county).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.county).to.be("");
                        expect(data.orderDetails.shipToParty.address.district).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.district).to.be("");
                        expect(data.orderDetails.shipToParty.address.stateOrRegion).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.stateOrRegion).to.be("");
                        expect(data.orderDetails.shipToParty.address.postalCode).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.postalCode).to.be("");
                        expect(data.orderDetails.shipToParty.address.countryCode).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.countryCode).to.be("");
                        expect(data.orderDetails.shipToParty.address.phone).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.address.phone).to.be("");
                      expect(data.orderDetails.shipToParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                            expect(data.orderDetails.shipToParty.taxInfo.taxRegistrationType).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.taxInfo.taxRegistrationType).to.be("VAT");
                        expect(data.orderDetails.shipToParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                        // expect(data.orderDetails.shipToParty.taxInfo.taxRegistrationNumber).to.be("");
                    expect(data.orderDetails.billToParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                          expect(data.orderDetails.billToParty.partyId).to.be.a('string');
                      // expect(data.orderDetails.billToParty.partyId).to.be("");
                      expect(data.orderDetails.billToParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                            expect(data.orderDetails.billToParty.address.name).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.name).to.be("");
                        expect(data.orderDetails.billToParty.address.addressLine1).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.addressLine1).to.be("");
                        expect(data.orderDetails.billToParty.address.addressLine2).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.addressLine2).to.be("");
                        expect(data.orderDetails.billToParty.address.addressLine3).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.addressLine3).to.be("");
                        expect(data.orderDetails.billToParty.address.city).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.city).to.be("");
                        expect(data.orderDetails.billToParty.address.county).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.county).to.be("");
                        expect(data.orderDetails.billToParty.address.district).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.district).to.be("");
                        expect(data.orderDetails.billToParty.address.stateOrRegion).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.stateOrRegion).to.be("");
                        expect(data.orderDetails.billToParty.address.postalCode).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.postalCode).to.be("");
                        expect(data.orderDetails.billToParty.address.countryCode).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.countryCode).to.be("");
                        expect(data.orderDetails.billToParty.address.phone).to.be.a('string');
                        // expect(data.orderDetails.billToParty.address.phone).to.be("");
                      expect(data.orderDetails.billToParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                            expect(data.orderDetails.billToParty.taxInfo.taxRegistrationType).to.be.a('string');
                        // expect(data.orderDetails.billToParty.taxInfo.taxRegistrationType).to.be("VAT");
                        expect(data.orderDetails.billToParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                        // expect(data.orderDetails.billToParty.taxInfo.taxRegistrationNumber).to.be("");
                    expect(data.orderDetails.shipWindow).to.be.a(SellingPartnerApiForRetailProcurementOrders.DateTimeInterval);
                        expect(data.orderDetails.deliveryWindow).to.be.a(SellingPartnerApiForRetailProcurementOrders.DateTimeInterval);
                        {
                      let dataCtr = data.orderDetails.items;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SellingPartnerApiForRetailProcurementOrders.OrderItem);
                        expect(data.itemSequenceNumber).to.be.a('string');
                        // expect(data.itemSequenceNumber).to.be("");
                        expect(data.amazonProductIdentifier).to.be.a('string');
                        // expect(data.amazonProductIdentifier).to.be("");
                        expect(data.vendorProductIdentifier).to.be.a('string');
                        // expect(data.vendorProductIdentifier).to.be("");
                        expect(data.orderedQuantity).to.be.a(SellingPartnerApiForRetailProcurementOrders.ItemQuantity);
                              expect(data.orderedQuantity.amount).to.be.a('number');
                          // expect(data.orderedQuantity.amount).to.be(0);
                          expect(data.orderedQuantity.unitOfMeasure).to.be.a('string');
                          // expect(data.orderedQuantity.unitOfMeasure).to.be("Cases");
                          expect(data.orderedQuantity.unitSize).to.be.a('number');
                          // expect(data.orderedQuantity.unitSize).to.be(0);
                        expect(data.isBackOrderAllowed).to.be.a('boolean');
                        // expect(data.isBackOrderAllowed).to.be(false);
                        expect(data.netCost).to.be.a(SellingPartnerApiForRetailProcurementOrders.Money);
                              expect(data.netCost.currencyCode).to.be.a('string');
                          // expect(data.netCost.currencyCode).to.be("");
                          expect(data.netCost.amount).to.be.a(SellingPartnerApiForRetailProcurementOrders.Decimal);
                              expect(data.netCost.unitOfMeasure).to.be.a('string');
                          // expect(data.netCost.unitOfMeasure).to.be("POUNDS");
                        expect(data.listPrice).to.be.a(SellingPartnerApiForRetailProcurementOrders.Money);
                              expect(data.listPrice.currencyCode).to.be.a('string');
                          // expect(data.listPrice.currencyCode).to.be("");
                          expect(data.listPrice.amount).to.be.a(SellingPartnerApiForRetailProcurementOrders.Decimal);
                              expect(data.listPrice.unitOfMeasure).to.be.a('string');
                          // expect(data.listPrice.unitOfMeasure).to.be("POUNDS");
                      }
                    }
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApiForRetailProcurementOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPurchaseOrdersStatus', function() {
        it('should call getPurchaseOrdersStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getPurchaseOrdersStatus call and complete the assertions
          /*
          var opts = {};
          opts.limit = 789;
          opts.sortOrder = "sortOrder_example";
          opts.nextToken = "nextToken_example";
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.purchaseOrderNumber = "purchaseOrderNumber_example";
          opts.purchaseOrderStatus = "purchaseOrderStatus_example";
          opts.itemConfirmationStatus = "itemConfirmationStatus_example";
          opts.itemReceiveStatus = "itemReceiveStatus_example";
          opts.orderingVendorCode = "orderingVendorCode_example";
          opts.shipToPartyId = "shipToPartyId_example";

          instance.getPurchaseOrdersStatus(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForRetailProcurementOrders.GetPurchaseOrdersStatusResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForRetailProcurementOrders.OrderListStatus);
                  expect(data.payload.pagination).to.be.a(SellingPartnerApiForRetailProcurementOrders.Pagination);
                    expect(data.payload.pagination.nextToken).to.be.a('string');
                // expect(data.payload.pagination.nextToken).to.be("");
              {
                let dataCtr = data.payload.ordersStatus;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForRetailProcurementOrders.OrderStatus);
                  expect(data.purchaseOrderNumber).to.be.a('string');
                  // expect(data.purchaseOrderNumber).to.be("");
                  expect(data.purchaseOrderStatus).to.be.a('string');
                  // expect(data.purchaseOrderStatus).to.be("OPEN");
                  expect(data.purchaseOrderDate).to.be.a(Date);
                  // expect(data.purchaseOrderDate).to.be(new Date());
                  expect(data.lastUpdatedDate).to.be.a(Date);
                  // expect(data.lastUpdatedDate).to.be(new Date());
                  expect(data.sellingParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                        expect(data.sellingParty.partyId).to.be.a('string');
                    // expect(data.sellingParty.partyId).to.be("");
                    expect(data.sellingParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                          expect(data.sellingParty.address.name).to.be.a('string');
                      // expect(data.sellingParty.address.name).to.be("");
                      expect(data.sellingParty.address.addressLine1).to.be.a('string');
                      // expect(data.sellingParty.address.addressLine1).to.be("");
                      expect(data.sellingParty.address.addressLine2).to.be.a('string');
                      // expect(data.sellingParty.address.addressLine2).to.be("");
                      expect(data.sellingParty.address.addressLine3).to.be.a('string');
                      // expect(data.sellingParty.address.addressLine3).to.be("");
                      expect(data.sellingParty.address.city).to.be.a('string');
                      // expect(data.sellingParty.address.city).to.be("");
                      expect(data.sellingParty.address.county).to.be.a('string');
                      // expect(data.sellingParty.address.county).to.be("");
                      expect(data.sellingParty.address.district).to.be.a('string');
                      // expect(data.sellingParty.address.district).to.be("");
                      expect(data.sellingParty.address.stateOrRegion).to.be.a('string');
                      // expect(data.sellingParty.address.stateOrRegion).to.be("");
                      expect(data.sellingParty.address.postalCode).to.be.a('string');
                      // expect(data.sellingParty.address.postalCode).to.be("");
                      expect(data.sellingParty.address.countryCode).to.be.a('string');
                      // expect(data.sellingParty.address.countryCode).to.be("");
                      expect(data.sellingParty.address.phone).to.be.a('string');
                      // expect(data.sellingParty.address.phone).to.be("");
                    expect(data.sellingParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                          expect(data.sellingParty.taxInfo.taxRegistrationType).to.be.a('string');
                      // expect(data.sellingParty.taxInfo.taxRegistrationType).to.be("VAT");
                      expect(data.sellingParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                      // expect(data.sellingParty.taxInfo.taxRegistrationNumber).to.be("");
                  expect(data.shipToParty).to.be.a(SellingPartnerApiForRetailProcurementOrders.PartyIdentification);
                        expect(data.shipToParty.partyId).to.be.a('string');
                    // expect(data.shipToParty.partyId).to.be("");
                    expect(data.shipToParty.address).to.be.a(SellingPartnerApiForRetailProcurementOrders.Address);
                          expect(data.shipToParty.address.name).to.be.a('string');
                      // expect(data.shipToParty.address.name).to.be("");
                      expect(data.shipToParty.address.addressLine1).to.be.a('string');
                      // expect(data.shipToParty.address.addressLine1).to.be("");
                      expect(data.shipToParty.address.addressLine2).to.be.a('string');
                      // expect(data.shipToParty.address.addressLine2).to.be("");
                      expect(data.shipToParty.address.addressLine3).to.be.a('string');
                      // expect(data.shipToParty.address.addressLine3).to.be("");
                      expect(data.shipToParty.address.city).to.be.a('string');
                      // expect(data.shipToParty.address.city).to.be("");
                      expect(data.shipToParty.address.county).to.be.a('string');
                      // expect(data.shipToParty.address.county).to.be("");
                      expect(data.shipToParty.address.district).to.be.a('string');
                      // expect(data.shipToParty.address.district).to.be("");
                      expect(data.shipToParty.address.stateOrRegion).to.be.a('string');
                      // expect(data.shipToParty.address.stateOrRegion).to.be("");
                      expect(data.shipToParty.address.postalCode).to.be.a('string');
                      // expect(data.shipToParty.address.postalCode).to.be("");
                      expect(data.shipToParty.address.countryCode).to.be.a('string');
                      // expect(data.shipToParty.address.countryCode).to.be("");
                      expect(data.shipToParty.address.phone).to.be.a('string');
                      // expect(data.shipToParty.address.phone).to.be("");
                    expect(data.shipToParty.taxInfo).to.be.a(SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails);
                          expect(data.shipToParty.taxInfo.taxRegistrationType).to.be.a('string');
                      // expect(data.shipToParty.taxInfo.taxRegistrationType).to.be("VAT");
                      expect(data.shipToParty.taxInfo.taxRegistrationNumber).to.be.a('string');
                      // expect(data.shipToParty.taxInfo.taxRegistrationNumber).to.be("");
                  expect(data.itemStatus).to.be.a(SellingPartnerApiForRetailProcurementOrders.ItemStatus);
          
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApiForRetailProcurementOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitAcknowledgement', function() {
        it('should call submitAcknowledgement successfully', function(done) {
          // TODO: uncomment, update parameter values for submitAcknowledgement call and complete the assertions
          /*
          var body = new SellingPartnerApiForRetailProcurementOrders.SubmitAcknowledgementRequest();
          body.acknowledgements = [new SellingPartnerApiForRetailProcurementOrders.OrderAcknowledgement()];
          body.acknowledgements[0].purchaseOrderNumber = "";
          body.acknowledgements[0].sellingParty = new SellingPartnerApiForRetailProcurementOrders.PartyIdentification();
          body.acknowledgements[0].sellingParty.partyId = "";
          body.acknowledgements[0].sellingParty.address = new SellingPartnerApiForRetailProcurementOrders.Address();
          body.acknowledgements[0].sellingParty.address.name = "";
          body.acknowledgements[0].sellingParty.address.addressLine1 = "";
          body.acknowledgements[0].sellingParty.address.addressLine2 = "";
          body.acknowledgements[0].sellingParty.address.addressLine3 = "";
          body.acknowledgements[0].sellingParty.address.city = "";
          body.acknowledgements[0].sellingParty.address.county = "";
          body.acknowledgements[0].sellingParty.address.district = "";
          body.acknowledgements[0].sellingParty.address.stateOrRegion = "";
          body.acknowledgements[0].sellingParty.address.postalCode = "";
          body.acknowledgements[0].sellingParty.address.countryCode = "";
          body.acknowledgements[0].sellingParty.address.phone = "";
          body.acknowledgements[0].sellingParty.taxInfo = new SellingPartnerApiForRetailProcurementOrders.TaxRegistrationDetails();
          body.acknowledgements[0].sellingParty.taxInfo.taxRegistrationType = "VAT";
          body.acknowledgements[0].sellingParty.taxInfo.taxRegistrationNumber = "";
          body.acknowledgements[0].acknowledgementDate = new Date();
          body.acknowledgements[0].items = [new SellingPartnerApiForRetailProcurementOrders.OrderAcknowledgementItem()];
          body.acknowledgements[0].items[0].itemSequenceNumber = "";
          body.acknowledgements[0].items[0].amazonProductIdentifier = "";
          body.acknowledgements[0].items[0].vendorProductIdentifier = "";
          body.acknowledgements[0].items[0].orderedQuantity = new SellingPartnerApiForRetailProcurementOrders.ItemQuantity();
          body.acknowledgements[0].items[0].orderedQuantity.amount = 0;
          body.acknowledgements[0].items[0].orderedQuantity.unitOfMeasure = "Cases";
          body.acknowledgements[0].items[0].orderedQuantity.unitSize = 0;
          body.acknowledgements[0].items[0].netCost = new SellingPartnerApiForRetailProcurementOrders.Money();
          body.acknowledgements[0].items[0].netCost.currencyCode = "";
          body.acknowledgements[0].items[0].netCost.amount = new SellingPartnerApiForRetailProcurementOrders.Decimal();
          body.acknowledgements[0].items[0].netCost.unitOfMeasure = "POUNDS";
          body.acknowledgements[0].items[0].listPrice = new SellingPartnerApiForRetailProcurementOrders.Money();
          body.acknowledgements[0].items[0].listPrice.currencyCode = "";
          body.acknowledgements[0].items[0].listPrice.amount = new SellingPartnerApiForRetailProcurementOrders.Decimal();
          body.acknowledgements[0].items[0].listPrice.unitOfMeasure = "POUNDS";
          body.acknowledgements[0].items[0].discountMultiplier = "";
          body.acknowledgements[0].items[0].itemAcknowledgements = [new SellingPartnerApiForRetailProcurementOrders.OrderItemAcknowledgement()];
          body.acknowledgements[0].items[0].itemAcknowledgements[0].acknowledgementCode = "Accepted";
          body.acknowledgements[0].items[0].itemAcknowledgements[0].acknowledgedQuantity = new SellingPartnerApiForRetailProcurementOrders.ItemQuantity();
          body.acknowledgements[0].items[0].itemAcknowledgements[0].acknowledgedQuantity.amount = 0;
          body.acknowledgements[0].items[0].itemAcknowledgements[0].acknowledgedQuantity.unitOfMeasure = "Cases";
          body.acknowledgements[0].items[0].itemAcknowledgements[0].acknowledgedQuantity.unitSize = 0;
          body.acknowledgements[0].items[0].itemAcknowledgements[0].scheduledShipDate = new Date();
          body.acknowledgements[0].items[0].itemAcknowledgements[0].scheduledDeliveryDate = new Date();
          body.acknowledgements[0].items[0].itemAcknowledgements[0].rejectionReason = "TemporarilyUnavailable";

          instance.submitAcknowledgement(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForRetailProcurementOrders.SubmitAcknowledgementResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForRetailProcurementOrders.TransactionId);
                  expect(data.payload.transactionId).to.be.a('string');
              // expect(data.payload.transactionId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForRetailProcurementOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
