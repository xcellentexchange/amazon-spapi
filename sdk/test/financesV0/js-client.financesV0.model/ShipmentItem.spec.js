/*
 * Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information that is relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range. 
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/financesV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/financesV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFinances);
  }
}(this, function(expect, SellingPartnerApiForFinances) {
  'use strict';

  var instance;

  describe('financesV0', function() {
    describe('ShipmentItem', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForFinances.ShipmentItem();
      });

      it('should create an instance of ShipmentItem', function() {
        // TODO: update the code to test ShipmentItem
        expect(instance).to.be.a(SellingPartnerApiForFinances.ShipmentItem);
      });

      it('should have the property sellerSKU (base name: "SellerSKU")', function() {
        // TODO: update the code to test the property sellerSKU
        expect(instance).to.have.property('sellerSKU');
        // expect(instance.sellerSKU).to.be(expectedValueLiteral);
      });

      it('should have the property orderItemId (base name: "OrderItemId")', function() {
        // TODO: update the code to test the property orderItemId
        expect(instance).to.have.property('orderItemId');
        // expect(instance.orderItemId).to.be(expectedValueLiteral);
      });

      it('should have the property orderAdjustmentItemId (base name: "OrderAdjustmentItemId")', function() {
        // TODO: update the code to test the property orderAdjustmentItemId
        expect(instance).to.have.property('orderAdjustmentItemId');
        // expect(instance.orderAdjustmentItemId).to.be(expectedValueLiteral);
      });

      it('should have the property quantityShipped (base name: "QuantityShipped")', function() {
        // TODO: update the code to test the property quantityShipped
        expect(instance).to.have.property('quantityShipped');
        // expect(instance.quantityShipped).to.be(expectedValueLiteral);
      });

      it('should have the property itemChargeList (base name: "ItemChargeList")', function() {
        // TODO: update the code to test the property itemChargeList
        expect(instance).to.have.property('itemChargeList');
        // expect(instance.itemChargeList).to.be(expectedValueLiteral);
      });

      it('should have the property itemChargeAdjustmentList (base name: "ItemChargeAdjustmentList")', function() {
        // TODO: update the code to test the property itemChargeAdjustmentList
        expect(instance).to.have.property('itemChargeAdjustmentList');
        // expect(instance.itemChargeAdjustmentList).to.be(expectedValueLiteral);
      });

      it('should have the property itemFeeList (base name: "ItemFeeList")', function() {
        // TODO: update the code to test the property itemFeeList
        expect(instance).to.have.property('itemFeeList');
        // expect(instance.itemFeeList).to.be(expectedValueLiteral);
      });

      it('should have the property itemFeeAdjustmentList (base name: "ItemFeeAdjustmentList")', function() {
        // TODO: update the code to test the property itemFeeAdjustmentList
        expect(instance).to.have.property('itemFeeAdjustmentList');
        // expect(instance.itemFeeAdjustmentList).to.be(expectedValueLiteral);
      });

      it('should have the property itemTaxWithheldList (base name: "ItemTaxWithheldList")', function() {
        // TODO: update the code to test the property itemTaxWithheldList
        expect(instance).to.have.property('itemTaxWithheldList');
        // expect(instance.itemTaxWithheldList).to.be(expectedValueLiteral);
      });

      it('should have the property promotionList (base name: "PromotionList")', function() {
        // TODO: update the code to test the property promotionList
        expect(instance).to.have.property('promotionList');
        // expect(instance.promotionList).to.be(expectedValueLiteral);
      });

      it('should have the property promotionAdjustmentList (base name: "PromotionAdjustmentList")', function() {
        // TODO: update the code to test the property promotionAdjustmentList
        expect(instance).to.have.property('promotionAdjustmentList');
        // expect(instance.promotionAdjustmentList).to.be(expectedValueLiteral);
      });

      it('should have the property costOfPointsGranted (base name: "CostOfPointsGranted")', function() {
        // TODO: update the code to test the property costOfPointsGranted
        expect(instance).to.have.property('costOfPointsGranted');
        // expect(instance.costOfPointsGranted).to.be(expectedValueLiteral);
      });

      it('should have the property costOfPointsReturned (base name: "CostOfPointsReturned")', function() {
        // TODO: update the code to test the property costOfPointsReturned
        expect(instance).to.have.property('costOfPointsReturned');
        // expect(instance.costOfPointsReturned).to.be(expectedValueLiteral);
      });

    });
  });

}));
