/*
 * Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information that is relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range. 
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/financesV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/financesV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFinances);
  }
}(this, function(expect, SellingPartnerApiForFinances) {
  'use strict';

  var instance;

  describe('financesV0', function() {
    describe('ShipmentEvent', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForFinances.ShipmentEvent();
      });

      it('should create an instance of ShipmentEvent', function() {
        // TODO: update the code to test ShipmentEvent
        expect(instance).to.be.a(SellingPartnerApiForFinances.ShipmentEvent);
      });

      it('should have the property amazonOrderId (base name: "AmazonOrderId")', function() {
        // TODO: update the code to test the property amazonOrderId
        expect(instance).to.have.property('amazonOrderId');
        // expect(instance.amazonOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property sellerOrderId (base name: "SellerOrderId")', function() {
        // TODO: update the code to test the property sellerOrderId
        expect(instance).to.have.property('sellerOrderId');
        // expect(instance.sellerOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property marketplaceName (base name: "MarketplaceName")', function() {
        // TODO: update the code to test the property marketplaceName
        expect(instance).to.have.property('marketplaceName');
        // expect(instance.marketplaceName).to.be(expectedValueLiteral);
      });

      it('should have the property storeName (base name: "StoreName")', function() {
        // TODO: update the code to test the property storeName
        expect(instance).to.have.property('storeName');
        // expect(instance.storeName).to.be(expectedValueLiteral);
      });

      it('should have the property orderChargeList (base name: "OrderChargeList")', function() {
        // TODO: update the code to test the property orderChargeList
        expect(instance).to.have.property('orderChargeList');
        // expect(instance.orderChargeList).to.be(expectedValueLiteral);
      });

      it('should have the property orderChargeAdjustmentList (base name: "OrderChargeAdjustmentList")', function() {
        // TODO: update the code to test the property orderChargeAdjustmentList
        expect(instance).to.have.property('orderChargeAdjustmentList');
        // expect(instance.orderChargeAdjustmentList).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentFeeList (base name: "ShipmentFeeList")', function() {
        // TODO: update the code to test the property shipmentFeeList
        expect(instance).to.have.property('shipmentFeeList');
        // expect(instance.shipmentFeeList).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentFeeAdjustmentList (base name: "ShipmentFeeAdjustmentList")', function() {
        // TODO: update the code to test the property shipmentFeeAdjustmentList
        expect(instance).to.have.property('shipmentFeeAdjustmentList');
        // expect(instance.shipmentFeeAdjustmentList).to.be(expectedValueLiteral);
      });

      it('should have the property orderFeeList (base name: "OrderFeeList")', function() {
        // TODO: update the code to test the property orderFeeList
        expect(instance).to.have.property('orderFeeList');
        // expect(instance.orderFeeList).to.be(expectedValueLiteral);
      });

      it('should have the property orderFeeAdjustmentList (base name: "OrderFeeAdjustmentList")', function() {
        // TODO: update the code to test the property orderFeeAdjustmentList
        expect(instance).to.have.property('orderFeeAdjustmentList');
        // expect(instance.orderFeeAdjustmentList).to.be(expectedValueLiteral);
      });

      it('should have the property directPaymentList (base name: "DirectPaymentList")', function() {
        // TODO: update the code to test the property directPaymentList
        expect(instance).to.have.property('directPaymentList');
        // expect(instance.directPaymentList).to.be(expectedValueLiteral);
      });

      it('should have the property postedDate (base name: "PostedDate")', function() {
        // TODO: update the code to test the property postedDate
        expect(instance).to.have.property('postedDate');
        // expect(instance.postedDate).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentItemList (base name: "ShipmentItemList")', function() {
        // TODO: update the code to test the property shipmentItemList
        expect(instance).to.have.property('shipmentItemList');
        // expect(instance.shipmentItemList).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentItemAdjustmentList (base name: "ShipmentItemAdjustmentList")', function() {
        // TODO: update the code to test the property shipmentItemAdjustmentList
        expect(instance).to.have.property('shipmentItemAdjustmentList');
        // expect(instance.shipmentItemAdjustmentList).to.be(expectedValueLiteral);
      });

    });
  });

}));
