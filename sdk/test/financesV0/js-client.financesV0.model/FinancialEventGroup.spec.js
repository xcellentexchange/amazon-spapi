/*
 * Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information that is relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range. 
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/financesV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/financesV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFinances);
  }
}(this, function(expect, SellingPartnerApiForFinances) {
  'use strict';

  var instance;

  describe('financesV0', function() {
    describe('FinancialEventGroup', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForFinances.FinancialEventGroup();
      });

      it('should create an instance of FinancialEventGroup', function() {
        // TODO: update the code to test FinancialEventGroup
        expect(instance).to.be.a(SellingPartnerApiForFinances.FinancialEventGroup);
      });

      it('should have the property financialEventGroupId (base name: "FinancialEventGroupId")', function() {
        // TODO: update the code to test the property financialEventGroupId
        expect(instance).to.have.property('financialEventGroupId');
        // expect(instance.financialEventGroupId).to.be(expectedValueLiteral);
      });

      it('should have the property processingStatus (base name: "ProcessingStatus")', function() {
        // TODO: update the code to test the property processingStatus
        expect(instance).to.have.property('processingStatus');
        // expect(instance.processingStatus).to.be(expectedValueLiteral);
      });

      it('should have the property fundTransferStatus (base name: "FundTransferStatus")', function() {
        // TODO: update the code to test the property fundTransferStatus
        expect(instance).to.have.property('fundTransferStatus');
        // expect(instance.fundTransferStatus).to.be(expectedValueLiteral);
      });

      it('should have the property originalTotal (base name: "OriginalTotal")', function() {
        // TODO: update the code to test the property originalTotal
        expect(instance).to.have.property('originalTotal');
        // expect(instance.originalTotal).to.be(expectedValueLiteral);
      });

      it('should have the property convertedTotal (base name: "ConvertedTotal")', function() {
        // TODO: update the code to test the property convertedTotal
        expect(instance).to.have.property('convertedTotal');
        // expect(instance.convertedTotal).to.be(expectedValueLiteral);
      });

      it('should have the property fundTransferDate (base name: "FundTransferDate")', function() {
        // TODO: update the code to test the property fundTransferDate
        expect(instance).to.have.property('fundTransferDate');
        // expect(instance.fundTransferDate).to.be(expectedValueLiteral);
      });

      it('should have the property traceId (base name: "TraceId")', function() {
        // TODO: update the code to test the property traceId
        expect(instance).to.have.property('traceId');
        // expect(instance.traceId).to.be(expectedValueLiteral);
      });

      it('should have the property accountTail (base name: "AccountTail")', function() {
        // TODO: update the code to test the property accountTail
        expect(instance).to.have.property('accountTail');
        // expect(instance.accountTail).to.be(expectedValueLiteral);
      });

      it('should have the property beginningBalance (base name: "BeginningBalance")', function() {
        // TODO: update the code to test the property beginningBalance
        expect(instance).to.have.property('beginningBalance');
        // expect(instance.beginningBalance).to.be(expectedValueLiteral);
      });

      it('should have the property financialEventGroupStart (base name: "FinancialEventGroupStart")', function() {
        // TODO: update the code to test the property financialEventGroupStart
        expect(instance).to.have.property('financialEventGroupStart');
        // expect(instance.financialEventGroupStart).to.be(expectedValueLiteral);
      });

      it('should have the property financialEventGroupEnd (base name: "FinancialEventGroupEnd")', function() {
        // TODO: update the code to test the property financialEventGroupEnd
        expect(instance).to.have.property('financialEventGroupEnd');
        // expect(instance.financialEventGroupEnd).to.be(expectedValueLiteral);
      });

    });
  });

}));
