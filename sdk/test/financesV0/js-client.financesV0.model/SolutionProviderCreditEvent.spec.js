/*
 * Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information that is relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range. 
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/financesV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/financesV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFinances);
  }
}(this, function(expect, SellingPartnerApiForFinances) {
  'use strict';

  var instance;

  describe('financesV0', function() {
    describe('SolutionProviderCreditEvent', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForFinances.SolutionProviderCreditEvent();
      });

      it('should create an instance of SolutionProviderCreditEvent', function() {
        // TODO: update the code to test SolutionProviderCreditEvent
        expect(instance).to.be.a(SellingPartnerApiForFinances.SolutionProviderCreditEvent);
      });

      it('should have the property providerTransactionType (base name: "ProviderTransactionType")', function() {
        // TODO: update the code to test the property providerTransactionType
        expect(instance).to.have.property('providerTransactionType');
        // expect(instance.providerTransactionType).to.be(expectedValueLiteral);
      });

      it('should have the property sellerOrderId (base name: "SellerOrderId")', function() {
        // TODO: update the code to test the property sellerOrderId
        expect(instance).to.have.property('sellerOrderId');
        // expect(instance.sellerOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property marketplaceId (base name: "MarketplaceId")', function() {
        // TODO: update the code to test the property marketplaceId
        expect(instance).to.have.property('marketplaceId');
        // expect(instance.marketplaceId).to.be(expectedValueLiteral);
      });

      it('should have the property marketplaceCountryCode (base name: "MarketplaceCountryCode")', function() {
        // TODO: update the code to test the property marketplaceCountryCode
        expect(instance).to.have.property('marketplaceCountryCode');
        // expect(instance.marketplaceCountryCode).to.be(expectedValueLiteral);
      });

      it('should have the property sellerId (base name: "SellerId")', function() {
        // TODO: update the code to test the property sellerId
        expect(instance).to.have.property('sellerId');
        // expect(instance.sellerId).to.be(expectedValueLiteral);
      });

      it('should have the property sellerStoreName (base name: "SellerStoreName")', function() {
        // TODO: update the code to test the property sellerStoreName
        expect(instance).to.have.property('sellerStoreName');
        // expect(instance.sellerStoreName).to.be(expectedValueLiteral);
      });

      it('should have the property providerId (base name: "ProviderId")', function() {
        // TODO: update the code to test the property providerId
        expect(instance).to.have.property('providerId');
        // expect(instance.providerId).to.be(expectedValueLiteral);
      });

      it('should have the property providerStoreName (base name: "ProviderStoreName")', function() {
        // TODO: update the code to test the property providerStoreName
        expect(instance).to.have.property('providerStoreName');
        // expect(instance.providerStoreName).to.be(expectedValueLiteral);
      });

      it('should have the property transactionAmount (base name: "TransactionAmount")', function() {
        // TODO: update the code to test the property transactionAmount
        expect(instance).to.have.property('transactionAmount');
        // expect(instance.transactionAmount).to.be(expectedValueLiteral);
      });

      it('should have the property transactionCreationDate (base name: "TransactionCreationDate")', function() {
        // TODO: update the code to test the property transactionCreationDate
        expect(instance).to.have.property('transactionCreationDate');
        // expect(instance.transactionCreationDate).to.be(expectedValueLiteral);
      });

    });
  });

}));
