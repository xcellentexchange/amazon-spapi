/*
 * Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information that is relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range. 
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/financesV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/financesV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFinances);
  }
}(this, function(expect, SellingPartnerApiForFinances) {
  'use strict';

  var instance;

  describe('financesV0', function() {
    describe('SellerDealPaymentEvent', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForFinances.SellerDealPaymentEvent();
      });

      it('should create an instance of SellerDealPaymentEvent', function() {
        // TODO: update the code to test SellerDealPaymentEvent
        expect(instance).to.be.a(SellingPartnerApiForFinances.SellerDealPaymentEvent);
      });

      it('should have the property postedDate (base name: "postedDate")', function() {
        // TODO: update the code to test the property postedDate
        expect(instance).to.have.property('postedDate');
        // expect(instance.postedDate).to.be(expectedValueLiteral);
      });

      it('should have the property dealId (base name: "dealId")', function() {
        // TODO: update the code to test the property dealId
        expect(instance).to.have.property('dealId');
        // expect(instance.dealId).to.be(expectedValueLiteral);
      });

      it('should have the property dealDescription (base name: "dealDescription")', function() {
        // TODO: update the code to test the property dealDescription
        expect(instance).to.have.property('dealDescription');
        // expect(instance.dealDescription).to.be(expectedValueLiteral);
      });

      it('should have the property eventType (base name: "eventType")', function() {
        // TODO: update the code to test the property eventType
        expect(instance).to.have.property('eventType');
        // expect(instance.eventType).to.be(expectedValueLiteral);
      });

      it('should have the property feeType (base name: "feeType")', function() {
        // TODO: update the code to test the property feeType
        expect(instance).to.have.property('feeType');
        // expect(instance.feeType).to.be(expectedValueLiteral);
      });

      it('should have the property feeAmount (base name: "feeAmount")', function() {
        // TODO: update the code to test the property feeAmount
        expect(instance).to.have.property('feeAmount');
        // expect(instance.feeAmount).to.be(expectedValueLiteral);
      });

      it('should have the property taxAmount (base name: "taxAmount")', function() {
        // TODO: update the code to test the property taxAmount
        expect(instance).to.have.property('taxAmount');
        // expect(instance.taxAmount).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "totalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

    });
  });

}));
