/*
 * Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information that is relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range. 
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/financesV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/financesV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFinances);
  }
}(this, function(expect, SellingPartnerApiForFinances) {
  'use strict';

  var instance;

  describe('financesV0', function() {
    describe('PayWithAmazonEvent', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForFinances.PayWithAmazonEvent();
      });

      it('should create an instance of PayWithAmazonEvent', function() {
        // TODO: update the code to test PayWithAmazonEvent
        expect(instance).to.be.a(SellingPartnerApiForFinances.PayWithAmazonEvent);
      });

      it('should have the property sellerOrderId (base name: "SellerOrderId")', function() {
        // TODO: update the code to test the property sellerOrderId
        expect(instance).to.have.property('sellerOrderId');
        // expect(instance.sellerOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property transactionPostedDate (base name: "TransactionPostedDate")', function() {
        // TODO: update the code to test the property transactionPostedDate
        expect(instance).to.have.property('transactionPostedDate');
        // expect(instance.transactionPostedDate).to.be(expectedValueLiteral);
      });

      it('should have the property businessObjectType (base name: "BusinessObjectType")', function() {
        // TODO: update the code to test the property businessObjectType
        expect(instance).to.have.property('businessObjectType');
        // expect(instance.businessObjectType).to.be(expectedValueLiteral);
      });

      it('should have the property salesChannel (base name: "SalesChannel")', function() {
        // TODO: update the code to test the property salesChannel
        expect(instance).to.have.property('salesChannel');
        // expect(instance.salesChannel).to.be(expectedValueLiteral);
      });

      it('should have the property charge (base name: "Charge")', function() {
        // TODO: update the code to test the property charge
        expect(instance).to.have.property('charge');
        // expect(instance.charge).to.be(expectedValueLiteral);
      });

      it('should have the property feeList (base name: "FeeList")', function() {
        // TODO: update the code to test the property feeList
        expect(instance).to.have.property('feeList');
        // expect(instance.feeList).to.be(expectedValueLiteral);
      });

      it('should have the property paymentAmountType (base name: "PaymentAmountType")', function() {
        // TODO: update the code to test the property paymentAmountType
        expect(instance).to.have.property('paymentAmountType');
        // expect(instance.paymentAmountType).to.be(expectedValueLiteral);
      });

      it('should have the property amountDescription (base name: "AmountDescription")', function() {
        // TODO: update the code to test the property amountDescription
        expect(instance).to.have.property('amountDescription');
        // expect(instance.amountDescription).to.be(expectedValueLiteral);
      });

      it('should have the property fulfillmentChannel (base name: "FulfillmentChannel")', function() {
        // TODO: update the code to test the property fulfillmentChannel
        expect(instance).to.have.property('fulfillmentChannel');
        // expect(instance.fulfillmentChannel).to.be(expectedValueLiteral);
      });

      it('should have the property storeName (base name: "StoreName")', function() {
        // TODO: update the code to test the property storeName
        expect(instance).to.have.property('storeName');
        // expect(instance.storeName).to.be(expectedValueLiteral);
      });

    });
  });

}));
