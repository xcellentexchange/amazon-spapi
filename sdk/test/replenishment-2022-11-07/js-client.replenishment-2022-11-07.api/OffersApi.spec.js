/*
 * Selling Partner API for Replenishment
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * OpenAPI spec version: 2022-11-07
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/replenishment-2022-11-07/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/replenishment-2022-11-07/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForReplenishment);
  }
}(this, function(expect, SellingPartnerApiForReplenishment) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForReplenishment.OffersApi();
  });

  describe('replenishment-2022-11-07', function() {
    describe('OffersApi', function() {
      describe('listOfferMetrics', function() {
        it('should call listOfferMetrics successfully', function(done) {
          // TODO: uncomment, update parameter values for listOfferMetrics call and complete the assertions
          /*
          var opts = {};
          opts.body = new SellingPartnerApiForReplenishment.ListOfferMetricsRequest();
          opts.body.pagination = new SellingPartnerApiForReplenishment.ListOfferMetricsRequestPagination();
          opts.body.pagination.limit = "0";
          opts.body.pagination.offset = "0";
          opts.body.sort = new SellingPartnerApiForReplenishment.ListOfferMetricsRequestSort();
          opts.body.sort.order = new SellingPartnerApiForReplenishment.SortOrder();
          opts.body.sort.key = new SellingPartnerApiForReplenishment.ListOfferMetricsSortKey();
          opts.body.filters = new SellingPartnerApiForReplenishment.ListOfferMetricsRequestFilters();
          opts.body.filters.aggregationFrequency = new SellingPartnerApiForReplenishment.AggregationFrequency();
          opts.body.filters.timeInterval = new SellingPartnerApiForReplenishment.TimeInterval();
          opts.body.filters.timeInterval.startDate = new Date();
          opts.body.filters.timeInterval.endDate = new Date();
          opts.body.filters.timePeriodType = new SellingPartnerApiForReplenishment.TimePeriodType();
          opts.body.filters.marketplaceId = new SellingPartnerApiForReplenishment.MarketplaceId();
          opts.body.filters.programTypes = new SellingPartnerApiForReplenishment.ProgramTypes();
          opts.body.filters.asins = [""];

          instance.listOfferMetrics(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReplenishment.ListOfferMetricsResponse);
            {
              let dataCtr = data.offers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForReplenishment.ListOfferMetricsResponseOffer);
                expect(data.asin).to.be.a('string');
                // expect(data.asin).to.be("");
                expect(data.notDeliveredDueToOOS).to.be.a('number');
                // expect(data.notDeliveredDueToOOS).to.be(0.0);
                expect(data.totalSubscriptionsRevenue).to.be.a('number');
                // expect(data.totalSubscriptionsRevenue).to.be(0.0);
                expect(data.shippedSubscriptionUnits).to.be.a('number');
                // expect(data.shippedSubscriptionUnits).to.be();
                expect(data.activeSubscriptions).to.be.a('number');
                // expect(data.activeSubscriptions).to.be();
                expect(data.revenuePenetration).to.be.a('number');
                // expect(data.revenuePenetration).to.be(0.0);
                expect(data.lostRevenueDueToOOS).to.be.a('number');
                // expect(data.lostRevenueDueToOOS).to.be(0.0);
                expect(data.couponsRevenuePenetration).to.be.a('number');
                // expect(data.couponsRevenuePenetration).to.be(0.0);
                expect(data.next30DayTotalSubscriptionsRevenue).to.be.a('number');
                // expect(data.next30DayTotalSubscriptionsRevenue).to.be(0.0);
                expect(data.next60DayTotalSubscriptionsRevenue).to.be.a('number');
                // expect(data.next60DayTotalSubscriptionsRevenue).to.be(0.0);
                expect(data.next90DayTotalSubscriptionsRevenue).to.be.a('number');
                // expect(data.next90DayTotalSubscriptionsRevenue).to.be(0.0);
                expect(data.next30DayShippedSubscriptionUnits).to.be.a('number');
                // expect(data.next30DayShippedSubscriptionUnits).to.be();
                expect(data.next60DayShippedSubscriptionUnits).to.be.a('number');
                // expect(data.next60DayShippedSubscriptionUnits).to.be();
                expect(data.next90DayShippedSubscriptionUnits).to.be.a('number');
                // expect(data.next90DayShippedSubscriptionUnits).to.be();
                expect(data.timeInterval).to.be.a(SellingPartnerApiForReplenishment.TimeInterval);
                      expect(data.timeInterval.startDate).to.be.a(Date);
                  // expect(data.timeInterval.startDate).to.be(new Date());
                  expect(data.timeInterval.endDate).to.be.a(Date);
                  // expect(data.timeInterval.endDate).to.be(new Date());
                expect(data.currencyCode).to.be.a('string');
                // expect(data.currencyCode).to.be("");
              }
            }
            expect(data.pagination).to.be.a(SellingPartnerApiForReplenishment.PaginationResponse);
                  expect(data.pagination.totalResults).to.be.a('number');
              // expect(data.pagination.totalResults).to.be("0");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listOffers', function() {
        it('should call listOffers successfully', function(done) {
          // TODO: uncomment, update parameter values for listOffers call and complete the assertions
          /*
          var opts = {};
          opts.body = new SellingPartnerApiForReplenishment.ListOffersRequest();
          opts.body.pagination = new SellingPartnerApiForReplenishment.ListOffersRequestPagination();
          opts.body.pagination.limit = "0";
          opts.body.pagination.offset = "0";
          opts.body.filters = new SellingPartnerApiForReplenishment.ListOffersRequestFilters();
          opts.body.filters.marketplaceId = new SellingPartnerApiForReplenishment.MarketplaceId();
          opts.body.filters.skus = [""];
          opts.body.filters.asins = [""];
          opts.body.filters.eligibilities = [new SellingPartnerApiForReplenishment.EligibilityStatus()];
          opts.body.filters.preferences = new SellingPartnerApiForReplenishment.Preference();
          opts.body.filters.preferences.autoEnrollment = [new SellingPartnerApiForReplenishment.AutoEnrollmentPreference()];
          opts.body.filters.promotions = new SellingPartnerApiForReplenishment.Promotion();
          opts.body.filters.promotions.sellingPartnerFundedBaseDiscount = new SellingPartnerApiForReplenishment.DiscountFunding();
          opts.body.filters.promotions.sellingPartnerFundedBaseDiscount.percentage = [];
          opts.body.filters.promotions.sellingPartnerFundedTieredDiscount = new SellingPartnerApiForReplenishment.DiscountFunding();
          opts.body.filters.promotions.sellingPartnerFundedTieredDiscount.percentage = [];
          opts.body.filters.promotions.amazonFundedBaseDiscount = new SellingPartnerApiForReplenishment.DiscountFunding();
          opts.body.filters.promotions.amazonFundedBaseDiscount.percentage = [];
          opts.body.filters.promotions.amazonFundedTieredDiscount = new SellingPartnerApiForReplenishment.DiscountFunding();
          opts.body.filters.promotions.amazonFundedTieredDiscount.percentage = [];
          opts.body.filters.programTypes = new SellingPartnerApiForReplenishment.ProgramTypes();
          opts.body.sort = new SellingPartnerApiForReplenishment.ListOffersRequestSort();
          opts.body.sort.order = new SellingPartnerApiForReplenishment.SortOrder();
          opts.body.sort.key = new SellingPartnerApiForReplenishment.ListOffersSortKey();

          instance.listOffers(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReplenishment.ListOffersResponse);
            {
              let dataCtr = data.offers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForReplenishment.ListOffersResponseOffer);
                expect(data.sku).to.be.a('string');
                // expect(data.sku).to.be("");
                expect(data.asin).to.be.a('string');
                // expect(data.asin).to.be("");
                expect(data.marketplaceId).to.be.a(SellingPartnerApiForReplenishment.MarketplaceId);
                    expect(data.eligibility).to.be.a(SellingPartnerApiForReplenishment.EligibilityStatus);
                    expect(data.offerProgramConfiguration).to.be.a(SellingPartnerApiForReplenishment.OfferProgramConfiguration);
                      expect(data.offerProgramConfiguration.preferences).to.be.a(SellingPartnerApiForReplenishment.OfferProgramConfigurationPreferences);
                        expect(data.offerProgramConfiguration.preferences.autoEnrollment).to.be.a(SellingPartnerApiForReplenishment.AutoEnrollmentPreference);
            
                  expect(data.offerProgramConfiguration.promotions).to.be.a(SellingPartnerApiForReplenishment.OfferProgramConfigurationPromotions);
                        expect(data.offerProgramConfiguration.promotions.sellingPartnerFundedBaseDiscount).to.be.a(SellingPartnerApiForReplenishment.OfferProgramConfigurationPromotionsDiscountFunding);
                          expect(data.offerProgramConfiguration.promotions.sellingPartnerFundedBaseDiscount.percentage).to.be.a('number');
                      // expect(data.offerProgramConfiguration.promotions.sellingPartnerFundedBaseDiscount.percentage).to.be();
                    expect(data.offerProgramConfiguration.promotions.sellingPartnerFundedTieredDiscount).to.be.a(SellingPartnerApiForReplenishment.OfferProgramConfigurationPromotionsDiscountFunding);
                          expect(data.offerProgramConfiguration.promotions.sellingPartnerFundedTieredDiscount.percentage).to.be.a('number');
                      // expect(data.offerProgramConfiguration.promotions.sellingPartnerFundedTieredDiscount.percentage).to.be();
                    expect(data.offerProgramConfiguration.promotions.amazonFundedBaseDiscount).to.be.a(SellingPartnerApiForReplenishment.OfferProgramConfigurationPromotionsDiscountFunding);
                          expect(data.offerProgramConfiguration.promotions.amazonFundedBaseDiscount.percentage).to.be.a('number');
                      // expect(data.offerProgramConfiguration.promotions.amazonFundedBaseDiscount.percentage).to.be();
                    expect(data.offerProgramConfiguration.promotions.amazonFundedTieredDiscount).to.be.a(SellingPartnerApiForReplenishment.OfferProgramConfigurationPromotionsDiscountFunding);
                          expect(data.offerProgramConfiguration.promotions.amazonFundedTieredDiscount.percentage).to.be.a('number');
                      // expect(data.offerProgramConfiguration.promotions.amazonFundedTieredDiscount.percentage).to.be();
                  expect(data.offerProgramConfiguration.enrollmentMethod).to.be.a(SellingPartnerApiForReplenishment.EnrollmentMethod);
          
                expect(data.programType).to.be.a(SellingPartnerApiForReplenishment.ProgramType);
                    {
                  let dataCtr = data.vendorCodes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.pagination).to.be.a(SellingPartnerApiForReplenishment.PaginationResponse);
                  expect(data.pagination.totalResults).to.be.a('number');
              // expect(data.pagination.totalResults).to.be("0");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
