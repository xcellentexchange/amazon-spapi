/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/productPricingV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/productPricingV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForPricing);
  }
}(this, function(expect, SellingPartnerApiForPricing) {
  'use strict';

  var instance;

  describe('productPricingV0', function() {
    describe('OfferDetail', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForPricing.OfferDetail();
      });

      it('should create an instance of OfferDetail', function() {
        // TODO: update the code to test OfferDetail
        expect(instance).to.be.a(SellingPartnerApiForPricing.OfferDetail);
      });

      it('should have the property myOffer (base name: "MyOffer")', function() {
        // TODO: update the code to test the property myOffer
        expect(instance).to.have.property('myOffer');
        // expect(instance.myOffer).to.be(expectedValueLiteral);
      });

      it('should have the property offerType (base name: "offerType")', function() {
        // TODO: update the code to test the property offerType
        expect(instance).to.have.property('offerType');
        // expect(instance.offerType).to.be(expectedValueLiteral);
      });

      it('should have the property subCondition (base name: "SubCondition")', function() {
        // TODO: update the code to test the property subCondition
        expect(instance).to.have.property('subCondition');
        // expect(instance.subCondition).to.be(expectedValueLiteral);
      });

      it('should have the property sellerId (base name: "SellerId")', function() {
        // TODO: update the code to test the property sellerId
        expect(instance).to.have.property('sellerId');
        // expect(instance.sellerId).to.be(expectedValueLiteral);
      });

      it('should have the property conditionNotes (base name: "ConditionNotes")', function() {
        // TODO: update the code to test the property conditionNotes
        expect(instance).to.have.property('conditionNotes');
        // expect(instance.conditionNotes).to.be(expectedValueLiteral);
      });

      it('should have the property sellerFeedbackRating (base name: "SellerFeedbackRating")', function() {
        // TODO: update the code to test the property sellerFeedbackRating
        expect(instance).to.have.property('sellerFeedbackRating');
        // expect(instance.sellerFeedbackRating).to.be(expectedValueLiteral);
      });

      it('should have the property shippingTime (base name: "ShippingTime")', function() {
        // TODO: update the code to test the property shippingTime
        expect(instance).to.have.property('shippingTime');
        // expect(instance.shippingTime).to.be(expectedValueLiteral);
      });

      it('should have the property listingPrice (base name: "ListingPrice")', function() {
        // TODO: update the code to test the property listingPrice
        expect(instance).to.have.property('listingPrice');
        // expect(instance.listingPrice).to.be(expectedValueLiteral);
      });

      it('should have the property quantityDiscountPrices (base name: "quantityDiscountPrices")', function() {
        // TODO: update the code to test the property quantityDiscountPrices
        expect(instance).to.have.property('quantityDiscountPrices');
        // expect(instance.quantityDiscountPrices).to.be(expectedValueLiteral);
      });

      it('should have the property points (base name: "Points")', function() {
        // TODO: update the code to test the property points
        expect(instance).to.have.property('points');
        // expect(instance.points).to.be(expectedValueLiteral);
      });

      it('should have the property shipping (base name: "Shipping")', function() {
        // TODO: update the code to test the property shipping
        expect(instance).to.have.property('shipping');
        // expect(instance.shipping).to.be(expectedValueLiteral);
      });

      it('should have the property shipsFrom (base name: "ShipsFrom")', function() {
        // TODO: update the code to test the property shipsFrom
        expect(instance).to.have.property('shipsFrom');
        // expect(instance.shipsFrom).to.be(expectedValueLiteral);
      });

      it('should have the property isFulfilledByAmazon (base name: "IsFulfilledByAmazon")', function() {
        // TODO: update the code to test the property isFulfilledByAmazon
        expect(instance).to.have.property('isFulfilledByAmazon');
        // expect(instance.isFulfilledByAmazon).to.be(expectedValueLiteral);
      });

      it('should have the property primeInformation (base name: "PrimeInformation")', function() {
        // TODO: update the code to test the property primeInformation
        expect(instance).to.have.property('primeInformation');
        // expect(instance.primeInformation).to.be(expectedValueLiteral);
      });

      it('should have the property isBuyBoxWinner (base name: "IsBuyBoxWinner")', function() {
        // TODO: update the code to test the property isBuyBoxWinner
        expect(instance).to.have.property('isBuyBoxWinner');
        // expect(instance.isBuyBoxWinner).to.be(expectedValueLiteral);
      });

      it('should have the property isFeaturedMerchant (base name: "IsFeaturedMerchant")', function() {
        // TODO: update the code to test the property isFeaturedMerchant
        expect(instance).to.have.property('isFeaturedMerchant');
        // expect(instance.isFeaturedMerchant).to.be(expectedValueLiteral);
      });

    });
  });

}));
