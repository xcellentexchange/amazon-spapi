/*
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/fulfillmentInbound_2024-03-20/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/fulfillmentInbound_2024-03-20/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForFbaInboundOperations);
  }
}(this, function(expect, TheSellingPartnerApiForFbaInboundOperations) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheSellingPartnerApiForFbaInboundOperations.FbaInboundApi();
  });

  describe('fulfillmentInbound_2024-03-20', function() {
    describe('FbaInboundApi', function() {
      describe('cancelInboundPlan', function() {
        it('should call cancelInboundPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelInboundPlan call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";

          instance.cancelInboundPlan(inboundPlanId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.CancelInboundPlanResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelSelfShipAppointment', function() {
        it('should call cancelSelfShipAppointment successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelSelfShipAppointment call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.CancelSelfShipAppointmentRequest();
          body.reasonComment = new TheSellingPartnerApiForFbaInboundOperations.ReasonComment();

          instance.cancelSelfShipAppointment(inboundPlanId, shipmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.CancelSelfShipAppointmentResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('confirmDeliveryWindowOptions', function() {
        it('should call confirmDeliveryWindowOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for confirmDeliveryWindowOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var deliveryWindowOptionId = "deliveryWindowOptionId_example";

          instance.confirmDeliveryWindowOptions(inboundPlanId, shipmentId, deliveryWindowOptionId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ConfirmDeliveryWindowOptionsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('confirmPackingOption', function() {
        it('should call confirmPackingOption successfully', function(done) {
          // TODO: uncomment, update parameter values for confirmPackingOption call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var packingOptionId = "packingOptionId_example";

          instance.confirmPackingOption(inboundPlanId, packingOptionId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ConfirmPackingOptionResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('confirmPlacementOption', function() {
        it('should call confirmPlacementOption successfully', function(done) {
          // TODO: uncomment, update parameter values for confirmPlacementOption call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var placementOptionId = "placementOptionId_example";

          instance.confirmPlacementOption(inboundPlanId, placementOptionId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ConfirmPlacementOptionResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('confirmShipmentContentUpdatePreview', function() {
        it('should call confirmShipmentContentUpdatePreview successfully', function(done) {
          // TODO: uncomment, update parameter values for confirmShipmentContentUpdatePreview call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var contentUpdatePreviewId = "contentUpdatePreviewId_example";

          instance.confirmShipmentContentUpdatePreview(inboundPlanId, shipmentId, contentUpdatePreviewId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ConfirmShipmentContentUpdatePreviewResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('confirmTransportationOptions', function() {
        it('should call confirmTransportationOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for confirmTransportationOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.ConfirmTransportationOptionsRequest();
          body.transportationSelections = [new TheSellingPartnerApiForFbaInboundOperations.TransportationSelection()];
          body.transportationSelections[0].contactInformation = new TheSellingPartnerApiForFbaInboundOperations.ContactInformation();
          body.transportationSelections[0].contactInformation.email = "";
          body.transportationSelections[0].contactInformation.name = "";
          body.transportationSelections[0].contactInformation.phoneNumber = "";
          body.transportationSelections[0].shipmentId = "";
          body.transportationSelections[0].transportationOptionId = "";

          instance.confirmTransportationOptions(inboundPlanId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ConfirmTransportationOptionsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createInboundPlan', function() {
        it('should call createInboundPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for createInboundPlan call and complete the assertions
          /*
          var body = new TheSellingPartnerApiForFbaInboundOperations.CreateInboundPlanRequest();
          body.destinationMarketplaces = [""];
          body.items = [new TheSellingPartnerApiForFbaInboundOperations.ItemInput()];
          body.items[0].expiration = "";
          body.items[0].labelOwner = new TheSellingPartnerApiForFbaInboundOperations.LabelOwner();
          body.items[0].manufacturingLotCode = "";
          body.items[0].msku = "";
          body.items[0].prepOwner = new TheSellingPartnerApiForFbaInboundOperations.PrepOwner();
          body.items[0].quantity = 0;
          body.name = "";
          body.sourceAddress = new TheSellingPartnerApiForFbaInboundOperations.AddressInput();
          body.sourceAddress.addressLine1 = "";
          body.sourceAddress.addressLine2 = "";
          body.sourceAddress.city = "";
          body.sourceAddress.companyName = "";
          body.sourceAddress.countryCode = "";
          body.sourceAddress.email = "";
          body.sourceAddress.name = "";
          body.sourceAddress.phoneNumber = "";
          body.sourceAddress.postalCode = "";
          body.sourceAddress.stateOrProvinceCode = "";

          instance.createInboundPlan(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.CreateInboundPlanResponse);
            expect(data.inboundPlanId).to.be.a('string');
            // expect(data.inboundPlanId).to.be("");
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createMarketplaceItemLabels', function() {
        it('should call createMarketplaceItemLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for createMarketplaceItemLabels call and complete the assertions
          /*
          var body = new TheSellingPartnerApiForFbaInboundOperations.CreateMarketplaceItemLabelsRequest();
          body.height = ;
          body.labelType = new TheSellingPartnerApiForFbaInboundOperations.LabelPrintType();
          body.localeCode = "";
          body.marketplaceId = "";
          body.mskuQuantities = [new TheSellingPartnerApiForFbaInboundOperations.MskuQuantity()];
          body.mskuQuantities[0].msku = "";
          body.mskuQuantities[0].quantity = 0;
          body.pageType = new TheSellingPartnerApiForFbaInboundOperations.ItemLabelPageType();
          body.width = ;

          instance.createMarketplaceItemLabels(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.CreateMarketplaceItemLabelsResponse);
            {
              let dataCtr = data.documentDownloads;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.DocumentDownload);
                expect(data.downloadType).to.be.a('string');
                // expect(data.downloadType).to.be("");
                expect(data.expiration).to.be.a(Date);
                // expect(data.expiration).to.be(new Date());
                expect(data.uri).to.be.a('string');
                // expect(data.uri).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generateDeliveryWindowOptions', function() {
        it('should call generateDeliveryWindowOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for generateDeliveryWindowOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";

          instance.generateDeliveryWindowOptions(inboundPlanId, shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.GenerateDeliveryWindowOptionsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generatePackingOptions', function() {
        it('should call generatePackingOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for generatePackingOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";

          instance.generatePackingOptions(inboundPlanId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.GeneratePackingOptionsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generatePlacementOptions', function() {
        it('should call generatePlacementOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for generatePlacementOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.GeneratePlacementOptionsRequest();
          body.customPlacement = [new TheSellingPartnerApiForFbaInboundOperations.CustomPlacementInput()];
          body.customPlacement[0].items = [new TheSellingPartnerApiForFbaInboundOperations.ItemInput()];
          body.customPlacement[0].items[0].expiration = "";
          body.customPlacement[0].items[0].labelOwner = new TheSellingPartnerApiForFbaInboundOperations.LabelOwner();
          body.customPlacement[0].items[0].manufacturingLotCode = "";
          body.customPlacement[0].items[0].msku = "";
          body.customPlacement[0].items[0].prepOwner = new TheSellingPartnerApiForFbaInboundOperations.PrepOwner();
          body.customPlacement[0].items[0].quantity = 0;
          body.customPlacement[0].warehouseId = "";

          instance.generatePlacementOptions(inboundPlanId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.GeneratePlacementOptionsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generateSelfShipAppointmentSlots', function() {
        it('should call generateSelfShipAppointmentSlots successfully', function(done) {
          // TODO: uncomment, update parameter values for generateSelfShipAppointmentSlots call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.GenerateSelfShipAppointmentSlotsRequest();
          body.desiredEndDate = new Date();
          body.desiredStartDate = new Date();

          instance.generateSelfShipAppointmentSlots(inboundPlanId, shipmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.GenerateSelfShipAppointmentSlotsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generateShipmentContentUpdatePreviews', function() {
        it('should call generateShipmentContentUpdatePreviews successfully', function(done) {
          // TODO: uncomment, update parameter values for generateShipmentContentUpdatePreviews call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.GenerateShipmentContentUpdatePreviewsRequest();
          body.boxes = [new TheSellingPartnerApiForFbaInboundOperations.BoxUpdateInput()];
          body.boxes[0].contentInformationSource = new TheSellingPartnerApiForFbaInboundOperations.BoxContentInformationSource();
          body.boxes[0].dimensions = new TheSellingPartnerApiForFbaInboundOperations.Dimensions();
          body.boxes[0].dimensions.height = ;
          body.boxes[0].dimensions.length = ;
          body.boxes[0].dimensions.unitOfMeasurement = new TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement();
          body.boxes[0].dimensions.width = ;
          body.boxes[0].items = [new TheSellingPartnerApiForFbaInboundOperations.ItemInput()];
          body.boxes[0].items[0].expiration = "";
          body.boxes[0].items[0].labelOwner = new TheSellingPartnerApiForFbaInboundOperations.LabelOwner();
          body.boxes[0].items[0].manufacturingLotCode = "";
          body.boxes[0].items[0].msku = "";
          body.boxes[0].items[0].prepOwner = new TheSellingPartnerApiForFbaInboundOperations.PrepOwner();
          body.boxes[0].items[0].quantity = 0;
          body.boxes[0].packageId = "";
          body.boxes[0].quantity = 0;
          body.boxes[0].weight = new TheSellingPartnerApiForFbaInboundOperations.Weight();
          body.boxes[0].weight.unit = new TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight();
          body.boxes[0].weight.value = ;
          body.items = [new TheSellingPartnerApiForFbaInboundOperations.ItemInput()];
          body.items[0].expiration = "";
          body.items[0].labelOwner = new TheSellingPartnerApiForFbaInboundOperations.LabelOwner();
          body.items[0].manufacturingLotCode = "";
          body.items[0].msku = "";
          body.items[0].prepOwner = new TheSellingPartnerApiForFbaInboundOperations.PrepOwner();
          body.items[0].quantity = 0;

          instance.generateShipmentContentUpdatePreviews(inboundPlanId, shipmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.GenerateShipmentContentUpdatePreviewsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generateTransportationOptions', function() {
        it('should call generateTransportationOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for generateTransportationOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.GenerateTransportationOptionsRequest();
          body.placementOptionId = "";
          body.shipmentTransportationConfigurations = [new TheSellingPartnerApiForFbaInboundOperations.ShipmentTransportationConfiguration()];
          body.shipmentTransportationConfigurations[0].contactInformation = new TheSellingPartnerApiForFbaInboundOperations.ContactInformation();
          body.shipmentTransportationConfigurations[0].contactInformation.email = "";
          body.shipmentTransportationConfigurations[0].contactInformation.name = "";
          body.shipmentTransportationConfigurations[0].contactInformation.phoneNumber = "";
          body.shipmentTransportationConfigurations[0].freightInformation = new TheSellingPartnerApiForFbaInboundOperations.FreightInformation();
          body.shipmentTransportationConfigurations[0].freightInformation.declaredValue = new TheSellingPartnerApiForFbaInboundOperations.Currency();
          body.shipmentTransportationConfigurations[0].freightInformation.declaredValue.amount = ;
          body.shipmentTransportationConfigurations[0].freightInformation.declaredValue.code = "";
          body.shipmentTransportationConfigurations[0].freightInformation.freightClass = "";
          body.shipmentTransportationConfigurations[0].pallets = [new TheSellingPartnerApiForFbaInboundOperations.PalletInput()];
          body.shipmentTransportationConfigurations[0].pallets[0].dimensions = new TheSellingPartnerApiForFbaInboundOperations.Dimensions();
          body.shipmentTransportationConfigurations[0].pallets[0].dimensions.height = ;
          body.shipmentTransportationConfigurations[0].pallets[0].dimensions.length = ;
          body.shipmentTransportationConfigurations[0].pallets[0].dimensions.unitOfMeasurement = new TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement();
          body.shipmentTransportationConfigurations[0].pallets[0].dimensions.width = ;
          body.shipmentTransportationConfigurations[0].pallets[0].quantity = 0;
          body.shipmentTransportationConfigurations[0].pallets[0].stackability = new TheSellingPartnerApiForFbaInboundOperations.Stackability();
          body.shipmentTransportationConfigurations[0].pallets[0].weight = new TheSellingPartnerApiForFbaInboundOperations.Weight();
          body.shipmentTransportationConfigurations[0].pallets[0].weight.unit = new TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight();
          body.shipmentTransportationConfigurations[0].pallets[0].weight.value = ;
          body.shipmentTransportationConfigurations[0].readyToShipWindow = new TheSellingPartnerApiForFbaInboundOperations.WindowInput();
          body.shipmentTransportationConfigurations[0].readyToShipWindow.start = new Date();
          body.shipmentTransportationConfigurations[0].shipmentId = "";

          instance.generateTransportationOptions(inboundPlanId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.GenerateTransportationOptionsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeliveryChallanDocument', function() {
        it('should call getDeliveryChallanDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeliveryChallanDocument call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";

          instance.getDeliveryChallanDocument(inboundPlanId, shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.GetDeliveryChallanDocumentResponse);
            expect(data.documentDownload).to.be.a(TheSellingPartnerApiForFbaInboundOperations.DocumentDownload);
                  expect(data.documentDownload.downloadType).to.be.a('string');
              // expect(data.documentDownload.downloadType).to.be("");
              expect(data.documentDownload.expiration).to.be.a(Date);
              // expect(data.documentDownload.expiration).to.be(new Date());
              expect(data.documentDownload.uri).to.be.a('string');
              // expect(data.documentDownload.uri).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInboundOperationStatus', function() {
        it('should call getInboundOperationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getInboundOperationStatus call and complete the assertions
          /*
          var operationId = "operationId_example";

          instance.getInboundOperationStatus(operationId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.InboundOperationStatus);
            expect(data.operation).to.be.a('string');
            // expect(data.operation).to.be("");
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");
            {
              let dataCtr = data.operationProblems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.OperationProblem);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.details).to.be.a('string');
                // expect(data.details).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
                expect(data.severity).to.be.a('string');
                // expect(data.severity).to.be("");
              }
            }
            expect(data.operationStatus).to.be.a(TheSellingPartnerApiForFbaInboundOperations.OperationStatus);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInboundPlan', function() {
        it('should call getInboundPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for getInboundPlan call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";

          instance.getInboundPlan(inboundPlanId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.InboundPlan);
            expect(data.createdAt).to.be.a(Date);
            // expect(data.createdAt).to.be(new Date());
            expect(data.inboundPlanId).to.be.a('string');
            // expect(data.inboundPlanId).to.be("");
            expect(data.lastUpdatedAt).to.be.a(Date);
            // expect(data.lastUpdatedAt).to.be(new Date());
            {
              let dataCtr = data.marketplaceIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            {
              let dataCtr = data.packingOptions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PackingOptionSummary);
                expect(data.packingOptionId).to.be.a('string');
                // expect(data.packingOptionId).to.be("");
                expect(data.status).to.be.a('string');
                // expect(data.status).to.be("");
              }
            }
            {
              let dataCtr = data.placementOptions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PlacementOptionSummary);
                expect(data.placementOptionId).to.be.a('string');
                // expect(data.placementOptionId).to.be("");
                expect(data.status).to.be.a('string');
                // expect(data.status).to.be("");
              }
            }
            {
              let dataCtr = data.shipments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ShipmentSummary);
                expect(data.shipmentId).to.be.a('string');
                // expect(data.shipmentId).to.be("");
                expect(data.status).to.be.a('string');
                // expect(data.status).to.be("");
              }
            }
            expect(data.sourceAddress).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Address);
                  expect(data.sourceAddress.addressLine1).to.be.a('string');
              // expect(data.sourceAddress.addressLine1).to.be("");
              expect(data.sourceAddress.addressLine2).to.be.a('string');
              // expect(data.sourceAddress.addressLine2).to.be("");
              expect(data.sourceAddress.city).to.be.a('string');
              // expect(data.sourceAddress.city).to.be("");
              expect(data.sourceAddress.companyName).to.be.a('string');
              // expect(data.sourceAddress.companyName).to.be("");
              expect(data.sourceAddress.countryCode).to.be.a('string');
              // expect(data.sourceAddress.countryCode).to.be("");
              expect(data.sourceAddress.email).to.be.a('string');
              // expect(data.sourceAddress.email).to.be("");
              expect(data.sourceAddress.name).to.be.a('string');
              // expect(data.sourceAddress.name).to.be("");
              expect(data.sourceAddress.phoneNumber).to.be.a('string');
              // expect(data.sourceAddress.phoneNumber).to.be("");
              expect(data.sourceAddress.postalCode).to.be.a('string');
              // expect(data.sourceAddress.postalCode).to.be("");
              expect(data.sourceAddress.stateOrProvinceCode).to.be.a('string');
              // expect(data.sourceAddress.stateOrProvinceCode).to.be("");
            expect(data.status).to.be.a('string');
            // expect(data.status).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSelfShipAppointmentSlots', function() {
        it('should call getSelfShipAppointmentSlots successfully', function(done) {
          // TODO: uncomment, update parameter values for getSelfShipAppointmentSlots call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.getSelfShipAppointmentSlots(inboundPlanId, shipmentId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.GetSelfShipAppointmentSlotsResponse);
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");
            expect(data.selfShipAppointmentSlotsAvailability).to.be.a(TheSellingPartnerApiForFbaInboundOperations.SelfShipAppointmentSlotsAvailability);
                  expect(data.selfShipAppointmentSlotsAvailability.expiresAt).to.be.a(Date);
              // expect(data.selfShipAppointmentSlotsAvailability.expiresAt).to.be(new Date());
              {
                let dataCtr = data.selfShipAppointmentSlotsAvailability.slots;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.AppointmentSlot);
                  expect(data.slotId).to.be.a('string');
                  // expect(data.slotId).to.be("");
                  expect(data.slotTime).to.be.a(TheSellingPartnerApiForFbaInboundOperations.AppointmentSlotTime);
                        expect(data.slotTime.endTime).to.be.a(Date);
                    // expect(data.slotTime.endTime).to.be(new Date());
                    expect(data.slotTime.startTime).to.be.a(Date);
                    // expect(data.slotTime.startTime).to.be(new Date());
                }
              }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipment', function() {
        it('should call getShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipment call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";

          instance.getShipment(inboundPlanId, shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Shipment);
            expect(data.amazonReferenceId).to.be.a('string');
            // expect(data.amazonReferenceId).to.be("");
            expect(data.contactInformation).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ContactInformation);
                  expect(data.contactInformation.email).to.be.a('string');
              // expect(data.contactInformation.email).to.be("");
              expect(data.contactInformation.name).to.be.a('string');
              // expect(data.contactInformation.name).to.be("");
              expect(data.contactInformation.phoneNumber).to.be.a('string');
              // expect(data.contactInformation.phoneNumber).to.be("");
            expect(data.dates).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Dates);
                  expect(data.dates.readyToShipWindow).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Window);
                    expect(data.dates.readyToShipWindow.editableUntil).to.be.a(Date);
                // expect(data.dates.readyToShipWindow.editableUntil).to.be(new Date());
                expect(data.dates.readyToShipWindow.end).to.be.a(Date);
                // expect(data.dates.readyToShipWindow.end).to.be(new Date());
                expect(data.dates.readyToShipWindow.start).to.be.a(Date);
                // expect(data.dates.readyToShipWindow.start).to.be(new Date());
            expect(data.destination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ShipmentDestination);
                  expect(data.destination.address).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Address);
                    expect(data.destination.address.addressLine1).to.be.a('string');
                // expect(data.destination.address.addressLine1).to.be("");
                expect(data.destination.address.addressLine2).to.be.a('string');
                // expect(data.destination.address.addressLine2).to.be("");
                expect(data.destination.address.city).to.be.a('string');
                // expect(data.destination.address.city).to.be("");
                expect(data.destination.address.companyName).to.be.a('string');
                // expect(data.destination.address.companyName).to.be("");
                expect(data.destination.address.countryCode).to.be.a('string');
                // expect(data.destination.address.countryCode).to.be("");
                expect(data.destination.address.email).to.be.a('string');
                // expect(data.destination.address.email).to.be("");
                expect(data.destination.address.name).to.be.a('string');
                // expect(data.destination.address.name).to.be("");
                expect(data.destination.address.phoneNumber).to.be.a('string');
                // expect(data.destination.address.phoneNumber).to.be("");
                expect(data.destination.address.postalCode).to.be.a('string');
                // expect(data.destination.address.postalCode).to.be("");
                expect(data.destination.address.stateOrProvinceCode).to.be.a('string');
                // expect(data.destination.address.stateOrProvinceCode).to.be("");
              expect(data.destination.destinationType).to.be.a('string');
              // expect(data.destination.destinationType).to.be("");
              expect(data.destination.warehouseId).to.be.a('string');
              // expect(data.destination.warehouseId).to.be("");
            expect(data.freightInformation).to.be.a(TheSellingPartnerApiForFbaInboundOperations.FreightInformation);
                  expect(data.freightInformation.declaredValue).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                    expect(data.freightInformation.declaredValue.amount).to.be.a('number');
                // expect(data.freightInformation.declaredValue.amount).to.be();
                expect(data.freightInformation.declaredValue.code).to.be.a('string');
                // expect(data.freightInformation.declaredValue.code).to.be("");
              expect(data.freightInformation.freightClass).to.be.a('string');
              // expect(data.freightInformation.freightClass).to.be("");
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.placementOptionId).to.be.a('string');
            // expect(data.placementOptionId).to.be("");
            expect(data.selectedDeliveryWindow).to.be.a(TheSellingPartnerApiForFbaInboundOperations.SelectedDeliveryWindow);
                  expect(data.selectedDeliveryWindow.availabilityType).to.be.a('string');
              // expect(data.selectedDeliveryWindow.availabilityType).to.be("");
              expect(data.selectedDeliveryWindow.deliveryWindowOptionId).to.be.a('string');
              // expect(data.selectedDeliveryWindow.deliveryWindowOptionId).to.be("");
              expect(data.selectedDeliveryWindow.editableUntil).to.be.a(Date);
              // expect(data.selectedDeliveryWindow.editableUntil).to.be(new Date());
              expect(data.selectedDeliveryWindow.endDate).to.be.a(Date);
              // expect(data.selectedDeliveryWindow.endDate).to.be(new Date());
              expect(data.selectedDeliveryWindow.startDate).to.be.a(Date);
              // expect(data.selectedDeliveryWindow.startDate).to.be(new Date());
            expect(data.selectedTransportationOptionId).to.be.a('string');
            // expect(data.selectedTransportationOptionId).to.be("");
            {
              let dataCtr = data.selfShipAppointmentDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.SelfShipAppointmentDetails);
                expect(data.appointmentId).to.be.a('number');
                // expect(data.appointmentId).to.be();
                expect(data.appointmentSlotTime).to.be.a(TheSellingPartnerApiForFbaInboundOperations.AppointmentSlotTime);
                      expect(data.appointmentSlotTime.endTime).to.be.a(Date);
                  // expect(data.appointmentSlotTime.endTime).to.be(new Date());
                  expect(data.appointmentSlotTime.startTime).to.be.a(Date);
                  // expect(data.appointmentSlotTime.startTime).to.be(new Date());
                expect(data.appointmentStatus).to.be.a('string');
                // expect(data.appointmentStatus).to.be("");
              }
            }
            expect(data.shipmentConfirmationId).to.be.a('string');
            // expect(data.shipmentConfirmationId).to.be("");
            expect(data.shipmentId).to.be.a('string');
            // expect(data.shipmentId).to.be("");
            expect(data.source).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ShipmentSource);
                  expect(data.source.address).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Address);
                    expect(data.source.address.addressLine1).to.be.a('string');
                // expect(data.source.address.addressLine1).to.be("");
                expect(data.source.address.addressLine2).to.be.a('string');
                // expect(data.source.address.addressLine2).to.be("");
                expect(data.source.address.city).to.be.a('string');
                // expect(data.source.address.city).to.be("");
                expect(data.source.address.companyName).to.be.a('string');
                // expect(data.source.address.companyName).to.be("");
                expect(data.source.address.countryCode).to.be.a('string');
                // expect(data.source.address.countryCode).to.be("");
                expect(data.source.address.email).to.be.a('string');
                // expect(data.source.address.email).to.be("");
                expect(data.source.address.name).to.be.a('string');
                // expect(data.source.address.name).to.be("");
                expect(data.source.address.phoneNumber).to.be.a('string');
                // expect(data.source.address.phoneNumber).to.be("");
                expect(data.source.address.postalCode).to.be.a('string');
                // expect(data.source.address.postalCode).to.be("");
                expect(data.source.address.stateOrProvinceCode).to.be.a('string');
                // expect(data.source.address.stateOrProvinceCode).to.be("");
              expect(data.source.sourceType).to.be.a('string');
              // expect(data.source.sourceType).to.be("");
            expect(data.status).to.be.a('string');
            // expect(data.status).to.be("");
            expect(data.trackingDetails).to.be.a(TheSellingPartnerApiForFbaInboundOperations.TrackingDetails);
                  expect(data.trackingDetails.ltlTrackingDetail).to.be.a(TheSellingPartnerApiForFbaInboundOperations.LtlTrackingDetail);
                    expect(data.trackingDetails.ltlTrackingDetail.billOfLadingNumber).to.be.a('string');
                // expect(data.trackingDetails.ltlTrackingDetail.billOfLadingNumber).to.be("");
                {
                  let dataCtr = data.trackingDetails.ltlTrackingDetail.freightBillNumber;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
              expect(data.trackingDetails.spdTrackingDetail).to.be.a(TheSellingPartnerApiForFbaInboundOperations.SpdTrackingDetail);
                    {
                  let dataCtr = data.trackingDetails.spdTrackingDetail.spdTrackingItems;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.SpdTrackingItem);
                    expect(data.boxId).to.be.a('string');
                    // expect(data.boxId).to.be("");
                    expect(data.trackingId).to.be.a('string');
                    // expect(data.trackingId).to.be("");
                    expect(data.trackingNumberValidationStatus).to.be.a('string');
                    // expect(data.trackingNumberValidationStatus).to.be("");
                  }
                }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipmentContentUpdatePreview', function() {
        it('should call getShipmentContentUpdatePreview successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentContentUpdatePreview call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var contentUpdatePreviewId = "contentUpdatePreviewId_example";

          instance.getShipmentContentUpdatePreview(inboundPlanId, shipmentId, contentUpdatePreviewId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ContentUpdatePreview);
            expect(data.contentUpdatePreviewId).to.be.a('string');
            // expect(data.contentUpdatePreviewId).to.be("");
            expect(data.expiration).to.be.a(Date);
            // expect(data.expiration).to.be(new Date());
            expect(data.requestedUpdates).to.be.a(TheSellingPartnerApiForFbaInboundOperations.RequestedUpdates);
                  {
                let dataCtr = data.requestedUpdates.boxes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.BoxUpdateInput);
                  expect(data.contentInformationSource).to.be.a(TheSellingPartnerApiForFbaInboundOperations.BoxContentInformationSource);
                      expect(data.dimensions).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Dimensions);
                        expect(data.dimensions.height).to.be.a('number');
                    // expect(data.dimensions.height).to.be();
                    expect(data.dimensions.length).to.be.a('number');
                    // expect(data.dimensions.length).to.be();
                    expect(data.dimensions.unitOfMeasurement).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement);
                        expect(data.dimensions.width).to.be.a('number');
                    // expect(data.dimensions.width).to.be();
                  {
                    let dataCtr = data.items;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ItemInput);
                      expect(data.expiration).to.be.a('string');
                      // expect(data.expiration).to.be("");
                      expect(data.labelOwner).to.be.a(TheSellingPartnerApiForFbaInboundOperations.LabelOwner);
                          expect(data.manufacturingLotCode).to.be.a('string');
                      // expect(data.manufacturingLotCode).to.be("");
                      expect(data.msku).to.be.a('string');
                      // expect(data.msku).to.be("");
                      expect(data.prepOwner).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepOwner);
                          expect(data.quantity).to.be.a('number');
                      // expect(data.quantity).to.be(0);
                    }
                  }
                  expect(data.packageId).to.be.a('string');
                  // expect(data.packageId).to.be("");
                  expect(data.quantity).to.be.a('number');
                  // expect(data.quantity).to.be(0);
                  expect(data.weight).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Weight);
                        expect(data.weight.unit).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight);
                        expect(data.weight.value).to.be.a('number');
                    // expect(data.weight.value).to.be();
                }
              }
              {
                let dataCtr = data.requestedUpdates.items;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ItemInput);
                  expect(data.expiration).to.be.a('string');
                  // expect(data.expiration).to.be("");
                  expect(data.labelOwner).to.be.a(TheSellingPartnerApiForFbaInboundOperations.LabelOwner);
                      expect(data.manufacturingLotCode).to.be.a('string');
                  // expect(data.manufacturingLotCode).to.be("");
                  expect(data.msku).to.be.a('string');
                  // expect(data.msku).to.be("");
                  expect(data.prepOwner).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepOwner);
                      expect(data.quantity).to.be.a('number');
                  // expect(data.quantity).to.be(0);
                }
              }
            expect(data.transportationOption).to.be.a(TheSellingPartnerApiForFbaInboundOperations.TransportationOption);
                  expect(data.transportationOption.carrier).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Carrier);
                    expect(data.transportationOption.carrier.alphaCode).to.be.a('string');
                // expect(data.transportationOption.carrier.alphaCode).to.be("");
                expect(data.transportationOption.carrier.name).to.be.a('string');
                // expect(data.transportationOption.carrier.name).to.be("");
              expect(data.transportationOption.carrierAppointment).to.be.a(TheSellingPartnerApiForFbaInboundOperations.CarrierAppointment);
                    expect(data.transportationOption.carrierAppointment.endTime).to.be.a(Date);
                // expect(data.transportationOption.carrierAppointment.endTime).to.be(new Date());
                expect(data.transportationOption.carrierAppointment.startTime).to.be.a(Date);
                // expect(data.transportationOption.carrierAppointment.startTime).to.be(new Date());
              {
                let dataCtr = data.transportationOption.preconditions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.transportationOption.quote).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Quote);
                    expect(data.transportationOption.quote.cost).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                      expect(data.transportationOption.quote.cost.amount).to.be.a('number');
                  // expect(data.transportationOption.quote.cost.amount).to.be();
                  expect(data.transportationOption.quote.cost.code).to.be.a('string');
                  // expect(data.transportationOption.quote.cost.code).to.be("");
                expect(data.transportationOption.quote.expiration).to.be.a(Date);
                // expect(data.transportationOption.quote.expiration).to.be(new Date());
                expect(data.transportationOption.quote.voidableUntil).to.be.a(Date);
                // expect(data.transportationOption.quote.voidableUntil).to.be(new Date());
              expect(data.transportationOption.shipmentId).to.be.a('string');
              // expect(data.transportationOption.shipmentId).to.be("");
              expect(data.transportationOption.shippingMode).to.be.a('string');
              // expect(data.transportationOption.shippingMode).to.be("");
              expect(data.transportationOption.shippingSolution).to.be.a('string');
              // expect(data.transportationOption.shippingSolution).to.be("");
              expect(data.transportationOption.transportationOptionId).to.be.a('string');
              // expect(data.transportationOption.transportationOptionId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listDeliveryWindowOptions', function() {
        it('should call listDeliveryWindowOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for listDeliveryWindowOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listDeliveryWindowOptions(inboundPlanId, shipmentId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListDeliveryWindowOptionsResponse);
            {
              let dataCtr = data.deliveryWindowOptions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.DeliveryWindowOption);
                expect(data.availabilityType).to.be.a('string');
                // expect(data.availabilityType).to.be("");
                expect(data.deliveryWindowOptionId).to.be.a('string');
                // expect(data.deliveryWindowOptionId).to.be("");
                expect(data.endDate).to.be.a(Date);
                // expect(data.endDate).to.be(new Date());
                expect(data.startDate).to.be.a(Date);
                // expect(data.startDate).to.be(new Date());
                expect(data.validUntil).to.be.a(Date);
                // expect(data.validUntil).to.be(new Date());
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listInboundPlanBoxes', function() {
        it('should call listInboundPlanBoxes successfully', function(done) {
          // TODO: uncomment, update parameter values for listInboundPlanBoxes call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listInboundPlanBoxes(inboundPlanId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListInboundPlanBoxesResponse);
            {
              let dataCtr = data.boxes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Box);
                expect(data.boxId).to.be.a('string');
                // expect(data.boxId).to.be("");
                expect(data.contentInformationSource).to.be.a(TheSellingPartnerApiForFbaInboundOperations.BoxContentInformationSource);
                    expect(data.destinationRegion).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Region);
                      expect(data.destinationRegion.countryCode).to.be.a('string');
                  // expect(data.destinationRegion.countryCode).to.be("");
                  expect(data.destinationRegion.state).to.be.a('string');
                  // expect(data.destinationRegion.state).to.be("");
                  expect(data.destinationRegion.warehouseId).to.be.a('string');
                  // expect(data.destinationRegion.warehouseId).to.be("");
                expect(data.dimensions).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Dimensions);
                      expect(data.dimensions.height).to.be.a('number');
                  // expect(data.dimensions.height).to.be();
                  expect(data.dimensions.length).to.be.a('number');
                  // expect(data.dimensions.length).to.be();
                  expect(data.dimensions.unitOfMeasurement).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement);
                      expect(data.dimensions.width).to.be.a('number');
                  // expect(data.dimensions.width).to.be();
                {
                  let dataCtr = data.items;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Item);
                    expect(data.asin).to.be.a('string');
                    // expect(data.asin).to.be("");
                    expect(data.expiration).to.be.a('string');
                    // expect(data.expiration).to.be("");
                    expect(data.fnsku).to.be.a('string');
                    // expect(data.fnsku).to.be("");
                    expect(data.labelOwner).to.be.a('string');
                    // expect(data.labelOwner).to.be("");
                    expect(data.manufacturingLotCode).to.be.a('string');
                    // expect(data.manufacturingLotCode).to.be("");
                    expect(data.msku).to.be.a('string');
                    // expect(data.msku).to.be("");
                    {
                      let dataCtr = data.prepInstructions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepInstruction);
                        expect(data.fee).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                              expect(data.fee.amount).to.be.a('number');
                          // expect(data.fee.amount).to.be();
                          expect(data.fee.code).to.be.a('string');
                          // expect(data.fee.code).to.be("");
                        expect(data.prepOwner).to.be.a('string');
                        // expect(data.prepOwner).to.be("");
                        expect(data.prepType).to.be.a('string');
                        // expect(data.prepType).to.be("");
                      }
                    }
                    expect(data.quantity).to.be.a('number');
                    // expect(data.quantity).to.be(0);
                  }
                }
                expect(data.packageId).to.be.a('string');
                // expect(data.packageId).to.be("");
                expect(data.quantity).to.be.a('number');
                // expect(data.quantity).to.be(0);
                expect(data.templateName).to.be.a('string');
                // expect(data.templateName).to.be("");
                expect(data.weight).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Weight);
                      expect(data.weight.unit).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight);
                      expect(data.weight.value).to.be.a('number');
                  // expect(data.weight.value).to.be();
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listInboundPlanItems', function() {
        it('should call listInboundPlanItems successfully', function(done) {
          // TODO: uncomment, update parameter values for listInboundPlanItems call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listInboundPlanItems(inboundPlanId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListInboundPlanItemsResponse);
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Item);
                expect(data.asin).to.be.a('string');
                // expect(data.asin).to.be("");
                expect(data.expiration).to.be.a('string');
                // expect(data.expiration).to.be("");
                expect(data.fnsku).to.be.a('string');
                // expect(data.fnsku).to.be("");
                expect(data.labelOwner).to.be.a('string');
                // expect(data.labelOwner).to.be("");
                expect(data.manufacturingLotCode).to.be.a('string');
                // expect(data.manufacturingLotCode).to.be("");
                expect(data.msku).to.be.a('string');
                // expect(data.msku).to.be("");
                {
                  let dataCtr = data.prepInstructions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepInstruction);
                    expect(data.fee).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                          expect(data.fee.amount).to.be.a('number');
                      // expect(data.fee.amount).to.be();
                      expect(data.fee.code).to.be.a('string');
                      // expect(data.fee.code).to.be("");
                    expect(data.prepOwner).to.be.a('string');
                    // expect(data.prepOwner).to.be("");
                    expect(data.prepType).to.be.a('string');
                    // expect(data.prepType).to.be("");
                  }
                }
                expect(data.quantity).to.be.a('number');
                // expect(data.quantity).to.be(0);
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listInboundPlanPallets', function() {
        it('should call listInboundPlanPallets successfully', function(done) {
          // TODO: uncomment, update parameter values for listInboundPlanPallets call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listInboundPlanPallets(inboundPlanId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListInboundPlanPalletsResponse);
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");
            {
              let dataCtr = data.pallets;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pallet);
                expect(data.dimensions).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Dimensions);
                      expect(data.dimensions.height).to.be.a('number');
                  // expect(data.dimensions.height).to.be();
                  expect(data.dimensions.length).to.be.a('number');
                  // expect(data.dimensions.length).to.be();
                  expect(data.dimensions.unitOfMeasurement).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement);
                      expect(data.dimensions.width).to.be.a('number');
                  // expect(data.dimensions.width).to.be();
                expect(data.packageId).to.be.a('string');
                // expect(data.packageId).to.be("");
                expect(data.quantity).to.be.a('number');
                // expect(data.quantity).to.be(0);
                expect(data.stackability).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Stackability);
                    expect(data.weight).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Weight);
                      expect(data.weight.unit).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight);
                      expect(data.weight.value).to.be.a('number');
                  // expect(data.weight.value).to.be();
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listInboundPlans', function() {
        it('should call listInboundPlans successfully', function(done) {
          // TODO: uncomment, update parameter values for listInboundPlans call and complete the assertions
          /*
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";
          opts.status = "status_example";
          opts.sortBy = "sortBy_example";
          opts.sortOrder = "sortOrder_example";

          instance.listInboundPlans(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListInboundPlansResponse);
            {
              let dataCtr = data.inboundPlans;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.InboundPlanSummary);
                expect(data.createdAt).to.be.a(Date);
                // expect(data.createdAt).to.be(new Date());
                expect(data.inboundPlanId).to.be.a('string');
                // expect(data.inboundPlanId).to.be("");
                expect(data.lastUpdatedAt).to.be.a(Date);
                // expect(data.lastUpdatedAt).to.be(new Date());
                {
                  let dataCtr = data.marketplaceIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.name).to.be.a('string');
                // expect(data.name).to.be("");
                expect(data.sourceAddress).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Address);
                      expect(data.sourceAddress.addressLine1).to.be.a('string');
                  // expect(data.sourceAddress.addressLine1).to.be("");
                  expect(data.sourceAddress.addressLine2).to.be.a('string');
                  // expect(data.sourceAddress.addressLine2).to.be("");
                  expect(data.sourceAddress.city).to.be.a('string');
                  // expect(data.sourceAddress.city).to.be("");
                  expect(data.sourceAddress.companyName).to.be.a('string');
                  // expect(data.sourceAddress.companyName).to.be("");
                  expect(data.sourceAddress.countryCode).to.be.a('string');
                  // expect(data.sourceAddress.countryCode).to.be("");
                  expect(data.sourceAddress.email).to.be.a('string');
                  // expect(data.sourceAddress.email).to.be("");
                  expect(data.sourceAddress.name).to.be.a('string');
                  // expect(data.sourceAddress.name).to.be("");
                  expect(data.sourceAddress.phoneNumber).to.be.a('string');
                  // expect(data.sourceAddress.phoneNumber).to.be("");
                  expect(data.sourceAddress.postalCode).to.be.a('string');
                  // expect(data.sourceAddress.postalCode).to.be("");
                  expect(data.sourceAddress.stateOrProvinceCode).to.be.a('string');
                  // expect(data.sourceAddress.stateOrProvinceCode).to.be("");
                expect(data.status).to.be.a('string');
                // expect(data.status).to.be("");
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listItemComplianceDetails', function() {
        it('should call listItemComplianceDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for listItemComplianceDetails call and complete the assertions
          /*
          var mskus = ["mskus_example"];
          var marketplaceId = "marketplaceId_example";

          instance.listItemComplianceDetails(mskus, marketplaceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListItemComplianceDetailsResponse);
            {
              let dataCtr = data.complianceDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ComplianceDetail);
                expect(data.asin).to.be.a('string');
                // expect(data.asin).to.be("");
                expect(data.fnsku).to.be.a('string');
                // expect(data.fnsku).to.be("");
                expect(data.msku).to.be.a('string');
                // expect(data.msku).to.be("");
                expect(data.taxDetails).to.be.a(TheSellingPartnerApiForFbaInboundOperations.TaxDetails);
                      expect(data.taxDetails.declaredValue).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                        expect(data.taxDetails.declaredValue.amount).to.be.a('number');
                    // expect(data.taxDetails.declaredValue.amount).to.be();
                    expect(data.taxDetails.declaredValue.code).to.be.a('string');
                    // expect(data.taxDetails.declaredValue.code).to.be("");
                  expect(data.taxDetails.hsnCode).to.be.a('string');
                  // expect(data.taxDetails.hsnCode).to.be("");
                  {
                    let dataCtr = data.taxDetails.taxRates;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.TaxRate);
                      expect(data.cessRate).to.be.a('number');
                      // expect(data.cessRate).to.be();
                      expect(data.gstRate).to.be.a('number');
                      // expect(data.gstRate).to.be();
                      expect(data.taxType).to.be.a('string');
                      // expect(data.taxType).to.be("");
                    }
                  }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listPackingGroupBoxes', function() {
        it('should call listPackingGroupBoxes successfully', function(done) {
          // TODO: uncomment, update parameter values for listPackingGroupBoxes call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var packingGroupId = "packingGroupId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listPackingGroupBoxes(inboundPlanId, packingGroupId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListPackingGroupBoxesResponse);
            {
              let dataCtr = data.boxes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Box);
                expect(data.boxId).to.be.a('string');
                // expect(data.boxId).to.be("");
                expect(data.contentInformationSource).to.be.a(TheSellingPartnerApiForFbaInboundOperations.BoxContentInformationSource);
                    expect(data.destinationRegion).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Region);
                      expect(data.destinationRegion.countryCode).to.be.a('string');
                  // expect(data.destinationRegion.countryCode).to.be("");
                  expect(data.destinationRegion.state).to.be.a('string');
                  // expect(data.destinationRegion.state).to.be("");
                  expect(data.destinationRegion.warehouseId).to.be.a('string');
                  // expect(data.destinationRegion.warehouseId).to.be("");
                expect(data.dimensions).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Dimensions);
                      expect(data.dimensions.height).to.be.a('number');
                  // expect(data.dimensions.height).to.be();
                  expect(data.dimensions.length).to.be.a('number');
                  // expect(data.dimensions.length).to.be();
                  expect(data.dimensions.unitOfMeasurement).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement);
                      expect(data.dimensions.width).to.be.a('number');
                  // expect(data.dimensions.width).to.be();
                {
                  let dataCtr = data.items;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Item);
                    expect(data.asin).to.be.a('string');
                    // expect(data.asin).to.be("");
                    expect(data.expiration).to.be.a('string');
                    // expect(data.expiration).to.be("");
                    expect(data.fnsku).to.be.a('string');
                    // expect(data.fnsku).to.be("");
                    expect(data.labelOwner).to.be.a('string');
                    // expect(data.labelOwner).to.be("");
                    expect(data.manufacturingLotCode).to.be.a('string');
                    // expect(data.manufacturingLotCode).to.be("");
                    expect(data.msku).to.be.a('string');
                    // expect(data.msku).to.be("");
                    {
                      let dataCtr = data.prepInstructions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepInstruction);
                        expect(data.fee).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                              expect(data.fee.amount).to.be.a('number');
                          // expect(data.fee.amount).to.be();
                          expect(data.fee.code).to.be.a('string');
                          // expect(data.fee.code).to.be("");
                        expect(data.prepOwner).to.be.a('string');
                        // expect(data.prepOwner).to.be("");
                        expect(data.prepType).to.be.a('string');
                        // expect(data.prepType).to.be("");
                      }
                    }
                    expect(data.quantity).to.be.a('number');
                    // expect(data.quantity).to.be(0);
                  }
                }
                expect(data.packageId).to.be.a('string');
                // expect(data.packageId).to.be("");
                expect(data.quantity).to.be.a('number');
                // expect(data.quantity).to.be(0);
                expect(data.templateName).to.be.a('string');
                // expect(data.templateName).to.be("");
                expect(data.weight).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Weight);
                      expect(data.weight.unit).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight);
                      expect(data.weight.value).to.be.a('number');
                  // expect(data.weight.value).to.be();
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listPackingGroupItems', function() {
        it('should call listPackingGroupItems successfully', function(done) {
          // TODO: uncomment, update parameter values for listPackingGroupItems call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var packingGroupId = "packingGroupId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listPackingGroupItems(inboundPlanId, packingGroupId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListPackingGroupItemsResponse);
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Item);
                expect(data.asin).to.be.a('string');
                // expect(data.asin).to.be("");
                expect(data.expiration).to.be.a('string');
                // expect(data.expiration).to.be("");
                expect(data.fnsku).to.be.a('string');
                // expect(data.fnsku).to.be("");
                expect(data.labelOwner).to.be.a('string');
                // expect(data.labelOwner).to.be("");
                expect(data.manufacturingLotCode).to.be.a('string');
                // expect(data.manufacturingLotCode).to.be("");
                expect(data.msku).to.be.a('string');
                // expect(data.msku).to.be("");
                {
                  let dataCtr = data.prepInstructions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepInstruction);
                    expect(data.fee).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                          expect(data.fee.amount).to.be.a('number');
                      // expect(data.fee.amount).to.be();
                      expect(data.fee.code).to.be.a('string');
                      // expect(data.fee.code).to.be("");
                    expect(data.prepOwner).to.be.a('string');
                    // expect(data.prepOwner).to.be("");
                    expect(data.prepType).to.be.a('string');
                    // expect(data.prepType).to.be("");
                  }
                }
                expect(data.quantity).to.be.a('number');
                // expect(data.quantity).to.be(0);
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listPackingOptions', function() {
        it('should call listPackingOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for listPackingOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listPackingOptions(inboundPlanId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListPackingOptionsResponse);
            {
              let dataCtr = data.packingOptions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PackingOption);
                {
                  let dataCtr = data.discounts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Incentive);
                    expect(data.description).to.be.a('string');
                    // expect(data.description).to.be("");
                    expect(data.target).to.be.a('string');
                    // expect(data.target).to.be("");
                    expect(data.type).to.be.a('string');
                    // expect(data.type).to.be("");
                    expect(data.value).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                          expect(data.value.amount).to.be.a('number');
                      // expect(data.value.amount).to.be();
                      expect(data.value.code).to.be.a('string');
                      // expect(data.value.code).to.be("");
                  }
                }
                expect(data.expiration).to.be.a(Date);
                // expect(data.expiration).to.be(new Date());
                {
                  let dataCtr = data.fees;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Incentive);
                    expect(data.description).to.be.a('string');
                    // expect(data.description).to.be("");
                    expect(data.target).to.be.a('string');
                    // expect(data.target).to.be("");
                    expect(data.type).to.be.a('string');
                    // expect(data.type).to.be("");
                    expect(data.value).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                          expect(data.value.amount).to.be.a('number');
                      // expect(data.value.amount).to.be();
                      expect(data.value.code).to.be.a('string');
                      // expect(data.value.code).to.be("");
                  }
                }
                {
                  let dataCtr = data.packingGroups;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.packingOptionId).to.be.a('string');
                // expect(data.packingOptionId).to.be("");
                expect(data.status).to.be.a('string');
                // expect(data.status).to.be("");
                {
                  let dataCtr = data.supportedShippingConfigurations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ShippingConfiguration);
                    expect(data.shippingMode).to.be.a('string');
                    // expect(data.shippingMode).to.be("");
                    expect(data.shippingSolution).to.be.a('string');
                    // expect(data.shippingSolution).to.be("");
                  }
                }
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listPlacementOptions', function() {
        it('should call listPlacementOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for listPlacementOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listPlacementOptions(inboundPlanId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListPlacementOptionsResponse);
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");
            {
              let dataCtr = data.placementOptions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PlacementOption);
                {
                  let dataCtr = data.discounts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Incentive);
                    expect(data.description).to.be.a('string');
                    // expect(data.description).to.be("");
                    expect(data.target).to.be.a('string');
                    // expect(data.target).to.be("");
                    expect(data.type).to.be.a('string');
                    // expect(data.type).to.be("");
                    expect(data.value).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                          expect(data.value.amount).to.be.a('number');
                      // expect(data.value.amount).to.be();
                      expect(data.value.code).to.be.a('string');
                      // expect(data.value.code).to.be("");
                  }
                }
                expect(data.expiration).to.be.a(Date);
                // expect(data.expiration).to.be(new Date());
                {
                  let dataCtr = data.fees;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Incentive);
                    expect(data.description).to.be.a('string');
                    // expect(data.description).to.be("");
                    expect(data.target).to.be.a('string');
                    // expect(data.target).to.be("");
                    expect(data.type).to.be.a('string');
                    // expect(data.type).to.be("");
                    expect(data.value).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                          expect(data.value.amount).to.be.a('number');
                      // expect(data.value.amount).to.be();
                      expect(data.value.code).to.be.a('string');
                      // expect(data.value.code).to.be("");
                  }
                }
                expect(data.placementOptionId).to.be.a('string');
                // expect(data.placementOptionId).to.be("");
                {
                  let dataCtr = data.shipmentIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.status).to.be.a('string');
                // expect(data.status).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listPrepDetails', function() {
        it('should call listPrepDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for listPrepDetails call and complete the assertions
          /*
          var marketplaceId = "marketplaceId_example";
          var mskus = ["mskus_example"];

          instance.listPrepDetails(marketplaceId, mskus).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListPrepDetailsResponse);
            {
              let dataCtr = data.mskuPrepDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.MskuPrepDetail);
                expect(data.allOwnersConstraint).to.be.a(TheSellingPartnerApiForFbaInboundOperations.AllOwnersConstraint);
                    expect(data.labelOwnerConstraint).to.be.a(TheSellingPartnerApiForFbaInboundOperations.OwnerConstraint);
                    expect(data.msku).to.be.a('string');
                // expect(data.msku).to.be("");
                expect(data.prepCategory).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepCategory);
                    expect(data.prepOwnerConstraint).to.be.a(TheSellingPartnerApiForFbaInboundOperations.OwnerConstraint);
                    {
                  let dataCtr = data.prepTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepType);
                  }
                }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listShipmentBoxes', function() {
        it('should call listShipmentBoxes successfully', function(done) {
          // TODO: uncomment, update parameter values for listShipmentBoxes call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listShipmentBoxes(inboundPlanId, shipmentId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListShipmentBoxesResponse);
            {
              let dataCtr = data.boxes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Box);
                expect(data.boxId).to.be.a('string');
                // expect(data.boxId).to.be("");
                expect(data.contentInformationSource).to.be.a(TheSellingPartnerApiForFbaInboundOperations.BoxContentInformationSource);
                    expect(data.destinationRegion).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Region);
                      expect(data.destinationRegion.countryCode).to.be.a('string');
                  // expect(data.destinationRegion.countryCode).to.be("");
                  expect(data.destinationRegion.state).to.be.a('string');
                  // expect(data.destinationRegion.state).to.be("");
                  expect(data.destinationRegion.warehouseId).to.be.a('string');
                  // expect(data.destinationRegion.warehouseId).to.be("");
                expect(data.dimensions).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Dimensions);
                      expect(data.dimensions.height).to.be.a('number');
                  // expect(data.dimensions.height).to.be();
                  expect(data.dimensions.length).to.be.a('number');
                  // expect(data.dimensions.length).to.be();
                  expect(data.dimensions.unitOfMeasurement).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement);
                      expect(data.dimensions.width).to.be.a('number');
                  // expect(data.dimensions.width).to.be();
                {
                  let dataCtr = data.items;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Item);
                    expect(data.asin).to.be.a('string');
                    // expect(data.asin).to.be("");
                    expect(data.expiration).to.be.a('string');
                    // expect(data.expiration).to.be("");
                    expect(data.fnsku).to.be.a('string');
                    // expect(data.fnsku).to.be("");
                    expect(data.labelOwner).to.be.a('string');
                    // expect(data.labelOwner).to.be("");
                    expect(data.manufacturingLotCode).to.be.a('string');
                    // expect(data.manufacturingLotCode).to.be("");
                    expect(data.msku).to.be.a('string');
                    // expect(data.msku).to.be("");
                    {
                      let dataCtr = data.prepInstructions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepInstruction);
                        expect(data.fee).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                              expect(data.fee.amount).to.be.a('number');
                          // expect(data.fee.amount).to.be();
                          expect(data.fee.code).to.be.a('string');
                          // expect(data.fee.code).to.be("");
                        expect(data.prepOwner).to.be.a('string');
                        // expect(data.prepOwner).to.be("");
                        expect(data.prepType).to.be.a('string');
                        // expect(data.prepType).to.be("");
                      }
                    }
                    expect(data.quantity).to.be.a('number');
                    // expect(data.quantity).to.be(0);
                  }
                }
                expect(data.packageId).to.be.a('string');
                // expect(data.packageId).to.be("");
                expect(data.quantity).to.be.a('number');
                // expect(data.quantity).to.be(0);
                expect(data.templateName).to.be.a('string');
                // expect(data.templateName).to.be("");
                expect(data.weight).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Weight);
                      expect(data.weight.unit).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight);
                      expect(data.weight.value).to.be.a('number');
                  // expect(data.weight.value).to.be();
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listShipmentContentUpdatePreviews', function() {
        it('should call listShipmentContentUpdatePreviews successfully', function(done) {
          // TODO: uncomment, update parameter values for listShipmentContentUpdatePreviews call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listShipmentContentUpdatePreviews(inboundPlanId, shipmentId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListShipmentContentUpdatePreviewsResponse);
            {
              let dataCtr = data.contentUpdatePreviews;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ContentUpdatePreview);
                expect(data.contentUpdatePreviewId).to.be.a('string');
                // expect(data.contentUpdatePreviewId).to.be("");
                expect(data.expiration).to.be.a(Date);
                // expect(data.expiration).to.be(new Date());
                expect(data.requestedUpdates).to.be.a(TheSellingPartnerApiForFbaInboundOperations.RequestedUpdates);
                      {
                    let dataCtr = data.requestedUpdates.boxes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.BoxUpdateInput);
                      expect(data.contentInformationSource).to.be.a(TheSellingPartnerApiForFbaInboundOperations.BoxContentInformationSource);
                          expect(data.dimensions).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Dimensions);
                            expect(data.dimensions.height).to.be.a('number');
                        // expect(data.dimensions.height).to.be();
                        expect(data.dimensions.length).to.be.a('number');
                        // expect(data.dimensions.length).to.be();
                        expect(data.dimensions.unitOfMeasurement).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement);
                            expect(data.dimensions.width).to.be.a('number');
                        // expect(data.dimensions.width).to.be();
                      {
                        let dataCtr = data.items;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ItemInput);
                          expect(data.expiration).to.be.a('string');
                          // expect(data.expiration).to.be("");
                          expect(data.labelOwner).to.be.a(TheSellingPartnerApiForFbaInboundOperations.LabelOwner);
                              expect(data.manufacturingLotCode).to.be.a('string');
                          // expect(data.manufacturingLotCode).to.be("");
                          expect(data.msku).to.be.a('string');
                          // expect(data.msku).to.be("");
                          expect(data.prepOwner).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepOwner);
                              expect(data.quantity).to.be.a('number');
                          // expect(data.quantity).to.be(0);
                        }
                      }
                      expect(data.packageId).to.be.a('string');
                      // expect(data.packageId).to.be("");
                      expect(data.quantity).to.be.a('number');
                      // expect(data.quantity).to.be(0);
                      expect(data.weight).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Weight);
                            expect(data.weight.unit).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight);
                            expect(data.weight.value).to.be.a('number');
                        // expect(data.weight.value).to.be();
                    }
                  }
                  {
                    let dataCtr = data.requestedUpdates.items;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ItemInput);
                      expect(data.expiration).to.be.a('string');
                      // expect(data.expiration).to.be("");
                      expect(data.labelOwner).to.be.a(TheSellingPartnerApiForFbaInboundOperations.LabelOwner);
                          expect(data.manufacturingLotCode).to.be.a('string');
                      // expect(data.manufacturingLotCode).to.be("");
                      expect(data.msku).to.be.a('string');
                      // expect(data.msku).to.be("");
                      expect(data.prepOwner).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepOwner);
                          expect(data.quantity).to.be.a('number');
                      // expect(data.quantity).to.be(0);
                    }
                  }
                expect(data.transportationOption).to.be.a(TheSellingPartnerApiForFbaInboundOperations.TransportationOption);
                      expect(data.transportationOption.carrier).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Carrier);
                        expect(data.transportationOption.carrier.alphaCode).to.be.a('string');
                    // expect(data.transportationOption.carrier.alphaCode).to.be("");
                    expect(data.transportationOption.carrier.name).to.be.a('string');
                    // expect(data.transportationOption.carrier.name).to.be("");
                  expect(data.transportationOption.carrierAppointment).to.be.a(TheSellingPartnerApiForFbaInboundOperations.CarrierAppointment);
                        expect(data.transportationOption.carrierAppointment.endTime).to.be.a(Date);
                    // expect(data.transportationOption.carrierAppointment.endTime).to.be(new Date());
                    expect(data.transportationOption.carrierAppointment.startTime).to.be.a(Date);
                    // expect(data.transportationOption.carrierAppointment.startTime).to.be(new Date());
                  {
                    let dataCtr = data.transportationOption.preconditions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      // expect(data).to.be("");
                    }
                  }
                  expect(data.transportationOption.quote).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Quote);
                        expect(data.transportationOption.quote.cost).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                          expect(data.transportationOption.quote.cost.amount).to.be.a('number');
                      // expect(data.transportationOption.quote.cost.amount).to.be();
                      expect(data.transportationOption.quote.cost.code).to.be.a('string');
                      // expect(data.transportationOption.quote.cost.code).to.be("");
                    expect(data.transportationOption.quote.expiration).to.be.a(Date);
                    // expect(data.transportationOption.quote.expiration).to.be(new Date());
                    expect(data.transportationOption.quote.voidableUntil).to.be.a(Date);
                    // expect(data.transportationOption.quote.voidableUntil).to.be(new Date());
                  expect(data.transportationOption.shipmentId).to.be.a('string');
                  // expect(data.transportationOption.shipmentId).to.be("");
                  expect(data.transportationOption.shippingMode).to.be.a('string');
                  // expect(data.transportationOption.shippingMode).to.be("");
                  expect(data.transportationOption.shippingSolution).to.be.a('string');
                  // expect(data.transportationOption.shippingSolution).to.be("");
                  expect(data.transportationOption.transportationOptionId).to.be.a('string');
                  // expect(data.transportationOption.transportationOptionId).to.be("");
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listShipmentItems', function() {
        it('should call listShipmentItems successfully', function(done) {
          // TODO: uncomment, update parameter values for listShipmentItems call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listShipmentItems(inboundPlanId, shipmentId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListShipmentItemsResponse);
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Item);
                expect(data.asin).to.be.a('string');
                // expect(data.asin).to.be("");
                expect(data.expiration).to.be.a('string');
                // expect(data.expiration).to.be("");
                expect(data.fnsku).to.be.a('string');
                // expect(data.fnsku).to.be("");
                expect(data.labelOwner).to.be.a('string');
                // expect(data.labelOwner).to.be("");
                expect(data.manufacturingLotCode).to.be.a('string');
                // expect(data.manufacturingLotCode).to.be("");
                expect(data.msku).to.be.a('string');
                // expect(data.msku).to.be("");
                {
                  let dataCtr = data.prepInstructions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.PrepInstruction);
                    expect(data.fee).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                          expect(data.fee.amount).to.be.a('number');
                      // expect(data.fee.amount).to.be();
                      expect(data.fee.code).to.be.a('string');
                      // expect(data.fee.code).to.be("");
                    expect(data.prepOwner).to.be.a('string');
                    // expect(data.prepOwner).to.be("");
                    expect(data.prepType).to.be.a('string');
                    // expect(data.prepType).to.be("");
                  }
                }
                expect(data.quantity).to.be.a('number');
                // expect(data.quantity).to.be(0);
              }
            }
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listShipmentPallets', function() {
        it('should call listShipmentPallets successfully', function(done) {
          // TODO: uncomment, update parameter values for listShipmentPallets call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";

          instance.listShipmentPallets(inboundPlanId, shipmentId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListShipmentPalletsResponse);
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");
            {
              let dataCtr = data.pallets;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pallet);
                expect(data.dimensions).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Dimensions);
                      expect(data.dimensions.height).to.be.a('number');
                  // expect(data.dimensions.height).to.be();
                  expect(data.dimensions.length).to.be.a('number');
                  // expect(data.dimensions.length).to.be();
                  expect(data.dimensions.unitOfMeasurement).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement);
                      expect(data.dimensions.width).to.be.a('number');
                  // expect(data.dimensions.width).to.be();
                expect(data.packageId).to.be.a('string');
                // expect(data.packageId).to.be("");
                expect(data.quantity).to.be.a('number');
                // expect(data.quantity).to.be(0);
                expect(data.stackability).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Stackability);
                    expect(data.weight).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Weight);
                      expect(data.weight.unit).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight);
                      expect(data.weight.value).to.be.a('number');
                  // expect(data.weight.value).to.be();
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listTransportationOptions', function() {
        it('should call listTransportationOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for listTransportationOptions call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var opts = {};
          opts.pageSize = 10;
          opts.paginationToken = "paginationToken_example";
          opts.placementOptionId = "placementOptionId_example";
          opts.shipmentId = "shipmentId_example";

          instance.listTransportationOptions(inboundPlanId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ListTransportationOptionsResponse);
            expect(data.pagination).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");
            {
              let dataCtr = data.transportationOptions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.TransportationOption);
                expect(data.carrier).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Carrier);
                      expect(data.carrier.alphaCode).to.be.a('string');
                  // expect(data.carrier.alphaCode).to.be("");
                  expect(data.carrier.name).to.be.a('string');
                  // expect(data.carrier.name).to.be("");
                expect(data.carrierAppointment).to.be.a(TheSellingPartnerApiForFbaInboundOperations.CarrierAppointment);
                      expect(data.carrierAppointment.endTime).to.be.a(Date);
                  // expect(data.carrierAppointment.endTime).to.be(new Date());
                  expect(data.carrierAppointment.startTime).to.be.a(Date);
                  // expect(data.carrierAppointment.startTime).to.be(new Date());
                {
                  let dataCtr = data.preconditions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.quote).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Quote);
                      expect(data.quote.cost).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Currency);
                        expect(data.quote.cost.amount).to.be.a('number');
                    // expect(data.quote.cost.amount).to.be();
                    expect(data.quote.cost.code).to.be.a('string');
                    // expect(data.quote.cost.code).to.be("");
                  expect(data.quote.expiration).to.be.a(Date);
                  // expect(data.quote.expiration).to.be(new Date());
                  expect(data.quote.voidableUntil).to.be.a(Date);
                  // expect(data.quote.voidableUntil).to.be(new Date());
                expect(data.shipmentId).to.be.a('string');
                // expect(data.shipmentId).to.be("");
                expect(data.shippingMode).to.be.a('string');
                // expect(data.shippingMode).to.be("");
                expect(data.shippingSolution).to.be.a('string');
                // expect(data.shippingSolution).to.be("");
                expect(data.transportationOptionId).to.be.a('string');
                // expect(data.transportationOptionId).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scheduleSelfShipAppointment', function() {
        it('should call scheduleSelfShipAppointment successfully', function(done) {
          // TODO: uncomment, update parameter values for scheduleSelfShipAppointment call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var slotId = "slotId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.ScheduleSelfShipAppointmentRequest();
          body.reasonComment = new TheSellingPartnerApiForFbaInboundOperations.ReasonComment();

          instance.scheduleSelfShipAppointment(inboundPlanId, shipmentId, slotId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.ScheduleSelfShipAppointmentResponse);
            expect(data.selfShipAppointmentDetails).to.be.a(TheSellingPartnerApiForFbaInboundOperations.SelfShipAppointmentDetails);
                  expect(data.selfShipAppointmentDetails.appointmentId).to.be.a('number');
              // expect(data.selfShipAppointmentDetails.appointmentId).to.be();
              expect(data.selfShipAppointmentDetails.appointmentSlotTime).to.be.a(TheSellingPartnerApiForFbaInboundOperations.AppointmentSlotTime);
                    expect(data.selfShipAppointmentDetails.appointmentSlotTime.endTime).to.be.a(Date);
                // expect(data.selfShipAppointmentDetails.appointmentSlotTime.endTime).to.be(new Date());
                expect(data.selfShipAppointmentDetails.appointmentSlotTime.startTime).to.be.a(Date);
                // expect(data.selfShipAppointmentDetails.appointmentSlotTime.startTime).to.be(new Date());
              expect(data.selfShipAppointmentDetails.appointmentStatus).to.be.a('string');
              // expect(data.selfShipAppointmentDetails.appointmentStatus).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setPackingInformation', function() {
        it('should call setPackingInformation successfully', function(done) {
          // TODO: uncomment, update parameter values for setPackingInformation call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.SetPackingInformationRequest();
          body.packageGroupings = [new TheSellingPartnerApiForFbaInboundOperations.PackageGroupingInput()];
          body.packageGroupings[0].boxes = [new TheSellingPartnerApiForFbaInboundOperations.BoxInput()];
          body.packageGroupings[0].boxes[0].contentInformationSource = new TheSellingPartnerApiForFbaInboundOperations.BoxContentInformationSource();
          body.packageGroupings[0].boxes[0].dimensions = new TheSellingPartnerApiForFbaInboundOperations.Dimensions();
          body.packageGroupings[0].boxes[0].dimensions.height = ;
          body.packageGroupings[0].boxes[0].dimensions.length = ;
          body.packageGroupings[0].boxes[0].dimensions.unitOfMeasurement = new TheSellingPartnerApiForFbaInboundOperations.UnitOfMeasurement();
          body.packageGroupings[0].boxes[0].dimensions.width = ;
          body.packageGroupings[0].boxes[0].items = [new TheSellingPartnerApiForFbaInboundOperations.ItemInput()];
          body.packageGroupings[0].boxes[0].items[0].expiration = "";
          body.packageGroupings[0].boxes[0].items[0].labelOwner = new TheSellingPartnerApiForFbaInboundOperations.LabelOwner();
          body.packageGroupings[0].boxes[0].items[0].manufacturingLotCode = "";
          body.packageGroupings[0].boxes[0].items[0].msku = "";
          body.packageGroupings[0].boxes[0].items[0].prepOwner = new TheSellingPartnerApiForFbaInboundOperations.PrepOwner();
          body.packageGroupings[0].boxes[0].items[0].quantity = 0;
          body.packageGroupings[0].boxes[0].quantity = 0;
          body.packageGroupings[0].boxes[0].weight = new TheSellingPartnerApiForFbaInboundOperations.Weight();
          body.packageGroupings[0].boxes[0].weight.unit = new TheSellingPartnerApiForFbaInboundOperations.UnitOfWeight();
          body.packageGroupings[0].boxes[0].weight.value = ;
          body.packageGroupings[0].packingGroupId = "";
          body.packageGroupings[0].shipmentId = "";

          instance.setPackingInformation(inboundPlanId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.SetPackingInformationResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setPrepDetails', function() {
        it('should call setPrepDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for setPrepDetails call and complete the assertions
          /*
          var body = new TheSellingPartnerApiForFbaInboundOperations.SetPrepDetailsRequest();
          body.marketplaceId = "";
          body.mskuPrepDetails = [new TheSellingPartnerApiForFbaInboundOperations.MskuPrepDetailInput()];
          body.mskuPrepDetails[0].msku = "";
          body.mskuPrepDetails[0].prepCategory = new TheSellingPartnerApiForFbaInboundOperations.PrepCategory();
          body.mskuPrepDetails[0].prepTypes = [new TheSellingPartnerApiForFbaInboundOperations.PrepType()];

          instance.setPrepDetails(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.SetPrepDetailsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateInboundPlanName', function() {
        it('should call updateInboundPlanName successfully', function(done) {
          // TODO: uncomment, update parameter values for updateInboundPlanName call
          /*
          var inboundPlanId = "inboundPlanId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.UpdateInboundPlanNameRequest();
          body.name = "";

          instance.updateInboundPlanName(inboundPlanId, body).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateItemComplianceDetails', function() {
        it('should call updateItemComplianceDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for updateItemComplianceDetails call and complete the assertions
          /*
          var marketplaceId = "marketplaceId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.UpdateItemComplianceDetailsRequest();
          body.msku = "";
          body.taxDetails = new TheSellingPartnerApiForFbaInboundOperations.TaxDetails();
          body.taxDetails.declaredValue = new TheSellingPartnerApiForFbaInboundOperations.Currency();
          body.taxDetails.declaredValue.amount = ;
          body.taxDetails.declaredValue.code = "";
          body.taxDetails.hsnCode = "";
          body.taxDetails.taxRates = [new TheSellingPartnerApiForFbaInboundOperations.TaxRate()];
          body.taxDetails.taxRates[0].cessRate = ;
          body.taxDetails.taxRates[0].gstRate = ;
          body.taxDetails.taxRates[0].taxType = "";

          instance.updateItemComplianceDetails(marketplaceId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UpdateItemComplianceDetailsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateShipmentName', function() {
        it('should call updateShipmentName successfully', function(done) {
          // TODO: uncomment, update parameter values for updateShipmentName call
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.UpdateShipmentNameRequest();
          body.name = "";

          instance.updateShipmentName(inboundPlanId, shipmentId, body).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateShipmentSourceAddress', function() {
        it('should call updateShipmentSourceAddress successfully', function(done) {
          // TODO: uncomment, update parameter values for updateShipmentSourceAddress call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.UpdateShipmentSourceAddressRequest();
          body.address = new TheSellingPartnerApiForFbaInboundOperations.AddressInput();
          body.address.addressLine1 = "";
          body.address.addressLine2 = "";
          body.address.city = "";
          body.address.companyName = "";
          body.address.countryCode = "";
          body.address.email = "";
          body.address.name = "";
          body.address.phoneNumber = "";
          body.address.postalCode = "";
          body.address.stateOrProvinceCode = "";

          instance.updateShipmentSourceAddress(inboundPlanId, shipmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UpdateShipmentSourceAddressResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateShipmentTrackingDetails', function() {
        it('should call updateShipmentTrackingDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for updateShipmentTrackingDetails call and complete the assertions
          /*
          var inboundPlanId = "inboundPlanId_example";
          var shipmentId = "shipmentId_example";
          var body = new TheSellingPartnerApiForFbaInboundOperations.UpdateShipmentTrackingDetailsRequest();
          body.trackingDetails = new TheSellingPartnerApiForFbaInboundOperations.TrackingDetailsInput();
          body.trackingDetails.ltlTrackingDetail = new TheSellingPartnerApiForFbaInboundOperations.LtlTrackingDetailInput();
          body.trackingDetails.ltlTrackingDetail.billOfLadingNumber = "";
          body.trackingDetails.ltlTrackingDetail.freightBillNumber = [""];
          body.trackingDetails.spdTrackingDetail = new TheSellingPartnerApiForFbaInboundOperations.SpdTrackingDetailInput();
          body.trackingDetails.spdTrackingDetail.spdTrackingItems = [new TheSellingPartnerApiForFbaInboundOperations.SpdTrackingItemInput()];
          body.trackingDetails.spdTrackingDetail.spdTrackingItems[0].boxId = "";
          body.trackingDetails.spdTrackingDetail.spdTrackingItems[0].trackingId = "";

          instance.updateShipmentTrackingDetails(inboundPlanId, shipmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForFbaInboundOperations.UpdateShipmentTrackingDetailsResponse);
            expect(data.operationId).to.be.a('string');
            // expect(data.operationId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
