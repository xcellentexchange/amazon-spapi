/*
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/fulfillmentInbound_2024-03-20/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/fulfillmentInbound_2024-03-20/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForFbaInboundOperations);
  }
}(this, function(expect, TheSellingPartnerApiForFbaInboundOperations) {
  'use strict';

  var instance;

  describe('fulfillmentInbound_2024-03-20', function() {
    describe('InboundPlan', function() {
      beforeEach(function() {
        instance = new TheSellingPartnerApiForFbaInboundOperations.InboundPlan();
      });

      it('should create an instance of InboundPlan', function() {
        // TODO: update the code to test InboundPlan
        expect(instance).to.be.a(TheSellingPartnerApiForFbaInboundOperations.InboundPlan);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property inboundPlanId (base name: "inboundPlanId")', function() {
        // TODO: update the code to test the property inboundPlanId
        expect(instance).to.have.property('inboundPlanId');
        // expect(instance.inboundPlanId).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdatedAt (base name: "lastUpdatedAt")', function() {
        // TODO: update the code to test the property lastUpdatedAt
        expect(instance).to.have.property('lastUpdatedAt');
        // expect(instance.lastUpdatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property marketplaceIds (base name: "marketplaceIds")', function() {
        // TODO: update the code to test the property marketplaceIds
        expect(instance).to.have.property('marketplaceIds');
        // expect(instance.marketplaceIds).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property packingOptions (base name: "packingOptions")', function() {
        // TODO: update the code to test the property packingOptions
        expect(instance).to.have.property('packingOptions');
        // expect(instance.packingOptions).to.be(expectedValueLiteral);
      });

      it('should have the property placementOptions (base name: "placementOptions")', function() {
        // TODO: update the code to test the property placementOptions
        expect(instance).to.have.property('placementOptions');
        // expect(instance.placementOptions).to.be(expectedValueLiteral);
      });

      it('should have the property shipments (base name: "shipments")', function() {
        // TODO: update the code to test the property shipments
        expect(instance).to.have.property('shipments');
        // expect(instance.shipments).to.be(expectedValueLiteral);
      });

      it('should have the property sourceAddress (base name: "sourceAddress")', function() {
        // TODO: update the code to test the property sourceAddress
        expect(instance).to.have.property('sourceAddress');
        // expect(instance.sourceAddress).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

    });
  });

}));
