/*
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/fulfillmentInbound_2024-03-20/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/fulfillmentInbound_2024-03-20/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForFbaInboundOperations);
  }
}(this, function(expect, TheSellingPartnerApiForFbaInboundOperations) {
  'use strict';

  var instance;

  describe('fulfillmentInbound_2024-03-20', function() {
    describe('MskuPrepDetail', function() {
      beforeEach(function() {
        instance = new TheSellingPartnerApiForFbaInboundOperations.MskuPrepDetail();
      });

      it('should create an instance of MskuPrepDetail', function() {
        // TODO: update the code to test MskuPrepDetail
        expect(instance).to.be.a(TheSellingPartnerApiForFbaInboundOperations.MskuPrepDetail);
      });

      it('should have the property allOwnersConstraint (base name: "allOwnersConstraint")', function() {
        // TODO: update the code to test the property allOwnersConstraint
        expect(instance).to.have.property('allOwnersConstraint');
        // expect(instance.allOwnersConstraint).to.be(expectedValueLiteral);
      });

      it('should have the property labelOwnerConstraint (base name: "labelOwnerConstraint")', function() {
        // TODO: update the code to test the property labelOwnerConstraint
        expect(instance).to.have.property('labelOwnerConstraint');
        // expect(instance.labelOwnerConstraint).to.be(expectedValueLiteral);
      });

      it('should have the property msku (base name: "msku")', function() {
        // TODO: update the code to test the property msku
        expect(instance).to.have.property('msku');
        // expect(instance.msku).to.be(expectedValueLiteral);
      });

      it('should have the property prepCategory (base name: "prepCategory")', function() {
        // TODO: update the code to test the property prepCategory
        expect(instance).to.have.property('prepCategory');
        // expect(instance.prepCategory).to.be(expectedValueLiteral);
      });

      it('should have the property prepOwnerConstraint (base name: "prepOwnerConstraint")', function() {
        // TODO: update the code to test the property prepOwnerConstraint
        expect(instance).to.have.property('prepOwnerConstraint');
        // expect(instance.prepOwnerConstraint).to.be(expectedValueLiteral);
      });

      it('should have the property prepTypes (base name: "prepTypes")', function() {
        // TODO: update the code to test the property prepTypes
        expect(instance).to.have.property('prepTypes');
        // expect(instance.prepTypes).to.be(expectedValueLiteral);
      });

    });
  });

}));
