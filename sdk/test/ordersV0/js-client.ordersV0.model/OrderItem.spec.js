/*
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ordersV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ordersV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForOrders);
  }
}(this, function(expect, SellingPartnerApiForOrders) {
  'use strict';

  var instance;

  describe('ordersV0', function() {
    describe('OrderItem', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForOrders.OrderItem();
      });

      it('should create an instance of OrderItem', function() {
        // TODO: update the code to test OrderItem
        expect(instance).to.be.a(SellingPartnerApiForOrders.OrderItem);
      });

      it('should have the property ASIN (base name: "ASIN")', function() {
        // TODO: update the code to test the property ASIN
        expect(instance).to.have.property('ASIN');
        // expect(instance.ASIN).to.be(expectedValueLiteral);
      });

      it('should have the property sellerSKU (base name: "SellerSKU")', function() {
        // TODO: update the code to test the property sellerSKU
        expect(instance).to.have.property('sellerSKU');
        // expect(instance.sellerSKU).to.be(expectedValueLiteral);
      });

      it('should have the property orderItemId (base name: "OrderItemId")', function() {
        // TODO: update the code to test the property orderItemId
        expect(instance).to.have.property('orderItemId');
        // expect(instance.orderItemId).to.be(expectedValueLiteral);
      });

      it('should have the property associatedItems (base name: "AssociatedItems")', function() {
        // TODO: update the code to test the property associatedItems
        expect(instance).to.have.property('associatedItems');
        // expect(instance.associatedItems).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "Title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property quantityOrdered (base name: "QuantityOrdered")', function() {
        // TODO: update the code to test the property quantityOrdered
        expect(instance).to.have.property('quantityOrdered');
        // expect(instance.quantityOrdered).to.be(expectedValueLiteral);
      });

      it('should have the property quantityShipped (base name: "QuantityShipped")', function() {
        // TODO: update the code to test the property quantityShipped
        expect(instance).to.have.property('quantityShipped');
        // expect(instance.quantityShipped).to.be(expectedValueLiteral);
      });

      it('should have the property productInfo (base name: "ProductInfo")', function() {
        // TODO: update the code to test the property productInfo
        expect(instance).to.have.property('productInfo');
        // expect(instance.productInfo).to.be(expectedValueLiteral);
      });

      it('should have the property pointsGranted (base name: "PointsGranted")', function() {
        // TODO: update the code to test the property pointsGranted
        expect(instance).to.have.property('pointsGranted');
        // expect(instance.pointsGranted).to.be(expectedValueLiteral);
      });

      it('should have the property itemPrice (base name: "ItemPrice")', function() {
        // TODO: update the code to test the property itemPrice
        expect(instance).to.have.property('itemPrice');
        // expect(instance.itemPrice).to.be(expectedValueLiteral);
      });

      it('should have the property shippingPrice (base name: "ShippingPrice")', function() {
        // TODO: update the code to test the property shippingPrice
        expect(instance).to.have.property('shippingPrice');
        // expect(instance.shippingPrice).to.be(expectedValueLiteral);
      });

      it('should have the property itemTax (base name: "ItemTax")', function() {
        // TODO: update the code to test the property itemTax
        expect(instance).to.have.property('itemTax');
        // expect(instance.itemTax).to.be(expectedValueLiteral);
      });

      it('should have the property shippingTax (base name: "ShippingTax")', function() {
        // TODO: update the code to test the property shippingTax
        expect(instance).to.have.property('shippingTax');
        // expect(instance.shippingTax).to.be(expectedValueLiteral);
      });

      it('should have the property shippingDiscount (base name: "ShippingDiscount")', function() {
        // TODO: update the code to test the property shippingDiscount
        expect(instance).to.have.property('shippingDiscount');
        // expect(instance.shippingDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property shippingDiscountTax (base name: "ShippingDiscountTax")', function() {
        // TODO: update the code to test the property shippingDiscountTax
        expect(instance).to.have.property('shippingDiscountTax');
        // expect(instance.shippingDiscountTax).to.be(expectedValueLiteral);
      });

      it('should have the property promotionDiscount (base name: "PromotionDiscount")', function() {
        // TODO: update the code to test the property promotionDiscount
        expect(instance).to.have.property('promotionDiscount');
        // expect(instance.promotionDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property promotionDiscountTax (base name: "PromotionDiscountTax")', function() {
        // TODO: update the code to test the property promotionDiscountTax
        expect(instance).to.have.property('promotionDiscountTax');
        // expect(instance.promotionDiscountTax).to.be(expectedValueLiteral);
      });

      it('should have the property promotionIds (base name: "PromotionIds")', function() {
        // TODO: update the code to test the property promotionIds
        expect(instance).to.have.property('promotionIds');
        // expect(instance.promotionIds).to.be(expectedValueLiteral);
      });

      it('should have the property cODFee (base name: "CODFee")', function() {
        // TODO: update the code to test the property cODFee
        expect(instance).to.have.property('cODFee');
        // expect(instance.cODFee).to.be(expectedValueLiteral);
      });

      it('should have the property cODFeeDiscount (base name: "CODFeeDiscount")', function() {
        // TODO: update the code to test the property cODFeeDiscount
        expect(instance).to.have.property('cODFeeDiscount');
        // expect(instance.cODFeeDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property isGift (base name: "IsGift")', function() {
        // TODO: update the code to test the property isGift
        expect(instance).to.have.property('isGift');
        // expect(instance.isGift).to.be(expectedValueLiteral);
      });

      it('should have the property conditionNote (base name: "ConditionNote")', function() {
        // TODO: update the code to test the property conditionNote
        expect(instance).to.have.property('conditionNote');
        // expect(instance.conditionNote).to.be(expectedValueLiteral);
      });

      it('should have the property conditionId (base name: "ConditionId")', function() {
        // TODO: update the code to test the property conditionId
        expect(instance).to.have.property('conditionId');
        // expect(instance.conditionId).to.be(expectedValueLiteral);
      });

      it('should have the property conditionSubtypeId (base name: "ConditionSubtypeId")', function() {
        // TODO: update the code to test the property conditionSubtypeId
        expect(instance).to.have.property('conditionSubtypeId');
        // expect(instance.conditionSubtypeId).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledDeliveryStartDate (base name: "ScheduledDeliveryStartDate")', function() {
        // TODO: update the code to test the property scheduledDeliveryStartDate
        expect(instance).to.have.property('scheduledDeliveryStartDate');
        // expect(instance.scheduledDeliveryStartDate).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledDeliveryEndDate (base name: "ScheduledDeliveryEndDate")', function() {
        // TODO: update the code to test the property scheduledDeliveryEndDate
        expect(instance).to.have.property('scheduledDeliveryEndDate');
        // expect(instance.scheduledDeliveryEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property priceDesignation (base name: "PriceDesignation")', function() {
        // TODO: update the code to test the property priceDesignation
        expect(instance).to.have.property('priceDesignation');
        // expect(instance.priceDesignation).to.be(expectedValueLiteral);
      });

      it('should have the property taxCollection (base name: "TaxCollection")', function() {
        // TODO: update the code to test the property taxCollection
        expect(instance).to.have.property('taxCollection');
        // expect(instance.taxCollection).to.be(expectedValueLiteral);
      });

      it('should have the property serialNumberRequired (base name: "SerialNumberRequired")', function() {
        // TODO: update the code to test the property serialNumberRequired
        expect(instance).to.have.property('serialNumberRequired');
        // expect(instance.serialNumberRequired).to.be(expectedValueLiteral);
      });

      it('should have the property isTransparency (base name: "IsTransparency")', function() {
        // TODO: update the code to test the property isTransparency
        expect(instance).to.have.property('isTransparency');
        // expect(instance.isTransparency).to.be(expectedValueLiteral);
      });

      it('should have the property iossNumber (base name: "IossNumber")', function() {
        // TODO: update the code to test the property iossNumber
        expect(instance).to.have.property('iossNumber');
        // expect(instance.iossNumber).to.be(expectedValueLiteral);
      });

      it('should have the property storeChainStoreId (base name: "StoreChainStoreId")', function() {
        // TODO: update the code to test the property storeChainStoreId
        expect(instance).to.have.property('storeChainStoreId');
        // expect(instance.storeChainStoreId).to.be(expectedValueLiteral);
      });

      it('should have the property deemedResellerCategory (base name: "DeemedResellerCategory")', function() {
        // TODO: update the code to test the property deemedResellerCategory
        expect(instance).to.have.property('deemedResellerCategory');
        // expect(instance.deemedResellerCategory).to.be(expectedValueLiteral);
      });

      it('should have the property buyerInfo (base name: "BuyerInfo")', function() {
        // TODO: update the code to test the property buyerInfo
        expect(instance).to.have.property('buyerInfo');
        // expect(instance.buyerInfo).to.be(expectedValueLiteral);
      });

      it('should have the property buyerRequestedCancel (base name: "BuyerRequestedCancel")', function() {
        // TODO: update the code to test the property buyerRequestedCancel
        expect(instance).to.have.property('buyerRequestedCancel');
        // expect(instance.buyerRequestedCancel).to.be(expectedValueLiteral);
      });

      it('should have the property serialNumbers (base name: "SerialNumbers")', function() {
        // TODO: update the code to test the property serialNumbers
        expect(instance).to.have.property('serialNumbers');
        // expect(instance.serialNumbers).to.be(expectedValueLiteral);
      });

      it('should have the property substitutionPreferences (base name: "SubstitutionPreferences")', function() {
        // TODO: update the code to test the property substitutionPreferences
        expect(instance).to.have.property('substitutionPreferences');
        // expect(instance.substitutionPreferences).to.be(expectedValueLiteral);
      });

      it('should have the property measurement (base name: "Measurement")', function() {
        // TODO: update the code to test the property measurement
        expect(instance).to.have.property('measurement');
        // expect(instance.measurement).to.be(expectedValueLiteral);
      });

      it('should have the property shippingConstraints (base name: "ShippingConstraints")', function() {
        // TODO: update the code to test the property shippingConstraints
        expect(instance).to.have.property('shippingConstraints');
        // expect(instance.shippingConstraints).to.be(expectedValueLiteral);
      });

      it('should have the property amazonPrograms (base name: "AmazonPrograms")', function() {
        // TODO: update the code to test the property amazonPrograms
        expect(instance).to.have.property('amazonPrograms');
        // expect(instance.amazonPrograms).to.be(expectedValueLiteral);
      });

    });
  });

}));
