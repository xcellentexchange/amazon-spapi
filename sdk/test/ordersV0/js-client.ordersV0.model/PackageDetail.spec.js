/*
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ordersV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ordersV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForOrders);
  }
}(this, function(expect, SellingPartnerApiForOrders) {
  'use strict';

  var instance;

  describe('ordersV0', function() {
    describe('PackageDetail', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForOrders.PackageDetail();
      });

      it('should create an instance of PackageDetail', function() {
        // TODO: update the code to test PackageDetail
        expect(instance).to.be.a(SellingPartnerApiForOrders.PackageDetail);
      });

      it('should have the property packageReferenceId (base name: "packageReferenceId")', function() {
        // TODO: update the code to test the property packageReferenceId
        expect(instance).to.have.property('packageReferenceId');
        // expect(instance.packageReferenceId).to.be(expectedValueLiteral);
      });

      it('should have the property carrierCode (base name: "carrierCode")', function() {
        // TODO: update the code to test the property carrierCode
        expect(instance).to.have.property('carrierCode');
        // expect(instance.carrierCode).to.be(expectedValueLiteral);
      });

      it('should have the property carrierName (base name: "carrierName")', function() {
        // TODO: update the code to test the property carrierName
        expect(instance).to.have.property('carrierName');
        // expect(instance.carrierName).to.be(expectedValueLiteral);
      });

      it('should have the property shippingMethod (base name: "shippingMethod")', function() {
        // TODO: update the code to test the property shippingMethod
        expect(instance).to.have.property('shippingMethod');
        // expect(instance.shippingMethod).to.be(expectedValueLiteral);
      });

      it('should have the property trackingNumber (base name: "trackingNumber")', function() {
        // TODO: update the code to test the property trackingNumber
        expect(instance).to.have.property('trackingNumber');
        // expect(instance.trackingNumber).to.be(expectedValueLiteral);
      });

      it('should have the property shipDate (base name: "shipDate")', function() {
        // TODO: update the code to test the property shipDate
        expect(instance).to.have.property('shipDate');
        // expect(instance.shipDate).to.be(expectedValueLiteral);
      });

      it('should have the property shipFromSupplySourceId (base name: "shipFromSupplySourceId")', function() {
        // TODO: update the code to test the property shipFromSupplySourceId
        expect(instance).to.have.property('shipFromSupplySourceId');
        // expect(instance.shipFromSupplySourceId).to.be(expectedValueLiteral);
      });

      it('should have the property orderItems (base name: "orderItems")', function() {
        // TODO: update the code to test the property orderItems
        expect(instance).to.have.property('orderItems');
        // expect(instance.orderItems).to.be(expectedValueLiteral);
      });

    });
  });

}));
