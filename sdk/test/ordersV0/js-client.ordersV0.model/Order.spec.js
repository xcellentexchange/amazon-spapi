/*
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ordersV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ordersV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForOrders);
  }
}(this, function(expect, SellingPartnerApiForOrders) {
  'use strict';

  var instance;

  describe('ordersV0', function() {
    describe('Order', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForOrders.Order();
      });

      it('should create an instance of Order', function() {
        // TODO: update the code to test Order
        expect(instance).to.be.a(SellingPartnerApiForOrders.Order);
      });

      it('should have the property amazonOrderId (base name: "AmazonOrderId")', function() {
        // TODO: update the code to test the property amazonOrderId
        expect(instance).to.have.property('amazonOrderId');
        // expect(instance.amazonOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property sellerOrderId (base name: "SellerOrderId")', function() {
        // TODO: update the code to test the property sellerOrderId
        expect(instance).to.have.property('sellerOrderId');
        // expect(instance.sellerOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseDate (base name: "PurchaseDate")', function() {
        // TODO: update the code to test the property purchaseDate
        expect(instance).to.have.property('purchaseDate');
        // expect(instance.purchaseDate).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdateDate (base name: "LastUpdateDate")', function() {
        // TODO: update the code to test the property lastUpdateDate
        expect(instance).to.have.property('lastUpdateDate');
        // expect(instance.lastUpdateDate).to.be(expectedValueLiteral);
      });

      it('should have the property orderStatus (base name: "OrderStatus")', function() {
        // TODO: update the code to test the property orderStatus
        expect(instance).to.have.property('orderStatus');
        // expect(instance.orderStatus).to.be(expectedValueLiteral);
      });

      it('should have the property fulfillmentChannel (base name: "FulfillmentChannel")', function() {
        // TODO: update the code to test the property fulfillmentChannel
        expect(instance).to.have.property('fulfillmentChannel');
        // expect(instance.fulfillmentChannel).to.be(expectedValueLiteral);
      });

      it('should have the property salesChannel (base name: "SalesChannel")', function() {
        // TODO: update the code to test the property salesChannel
        expect(instance).to.have.property('salesChannel');
        // expect(instance.salesChannel).to.be(expectedValueLiteral);
      });

      it('should have the property orderChannel (base name: "OrderChannel")', function() {
        // TODO: update the code to test the property orderChannel
        expect(instance).to.have.property('orderChannel');
        // expect(instance.orderChannel).to.be(expectedValueLiteral);
      });

      it('should have the property shipServiceLevel (base name: "ShipServiceLevel")', function() {
        // TODO: update the code to test the property shipServiceLevel
        expect(instance).to.have.property('shipServiceLevel');
        // expect(instance.shipServiceLevel).to.be(expectedValueLiteral);
      });

      it('should have the property orderTotal (base name: "OrderTotal")', function() {
        // TODO: update the code to test the property orderTotal
        expect(instance).to.have.property('orderTotal');
        // expect(instance.orderTotal).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfItemsShipped (base name: "NumberOfItemsShipped")', function() {
        // TODO: update the code to test the property numberOfItemsShipped
        expect(instance).to.have.property('numberOfItemsShipped');
        // expect(instance.numberOfItemsShipped).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfItemsUnshipped (base name: "NumberOfItemsUnshipped")', function() {
        // TODO: update the code to test the property numberOfItemsUnshipped
        expect(instance).to.have.property('numberOfItemsUnshipped');
        // expect(instance.numberOfItemsUnshipped).to.be(expectedValueLiteral);
      });

      it('should have the property paymentExecutionDetail (base name: "PaymentExecutionDetail")', function() {
        // TODO: update the code to test the property paymentExecutionDetail
        expect(instance).to.have.property('paymentExecutionDetail');
        // expect(instance.paymentExecutionDetail).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethod (base name: "PaymentMethod")', function() {
        // TODO: update the code to test the property paymentMethod
        expect(instance).to.have.property('paymentMethod');
        // expect(instance.paymentMethod).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethodDetails (base name: "PaymentMethodDetails")', function() {
        // TODO: update the code to test the property paymentMethodDetails
        expect(instance).to.have.property('paymentMethodDetails');
        // expect(instance.paymentMethodDetails).to.be(expectedValueLiteral);
      });

      it('should have the property marketplaceId (base name: "MarketplaceId")', function() {
        // TODO: update the code to test the property marketplaceId
        expect(instance).to.have.property('marketplaceId');
        // expect(instance.marketplaceId).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentServiceLevelCategory (base name: "ShipmentServiceLevelCategory")', function() {
        // TODO: update the code to test the property shipmentServiceLevelCategory
        expect(instance).to.have.property('shipmentServiceLevelCategory');
        // expect(instance.shipmentServiceLevelCategory).to.be(expectedValueLiteral);
      });

      it('should have the property easyShipShipmentStatus (base name: "EasyShipShipmentStatus")', function() {
        // TODO: update the code to test the property easyShipShipmentStatus
        expect(instance).to.have.property('easyShipShipmentStatus');
        // expect(instance.easyShipShipmentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property cbaDisplayableShippingLabel (base name: "CbaDisplayableShippingLabel")', function() {
        // TODO: update the code to test the property cbaDisplayableShippingLabel
        expect(instance).to.have.property('cbaDisplayableShippingLabel');
        // expect(instance.cbaDisplayableShippingLabel).to.be(expectedValueLiteral);
      });

      it('should have the property orderType (base name: "OrderType")', function() {
        // TODO: update the code to test the property orderType
        expect(instance).to.have.property('orderType');
        // expect(instance.orderType).to.be(expectedValueLiteral);
      });

      it('should have the property earliestShipDate (base name: "EarliestShipDate")', function() {
        // TODO: update the code to test the property earliestShipDate
        expect(instance).to.have.property('earliestShipDate');
        // expect(instance.earliestShipDate).to.be(expectedValueLiteral);
      });

      it('should have the property latestShipDate (base name: "LatestShipDate")', function() {
        // TODO: update the code to test the property latestShipDate
        expect(instance).to.have.property('latestShipDate');
        // expect(instance.latestShipDate).to.be(expectedValueLiteral);
      });

      it('should have the property earliestDeliveryDate (base name: "EarliestDeliveryDate")', function() {
        // TODO: update the code to test the property earliestDeliveryDate
        expect(instance).to.have.property('earliestDeliveryDate');
        // expect(instance.earliestDeliveryDate).to.be(expectedValueLiteral);
      });

      it('should have the property latestDeliveryDate (base name: "LatestDeliveryDate")', function() {
        // TODO: update the code to test the property latestDeliveryDate
        expect(instance).to.have.property('latestDeliveryDate');
        // expect(instance.latestDeliveryDate).to.be(expectedValueLiteral);
      });

      it('should have the property isBusinessOrder (base name: "IsBusinessOrder")', function() {
        // TODO: update the code to test the property isBusinessOrder
        expect(instance).to.have.property('isBusinessOrder');
        // expect(instance.isBusinessOrder).to.be(expectedValueLiteral);
      });

      it('should have the property isPrime (base name: "IsPrime")', function() {
        // TODO: update the code to test the property isPrime
        expect(instance).to.have.property('isPrime');
        // expect(instance.isPrime).to.be(expectedValueLiteral);
      });

      it('should have the property isPremiumOrder (base name: "IsPremiumOrder")', function() {
        // TODO: update the code to test the property isPremiumOrder
        expect(instance).to.have.property('isPremiumOrder');
        // expect(instance.isPremiumOrder).to.be(expectedValueLiteral);
      });

      it('should have the property isGlobalExpressEnabled (base name: "IsGlobalExpressEnabled")', function() {
        // TODO: update the code to test the property isGlobalExpressEnabled
        expect(instance).to.have.property('isGlobalExpressEnabled');
        // expect(instance.isGlobalExpressEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property replacedOrderId (base name: "ReplacedOrderId")', function() {
        // TODO: update the code to test the property replacedOrderId
        expect(instance).to.have.property('replacedOrderId');
        // expect(instance.replacedOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property isReplacementOrder (base name: "IsReplacementOrder")', function() {
        // TODO: update the code to test the property isReplacementOrder
        expect(instance).to.have.property('isReplacementOrder');
        // expect(instance.isReplacementOrder).to.be(expectedValueLiteral);
      });

      it('should have the property promiseResponseDueDate (base name: "PromiseResponseDueDate")', function() {
        // TODO: update the code to test the property promiseResponseDueDate
        expect(instance).to.have.property('promiseResponseDueDate');
        // expect(instance.promiseResponseDueDate).to.be(expectedValueLiteral);
      });

      it('should have the property isEstimatedShipDateSet (base name: "IsEstimatedShipDateSet")', function() {
        // TODO: update the code to test the property isEstimatedShipDateSet
        expect(instance).to.have.property('isEstimatedShipDateSet');
        // expect(instance.isEstimatedShipDateSet).to.be(expectedValueLiteral);
      });

      it('should have the property isSoldByAB (base name: "IsSoldByAB")', function() {
        // TODO: update the code to test the property isSoldByAB
        expect(instance).to.have.property('isSoldByAB');
        // expect(instance.isSoldByAB).to.be(expectedValueLiteral);
      });

      it('should have the property isIBA (base name: "IsIBA")', function() {
        // TODO: update the code to test the property isIBA
        expect(instance).to.have.property('isIBA');
        // expect(instance.isIBA).to.be(expectedValueLiteral);
      });

      it('should have the property defaultShipFromLocationAddress (base name: "DefaultShipFromLocationAddress")', function() {
        // TODO: update the code to test the property defaultShipFromLocationAddress
        expect(instance).to.have.property('defaultShipFromLocationAddress');
        // expect(instance.defaultShipFromLocationAddress).to.be(expectedValueLiteral);
      });

      it('should have the property buyerInvoicePreference (base name: "BuyerInvoicePreference")', function() {
        // TODO: update the code to test the property buyerInvoicePreference
        expect(instance).to.have.property('buyerInvoicePreference');
        // expect(instance.buyerInvoicePreference).to.be(expectedValueLiteral);
      });

      it('should have the property buyerTaxInformation (base name: "BuyerTaxInformation")', function() {
        // TODO: update the code to test the property buyerTaxInformation
        expect(instance).to.have.property('buyerTaxInformation');
        // expect(instance.buyerTaxInformation).to.be(expectedValueLiteral);
      });

      it('should have the property fulfillmentInstruction (base name: "FulfillmentInstruction")', function() {
        // TODO: update the code to test the property fulfillmentInstruction
        expect(instance).to.have.property('fulfillmentInstruction');
        // expect(instance.fulfillmentInstruction).to.be(expectedValueLiteral);
      });

      it('should have the property isISPU (base name: "IsISPU")', function() {
        // TODO: update the code to test the property isISPU
        expect(instance).to.have.property('isISPU');
        // expect(instance.isISPU).to.be(expectedValueLiteral);
      });

      it('should have the property isAccessPointOrder (base name: "IsAccessPointOrder")', function() {
        // TODO: update the code to test the property isAccessPointOrder
        expect(instance).to.have.property('isAccessPointOrder');
        // expect(instance.isAccessPointOrder).to.be(expectedValueLiteral);
      });

      it('should have the property marketplaceTaxInfo (base name: "MarketplaceTaxInfo")', function() {
        // TODO: update the code to test the property marketplaceTaxInfo
        expect(instance).to.have.property('marketplaceTaxInfo');
        // expect(instance.marketplaceTaxInfo).to.be(expectedValueLiteral);
      });

      it('should have the property sellerDisplayName (base name: "SellerDisplayName")', function() {
        // TODO: update the code to test the property sellerDisplayName
        expect(instance).to.have.property('sellerDisplayName');
        // expect(instance.sellerDisplayName).to.be(expectedValueLiteral);
      });

      it('should have the property shippingAddress (base name: "ShippingAddress")', function() {
        // TODO: update the code to test the property shippingAddress
        expect(instance).to.have.property('shippingAddress');
        // expect(instance.shippingAddress).to.be(expectedValueLiteral);
      });

      it('should have the property buyerInfo (base name: "BuyerInfo")', function() {
        // TODO: update the code to test the property buyerInfo
        expect(instance).to.have.property('buyerInfo');
        // expect(instance.buyerInfo).to.be(expectedValueLiteral);
      });

      it('should have the property automatedShippingSettings (base name: "AutomatedShippingSettings")', function() {
        // TODO: update the code to test the property automatedShippingSettings
        expect(instance).to.have.property('automatedShippingSettings');
        // expect(instance.automatedShippingSettings).to.be(expectedValueLiteral);
      });

      it('should have the property hasRegulatedItems (base name: "HasRegulatedItems")', function() {
        // TODO: update the code to test the property hasRegulatedItems
        expect(instance).to.have.property('hasRegulatedItems');
        // expect(instance.hasRegulatedItems).to.be(expectedValueLiteral);
      });

      it('should have the property electronicInvoiceStatus (base name: "ElectronicInvoiceStatus")', function() {
        // TODO: update the code to test the property electronicInvoiceStatus
        expect(instance).to.have.property('electronicInvoiceStatus');
        // expect(instance.electronicInvoiceStatus).to.be(expectedValueLiteral);
      });

    });
  });

}));
