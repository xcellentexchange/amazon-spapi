/*
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ordersV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ordersV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForOrders);
  }
}(this, function(expect, SellingPartnerApiForOrders) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForOrders.OrdersV0Api();
  });

  describe('ordersV0', function() {
    describe('OrdersV0Api', function() {
      describe('confirmShipment', function() {
        it('should call confirmShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for confirmShipment call
          /*
          var orderId = "orderId_example";
          var payload = new SellingPartnerApiForOrders.ConfirmShipmentRequest();
          payload.packageDetail = new SellingPartnerApiForOrders.PackageDetail();
          payload.packageDetail.packageReferenceId = new SellingPartnerApiForOrders.PackageReferenceId();
          payload.packageDetail.carrierCode = "";
          payload.packageDetail.carrierName = "";
          payload.packageDetail.shippingMethod = "";
          payload.packageDetail.trackingNumber = "";
          payload.packageDetail.shipDate = new Date();
          payload.packageDetail.shipFromSupplySourceId = "";
          payload.packageDetail.orderItems = new SellingPartnerApiForOrders.ConfirmShipmentOrderItemsList();
          payload.codCollectionMethod = "DirectPayment";
          payload.marketplaceId = new SellingPartnerApiForOrders.MarketplaceId();

          instance.confirmShipment(orderId, payload).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrder', function() {
        it('should call getOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrder call and complete the assertions
          /*
          var orderId = "orderId_example";

          instance.getOrder(orderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForOrders.GetOrderResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForOrders.Order);
                  expect(data.payload.amazonOrderId).to.be.a('string');
              // expect(data.payload.amazonOrderId).to.be("");
              expect(data.payload.sellerOrderId).to.be.a('string');
              // expect(data.payload.sellerOrderId).to.be("");
              expect(data.payload.purchaseDate).to.be.a('string');
              // expect(data.payload.purchaseDate).to.be("");
              expect(data.payload.lastUpdateDate).to.be.a('string');
              // expect(data.payload.lastUpdateDate).to.be("");
              expect(data.payload.orderStatus).to.be.a('string');
              // expect(data.payload.orderStatus).to.be("Pending");
              expect(data.payload.fulfillmentChannel).to.be.a('string');
              // expect(data.payload.fulfillmentChannel).to.be("MFN");
              expect(data.payload.salesChannel).to.be.a('string');
              // expect(data.payload.salesChannel).to.be("");
              expect(data.payload.orderChannel).to.be.a('string');
              // expect(data.payload.orderChannel).to.be("");
              expect(data.payload.shipServiceLevel).to.be.a('string');
              // expect(data.payload.shipServiceLevel).to.be("");
              expect(data.payload.orderTotal).to.be.a(SellingPartnerApiForOrders.Money);
                    expect(data.payload.orderTotal.currencyCode).to.be.a('string');
                // expect(data.payload.orderTotal.currencyCode).to.be("");
                expect(data.payload.orderTotal.amount).to.be.a('string');
                // expect(data.payload.orderTotal.amount).to.be("");
              expect(data.payload.numberOfItemsShipped).to.be.a('number');
              // expect(data.payload.numberOfItemsShipped).to.be(0);
              expect(data.payload.numberOfItemsUnshipped).to.be.a('number');
              // expect(data.payload.numberOfItemsUnshipped).to.be(0);
              expect(data.payload.paymentExecutionDetail).to.be.a(SellingPartnerApiForOrders.PaymentExecutionDetailItemList);
                  expect(data.payload.paymentMethod).to.be.a('string');
              // expect(data.payload.paymentMethod).to.be("COD");
              expect(data.payload.paymentMethodDetails).to.be.a(SellingPartnerApiForOrders.PaymentMethodDetailItemList);
                  expect(data.payload.marketplaceId).to.be.a('string');
              // expect(data.payload.marketplaceId).to.be("");
              expect(data.payload.shipmentServiceLevelCategory).to.be.a('string');
              // expect(data.payload.shipmentServiceLevelCategory).to.be("");
              expect(data.payload.easyShipShipmentStatus).to.be.a(SellingPartnerApiForOrders.EasyShipShipmentStatus);
                  expect(data.payload.cbaDisplayableShippingLabel).to.be.a('string');
              // expect(data.payload.cbaDisplayableShippingLabel).to.be("");
              expect(data.payload.orderType).to.be.a('string');
              // expect(data.payload.orderType).to.be("StandardOrder");
              expect(data.payload.earliestShipDate).to.be.a('string');
              // expect(data.payload.earliestShipDate).to.be("");
              expect(data.payload.latestShipDate).to.be.a('string');
              // expect(data.payload.latestShipDate).to.be("");
              expect(data.payload.earliestDeliveryDate).to.be.a('string');
              // expect(data.payload.earliestDeliveryDate).to.be("");
              expect(data.payload.latestDeliveryDate).to.be.a('string');
              // expect(data.payload.latestDeliveryDate).to.be("");
              expect(data.payload.isBusinessOrder).to.be.a('boolean');
              // expect(data.payload.isBusinessOrder).to.be(false);
              expect(data.payload.isPrime).to.be.a('boolean');
              // expect(data.payload.isPrime).to.be(false);
              expect(data.payload.isPremiumOrder).to.be.a('boolean');
              // expect(data.payload.isPremiumOrder).to.be(false);
              expect(data.payload.isGlobalExpressEnabled).to.be.a('boolean');
              // expect(data.payload.isGlobalExpressEnabled).to.be(false);
              expect(data.payload.replacedOrderId).to.be.a('string');
              // expect(data.payload.replacedOrderId).to.be("");
              expect(data.payload.isReplacementOrder).to.be.a('boolean');
              // expect(data.payload.isReplacementOrder).to.be(false);
              expect(data.payload.promiseResponseDueDate).to.be.a('string');
              // expect(data.payload.promiseResponseDueDate).to.be("");
              expect(data.payload.isEstimatedShipDateSet).to.be.a('boolean');
              // expect(data.payload.isEstimatedShipDateSet).to.be(false);
              expect(data.payload.isSoldByAB).to.be.a('boolean');
              // expect(data.payload.isSoldByAB).to.be(false);
              expect(data.payload.isIBA).to.be.a('boolean');
              // expect(data.payload.isIBA).to.be(false);
              expect(data.payload.defaultShipFromLocationAddress).to.be.a(SellingPartnerApiForOrders.Address);
                    expect(data.payload.defaultShipFromLocationAddress.name).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.name).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.companyName).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.companyName).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.addressLine1).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.addressLine1).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.addressLine2).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.addressLine2).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.addressLine3).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.addressLine3).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.city).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.city).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.county).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.county).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.district).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.district).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.stateOrRegion).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.stateOrRegion).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.municipality).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.municipality).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.postalCode).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.postalCode).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.countryCode).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.countryCode).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.phone).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.phone).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.extendedFields).to.be.a(SellingPartnerApiForOrders.AddressExtendedFields);
                      expect(data.payload.defaultShipFromLocationAddress.extendedFields.streetName).to.be.a('string');
                  // expect(data.payload.defaultShipFromLocationAddress.extendedFields.streetName).to.be("");
                  expect(data.payload.defaultShipFromLocationAddress.extendedFields.streetNumber).to.be.a('string');
                  // expect(data.payload.defaultShipFromLocationAddress.extendedFields.streetNumber).to.be("");
                  expect(data.payload.defaultShipFromLocationAddress.extendedFields.complement).to.be.a('string');
                  // expect(data.payload.defaultShipFromLocationAddress.extendedFields.complement).to.be("");
                  expect(data.payload.defaultShipFromLocationAddress.extendedFields.neighborhood).to.be.a('string');
                  // expect(data.payload.defaultShipFromLocationAddress.extendedFields.neighborhood).to.be("");
                expect(data.payload.defaultShipFromLocationAddress.addressType).to.be.a('string');
                // expect(data.payload.defaultShipFromLocationAddress.addressType).to.be("Residential");
              expect(data.payload.buyerInvoicePreference).to.be.a('string');
              // expect(data.payload.buyerInvoicePreference).to.be("INDIVIDUAL");
              expect(data.payload.buyerTaxInformation).to.be.a(SellingPartnerApiForOrders.BuyerTaxInformation);
                    expect(data.payload.buyerTaxInformation.buyerLegalCompanyName).to.be.a('string');
                // expect(data.payload.buyerTaxInformation.buyerLegalCompanyName).to.be("");
                expect(data.payload.buyerTaxInformation.buyerBusinessAddress).to.be.a('string');
                // expect(data.payload.buyerTaxInformation.buyerBusinessAddress).to.be("");
                expect(data.payload.buyerTaxInformation.buyerTaxRegistrationId).to.be.a('string');
                // expect(data.payload.buyerTaxInformation.buyerTaxRegistrationId).to.be("");
                expect(data.payload.buyerTaxInformation.buyerTaxOffice).to.be.a('string');
                // expect(data.payload.buyerTaxInformation.buyerTaxOffice).to.be("");
              expect(data.payload.fulfillmentInstruction).to.be.a(SellingPartnerApiForOrders.FulfillmentInstruction);
                    expect(data.payload.fulfillmentInstruction.fulfillmentSupplySourceId).to.be.a('string');
                // expect(data.payload.fulfillmentInstruction.fulfillmentSupplySourceId).to.be("");
              expect(data.payload.isISPU).to.be.a('boolean');
              // expect(data.payload.isISPU).to.be(false);
              expect(data.payload.isAccessPointOrder).to.be.a('boolean');
              // expect(data.payload.isAccessPointOrder).to.be(false);
              expect(data.payload.marketplaceTaxInfo).to.be.a(SellingPartnerApiForOrders.MarketplaceTaxInfo);
                    {
                  let dataCtr = data.payload.marketplaceTaxInfo.taxClassifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForOrders.TaxClassification);
                    expect(data.name).to.be.a('string');
                    // expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    // expect(data.value).to.be("");
                  }
                }
              expect(data.payload.sellerDisplayName).to.be.a('string');
              // expect(data.payload.sellerDisplayName).to.be("");
              expect(data.payload.shippingAddress).to.be.a(SellingPartnerApiForOrders.Address);
                    expect(data.payload.shippingAddress.name).to.be.a('string');
                // expect(data.payload.shippingAddress.name).to.be("");
                expect(data.payload.shippingAddress.companyName).to.be.a('string');
                // expect(data.payload.shippingAddress.companyName).to.be("");
                expect(data.payload.shippingAddress.addressLine1).to.be.a('string');
                // expect(data.payload.shippingAddress.addressLine1).to.be("");
                expect(data.payload.shippingAddress.addressLine2).to.be.a('string');
                // expect(data.payload.shippingAddress.addressLine2).to.be("");
                expect(data.payload.shippingAddress.addressLine3).to.be.a('string');
                // expect(data.payload.shippingAddress.addressLine3).to.be("");
                expect(data.payload.shippingAddress.city).to.be.a('string');
                // expect(data.payload.shippingAddress.city).to.be("");
                expect(data.payload.shippingAddress.county).to.be.a('string');
                // expect(data.payload.shippingAddress.county).to.be("");
                expect(data.payload.shippingAddress.district).to.be.a('string');
                // expect(data.payload.shippingAddress.district).to.be("");
                expect(data.payload.shippingAddress.stateOrRegion).to.be.a('string');
                // expect(data.payload.shippingAddress.stateOrRegion).to.be("");
                expect(data.payload.shippingAddress.municipality).to.be.a('string');
                // expect(data.payload.shippingAddress.municipality).to.be("");
                expect(data.payload.shippingAddress.postalCode).to.be.a('string');
                // expect(data.payload.shippingAddress.postalCode).to.be("");
                expect(data.payload.shippingAddress.countryCode).to.be.a('string');
                // expect(data.payload.shippingAddress.countryCode).to.be("");
                expect(data.payload.shippingAddress.phone).to.be.a('string');
                // expect(data.payload.shippingAddress.phone).to.be("");
                expect(data.payload.shippingAddress.extendedFields).to.be.a(SellingPartnerApiForOrders.AddressExtendedFields);
                      expect(data.payload.shippingAddress.extendedFields.streetName).to.be.a('string');
                  // expect(data.payload.shippingAddress.extendedFields.streetName).to.be("");
                  expect(data.payload.shippingAddress.extendedFields.streetNumber).to.be.a('string');
                  // expect(data.payload.shippingAddress.extendedFields.streetNumber).to.be("");
                  expect(data.payload.shippingAddress.extendedFields.complement).to.be.a('string');
                  // expect(data.payload.shippingAddress.extendedFields.complement).to.be("");
                  expect(data.payload.shippingAddress.extendedFields.neighborhood).to.be.a('string');
                  // expect(data.payload.shippingAddress.extendedFields.neighborhood).to.be("");
                expect(data.payload.shippingAddress.addressType).to.be.a('string');
                // expect(data.payload.shippingAddress.addressType).to.be("Residential");
              expect(data.payload.buyerInfo).to.be.a(SellingPartnerApiForOrders.BuyerInfo);
                    expect(data.payload.buyerInfo.buyerEmail).to.be.a('string');
                // expect(data.payload.buyerInfo.buyerEmail).to.be("");
                expect(data.payload.buyerInfo.buyerName).to.be.a('string');
                // expect(data.payload.buyerInfo.buyerName).to.be("");
                expect(data.payload.buyerInfo.buyerCounty).to.be.a('string');
                // expect(data.payload.buyerInfo.buyerCounty).to.be("");
                expect(data.payload.buyerInfo.buyerTaxInfo).to.be.a(SellingPartnerApiForOrders.BuyerTaxInfo);
                      expect(data.payload.buyerInfo.buyerTaxInfo.companyLegalName).to.be.a('string');
                  // expect(data.payload.buyerInfo.buyerTaxInfo.companyLegalName).to.be("");
                  expect(data.payload.buyerInfo.buyerTaxInfo.taxingRegion).to.be.a('string');
                  // expect(data.payload.buyerInfo.buyerTaxInfo.taxingRegion).to.be("");
                  {
                    let dataCtr = data.payload.buyerInfo.buyerTaxInfo.taxClassifications;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForOrders.TaxClassification);
                      expect(data.name).to.be.a('string');
                      // expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      // expect(data.value).to.be("");
                    }
                  }
                expect(data.payload.buyerInfo.purchaseOrderNumber).to.be.a('string');
                // expect(data.payload.buyerInfo.purchaseOrderNumber).to.be("");
              expect(data.payload.automatedShippingSettings).to.be.a(SellingPartnerApiForOrders.AutomatedShippingSettings);
                    expect(data.payload.automatedShippingSettings.hasAutomatedShippingSettings).to.be.a('boolean');
                // expect(data.payload.automatedShippingSettings.hasAutomatedShippingSettings).to.be(false);
                expect(data.payload.automatedShippingSettings.automatedCarrier).to.be.a('string');
                // expect(data.payload.automatedShippingSettings.automatedCarrier).to.be("");
                expect(data.payload.automatedShippingSettings.automatedShipMethod).to.be.a('string');
                // expect(data.payload.automatedShippingSettings.automatedShipMethod).to.be("");
              expect(data.payload.hasRegulatedItems).to.be.a('boolean');
              // expect(data.payload.hasRegulatedItems).to.be(false);
              expect(data.payload.electronicInvoiceStatus).to.be.a(SellingPartnerApiForOrders.ElectronicInvoiceStatus);
      
            expect(data.errors).to.be.a(SellingPartnerApiForOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderAddress', function() {
        it('should call getOrderAddress successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderAddress call and complete the assertions
          /*
          var orderId = "orderId_example";

          instance.getOrderAddress(orderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForOrders.GetOrderAddressResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForOrders.OrderAddress);
                  expect(data.payload.amazonOrderId).to.be.a('string');
              // expect(data.payload.amazonOrderId).to.be("");
              expect(data.payload.buyerCompanyName).to.be.a('string');
              // expect(data.payload.buyerCompanyName).to.be("");
              expect(data.payload.shippingAddress).to.be.a(SellingPartnerApiForOrders.Address);
                    expect(data.payload.shippingAddress.name).to.be.a('string');
                // expect(data.payload.shippingAddress.name).to.be("");
                expect(data.payload.shippingAddress.companyName).to.be.a('string');
                // expect(data.payload.shippingAddress.companyName).to.be("");
                expect(data.payload.shippingAddress.addressLine1).to.be.a('string');
                // expect(data.payload.shippingAddress.addressLine1).to.be("");
                expect(data.payload.shippingAddress.addressLine2).to.be.a('string');
                // expect(data.payload.shippingAddress.addressLine2).to.be("");
                expect(data.payload.shippingAddress.addressLine3).to.be.a('string');
                // expect(data.payload.shippingAddress.addressLine3).to.be("");
                expect(data.payload.shippingAddress.city).to.be.a('string');
                // expect(data.payload.shippingAddress.city).to.be("");
                expect(data.payload.shippingAddress.county).to.be.a('string');
                // expect(data.payload.shippingAddress.county).to.be("");
                expect(data.payload.shippingAddress.district).to.be.a('string');
                // expect(data.payload.shippingAddress.district).to.be("");
                expect(data.payload.shippingAddress.stateOrRegion).to.be.a('string');
                // expect(data.payload.shippingAddress.stateOrRegion).to.be("");
                expect(data.payload.shippingAddress.municipality).to.be.a('string');
                // expect(data.payload.shippingAddress.municipality).to.be("");
                expect(data.payload.shippingAddress.postalCode).to.be.a('string');
                // expect(data.payload.shippingAddress.postalCode).to.be("");
                expect(data.payload.shippingAddress.countryCode).to.be.a('string');
                // expect(data.payload.shippingAddress.countryCode).to.be("");
                expect(data.payload.shippingAddress.phone).to.be.a('string');
                // expect(data.payload.shippingAddress.phone).to.be("");
                expect(data.payload.shippingAddress.extendedFields).to.be.a(SellingPartnerApiForOrders.AddressExtendedFields);
                      expect(data.payload.shippingAddress.extendedFields.streetName).to.be.a('string');
                  // expect(data.payload.shippingAddress.extendedFields.streetName).to.be("");
                  expect(data.payload.shippingAddress.extendedFields.streetNumber).to.be.a('string');
                  // expect(data.payload.shippingAddress.extendedFields.streetNumber).to.be("");
                  expect(data.payload.shippingAddress.extendedFields.complement).to.be.a('string');
                  // expect(data.payload.shippingAddress.extendedFields.complement).to.be("");
                  expect(data.payload.shippingAddress.extendedFields.neighborhood).to.be.a('string');
                  // expect(data.payload.shippingAddress.extendedFields.neighborhood).to.be("");
                expect(data.payload.shippingAddress.addressType).to.be.a('string');
                // expect(data.payload.shippingAddress.addressType).to.be("Residential");
              expect(data.payload.deliveryPreferences).to.be.a(SellingPartnerApiForOrders.DeliveryPreferences);
                    expect(data.payload.deliveryPreferences.dropOffLocation).to.be.a('string');
                // expect(data.payload.deliveryPreferences.dropOffLocation).to.be("");
                expect(data.payload.deliveryPreferences.preferredDeliveryTime).to.be.a(SellingPartnerApiForOrders.PreferredDeliveryTime);
                      {
                    let dataCtr = data.payload.deliveryPreferences.preferredDeliveryTime.businessHours;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForOrders.BusinessHours);
                      expect(data.dayOfWeek).to.be.a('string');
                      // expect(data.dayOfWeek).to.be("SUN");
                      {
                        let dataCtr = data.openIntervals;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SellingPartnerApiForOrders.OpenInterval);
                          expect(data.startTime).to.be.a(SellingPartnerApiForOrders.OpenTimeInterval);
                                expect(data.startTime.hour).to.be.a('number');
                            // expect(data.startTime.hour).to.be(0);
                            expect(data.startTime.minute).to.be.a('number');
                            // expect(data.startTime.minute).to.be(0);
                          expect(data.endTime).to.be.a(SellingPartnerApiForOrders.OpenTimeInterval);
                                expect(data.endTime.hour).to.be.a('number');
                            // expect(data.endTime.hour).to.be(0);
                            expect(data.endTime.minute).to.be.a('number');
                            // expect(data.endTime.minute).to.be(0);
                        }
                      }
                    }
                  }
                  {
                    let dataCtr = data.payload.deliveryPreferences.preferredDeliveryTime.exceptionDates;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForOrders.ExceptionDates);
                      expect(data.exceptionDate).to.be.a('string');
                      // expect(data.exceptionDate).to.be("");
                      expect(data.isOpen).to.be.a('boolean');
                      // expect(data.isOpen).to.be(false);
                      {
                        let dataCtr = data.openIntervals;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SellingPartnerApiForOrders.OpenInterval);
                          expect(data.startTime).to.be.a(SellingPartnerApiForOrders.OpenTimeInterval);
                                expect(data.startTime.hour).to.be.a('number');
                            // expect(data.startTime.hour).to.be(0);
                            expect(data.startTime.minute).to.be.a('number');
                            // expect(data.startTime.minute).to.be(0);
                          expect(data.endTime).to.be.a(SellingPartnerApiForOrders.OpenTimeInterval);
                                expect(data.endTime.hour).to.be.a('number');
                            // expect(data.endTime.hour).to.be(0);
                            expect(data.endTime.minute).to.be.a('number');
                            // expect(data.endTime.minute).to.be(0);
                        }
                      }
                    }
                  }
                {
                  let dataCtr = data.payload.deliveryPreferences.otherAttributes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForOrders.OtherDeliveryAttributes);
                  }
                }
                expect(data.payload.deliveryPreferences.addressInstructions).to.be.a('string');
                // expect(data.payload.deliveryPreferences.addressInstructions).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderBuyerInfo', function() {
        it('should call getOrderBuyerInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderBuyerInfo call and complete the assertions
          /*
          var orderId = "orderId_example";

          instance.getOrderBuyerInfo(orderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForOrders.GetOrderBuyerInfoResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForOrders.OrderBuyerInfo);
                  expect(data.payload.amazonOrderId).to.be.a('string');
              // expect(data.payload.amazonOrderId).to.be("");
              expect(data.payload.buyerEmail).to.be.a('string');
              // expect(data.payload.buyerEmail).to.be("");
              expect(data.payload.buyerName).to.be.a('string');
              // expect(data.payload.buyerName).to.be("");
              expect(data.payload.buyerCounty).to.be.a('string');
              // expect(data.payload.buyerCounty).to.be("");
              expect(data.payload.buyerTaxInfo).to.be.a(SellingPartnerApiForOrders.BuyerTaxInfo);
                    expect(data.payload.buyerTaxInfo.companyLegalName).to.be.a('string');
                // expect(data.payload.buyerTaxInfo.companyLegalName).to.be("");
                expect(data.payload.buyerTaxInfo.taxingRegion).to.be.a('string');
                // expect(data.payload.buyerTaxInfo.taxingRegion).to.be("");
                {
                  let dataCtr = data.payload.buyerTaxInfo.taxClassifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForOrders.TaxClassification);
                    expect(data.name).to.be.a('string');
                    // expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    // expect(data.value).to.be("");
                  }
                }
              expect(data.payload.purchaseOrderNumber).to.be.a('string');
              // expect(data.payload.purchaseOrderNumber).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderItems', function() {
        it('should call getOrderItems successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderItems call and complete the assertions
          /*
          var orderId = "orderId_example";
          var opts = {};
          opts.nextToken = "nextToken_example";

          instance.getOrderItems(orderId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForOrders.GetOrderItemsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForOrders.OrderItemsList);
                  expect(data.payload.orderItems).to.be.a(SellingPartnerApiForOrders.OrderItemList);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
              expect(data.payload.amazonOrderId).to.be.a('string');
              // expect(data.payload.amazonOrderId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderItemsBuyerInfo', function() {
        it('should call getOrderItemsBuyerInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderItemsBuyerInfo call and complete the assertions
          /*
          var orderId = "orderId_example";
          var opts = {};
          opts.nextToken = "nextToken_example";

          instance.getOrderItemsBuyerInfo(orderId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForOrders.GetOrderItemsBuyerInfoResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForOrders.OrderItemsBuyerInfoList);
                  expect(data.payload.orderItems).to.be.a(SellingPartnerApiForOrders.OrderItemBuyerInfoList);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
              expect(data.payload.amazonOrderId).to.be.a('string');
              // expect(data.payload.amazonOrderId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderRegulatedInfo', function() {
        it('should call getOrderRegulatedInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderRegulatedInfo call and complete the assertions
          /*
          var orderId = "orderId_example";

          instance.getOrderRegulatedInfo(orderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForOrders.GetOrderRegulatedInfoResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForOrders.OrderRegulatedInfo);
                  expect(data.payload.amazonOrderId).to.be.a('string');
              // expect(data.payload.amazonOrderId).to.be("");
              expect(data.payload.regulatedInformation).to.be.a(SellingPartnerApiForOrders.RegulatedInformation);
                    {
                  let dataCtr = data.payload.regulatedInformation.fields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForOrders.RegulatedInformationField);
                    expect(data.fieldId).to.be.a('string');
                    // expect(data.fieldId).to.be("");
                    expect(data.fieldLabel).to.be.a('string');
                    // expect(data.fieldLabel).to.be("");
                    expect(data.fieldType).to.be.a('string');
                    // expect(data.fieldType).to.be("Text");
                    expect(data.fieldValue).to.be.a('string');
                    // expect(data.fieldValue).to.be("");
                  }
                }
              expect(data.payload.requiresDosageLabel).to.be.a('boolean');
              // expect(data.payload.requiresDosageLabel).to.be(false);
              expect(data.payload.regulatedOrderVerificationStatus).to.be.a(SellingPartnerApiForOrders.RegulatedOrderVerificationStatus);
                    expect(data.payload.regulatedOrderVerificationStatus.status).to.be.a(SellingPartnerApiForOrders.VerificationStatus);
                    expect(data.payload.regulatedOrderVerificationStatus.requiresMerchantAction).to.be.a('boolean');
                // expect(data.payload.regulatedOrderVerificationStatus.requiresMerchantAction).to.be(false);
                {
                  let dataCtr = data.payload.regulatedOrderVerificationStatus.validRejectionReasons;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForOrders.RejectionReason);
                    expect(data.rejectionReasonId).to.be.a('string');
                    // expect(data.rejectionReasonId).to.be("");
                    expect(data.rejectionReasonDescription).to.be.a('string');
                    // expect(data.rejectionReasonDescription).to.be("");
                  }
                }
                expect(data.payload.regulatedOrderVerificationStatus.rejectionReason).to.be.a(SellingPartnerApiForOrders.RejectionReason);
                      expect(data.payload.regulatedOrderVerificationStatus.rejectionReason.rejectionReasonId).to.be.a('string');
                  // expect(data.payload.regulatedOrderVerificationStatus.rejectionReason.rejectionReasonId).to.be("");
                  expect(data.payload.regulatedOrderVerificationStatus.rejectionReason.rejectionReasonDescription).to.be.a('string');
                  // expect(data.payload.regulatedOrderVerificationStatus.rejectionReason.rejectionReasonDescription).to.be("");
                expect(data.payload.regulatedOrderVerificationStatus.reviewDate).to.be.a('string');
                // expect(data.payload.regulatedOrderVerificationStatus.reviewDate).to.be("");
                expect(data.payload.regulatedOrderVerificationStatus.externalReviewerId).to.be.a('string');
                // expect(data.payload.regulatedOrderVerificationStatus.externalReviewerId).to.be("");
                {
                  let dataCtr = data.payload.regulatedOrderVerificationStatus.validVerificationDetails;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForOrders.ValidVerificationDetail);
                    expect(data.verificationDetailType).to.be.a('string');
                    // expect(data.verificationDetailType).to.be("");
                    {
                      let dataCtr = data.validVerificationStatuses;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SellingPartnerApiForOrders.VerificationStatus);
                      }
                    }
                  }
                }
            expect(data.errors).to.be.a(SellingPartnerApiForOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrders', function() {
        it('should call getOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrders call and complete the assertions
          /*
          var marketplaceIds = ["marketplaceIds_example"];
          var opts = {};
          opts.createdAfter = "createdAfter_example";
          opts.createdBefore = "createdBefore_example";
          opts.lastUpdatedAfter = "lastUpdatedAfter_example";
          opts.lastUpdatedBefore = "lastUpdatedBefore_example";
          opts.orderStatuses = ["orderStatuses_example"];
          opts.fulfillmentChannels = ["fulfillmentChannels_example"];
          opts.paymentMethods = ["paymentMethods_example"];
          opts.buyerEmail = "buyerEmail_example";
          opts.sellerOrderId = "sellerOrderId_example";
          opts.maxResultsPerPage = 56;
          opts.easyShipShipmentStatuses = ["easyShipShipmentStatuses_example"];
          opts.electronicInvoiceStatuses = ["electronicInvoiceStatuses_example"];
          opts.nextToken = "nextToken_example";
          opts.amazonOrderIds = ["amazonOrderIds_example"];
          opts.actualFulfillmentSupplySourceId = "actualFulfillmentSupplySourceId_example";
          opts.isISPU = true;
          opts.storeChainStoreId = "storeChainStoreId_example";
          opts.earliestDeliveryDateBefore = "earliestDeliveryDateBefore_example";
          opts.earliestDeliveryDateAfter = "earliestDeliveryDateAfter_example";
          opts.latestDeliveryDateBefore = "latestDeliveryDateBefore_example";
          opts.latestDeliveryDateAfter = "latestDeliveryDateAfter_example";

          instance.getOrders(marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForOrders.GetOrdersResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForOrders.OrdersList);
                  expect(data.payload.orders).to.be.a(SellingPartnerApiForOrders.OrderList);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
              expect(data.payload.lastUpdatedBefore).to.be.a('string');
              // expect(data.payload.lastUpdatedBefore).to.be("");
              expect(data.payload.createdBefore).to.be.a('string');
              // expect(data.payload.createdBefore).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForOrders.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateVerificationStatus', function() {
        it('should call updateVerificationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for updateVerificationStatus call
          /*
          var orderId = "orderId_example";
          var payload = new SellingPartnerApiForOrders.UpdateVerificationStatusRequest();
          payload.regulatedOrderVerificationStatus = new SellingPartnerApiForOrders.UpdateVerificationStatusRequestBody();
          payload.regulatedOrderVerificationStatus.status = new SellingPartnerApiForOrders.VerificationStatus();
          payload.regulatedOrderVerificationStatus.externalReviewerId = "";
          payload.regulatedOrderVerificationStatus.rejectionReasonId = "";
          payload.regulatedOrderVerificationStatus.verificationDetails = new SellingPartnerApiForOrders.VerificationDetails();
          payload.regulatedOrderVerificationStatus.verificationDetails.prescriptionDetail = new SellingPartnerApiForOrders.PrescriptionDetail();
          payload.regulatedOrderVerificationStatus.verificationDetails.prescriptionDetail.prescriptionId = "";
          payload.regulatedOrderVerificationStatus.verificationDetails.prescriptionDetail.expirationDate = new Date();
          payload.regulatedOrderVerificationStatus.verificationDetails.prescriptionDetail.writtenQuantity = 0;
          payload.regulatedOrderVerificationStatus.verificationDetails.prescriptionDetail.totalRefillsAuthorized = 0;
          payload.regulatedOrderVerificationStatus.verificationDetails.prescriptionDetail.refillsRemaining = 0;
          payload.regulatedOrderVerificationStatus.verificationDetails.prescriptionDetail.clinicId = "";
          payload.regulatedOrderVerificationStatus.verificationDetails.prescriptionDetail.usageInstructions = "";

          instance.updateVerificationStatus(orderId, payload).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
