/*
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/fulfillmentOutbound_2020-07-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/fulfillmentOutbound_2020-07-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApisForFulfillmentOutbound);
  }
}(this, function(expect, SellingPartnerApisForFulfillmentOutbound) {
  'use strict';

  var instance;

  describe('fulfillmentOutbound_2020-07-01', function() {
    describe('PackageTrackingDetails', function() {
      beforeEach(function() {
        instance = new SellingPartnerApisForFulfillmentOutbound.PackageTrackingDetails();
      });

      it('should create an instance of PackageTrackingDetails', function() {
        // TODO: update the code to test PackageTrackingDetails
        expect(instance).to.be.a(SellingPartnerApisForFulfillmentOutbound.PackageTrackingDetails);
      });

      it('should have the property packageNumber (base name: "packageNumber")', function() {
        // TODO: update the code to test the property packageNumber
        expect(instance).to.have.property('packageNumber');
        // expect(instance.packageNumber).to.be(expectedValueLiteral);
      });

      it('should have the property trackingNumber (base name: "trackingNumber")', function() {
        // TODO: update the code to test the property trackingNumber
        expect(instance).to.have.property('trackingNumber');
        // expect(instance.trackingNumber).to.be(expectedValueLiteral);
      });

      it('should have the property customerTrackingLink (base name: "customerTrackingLink")', function() {
        // TODO: update the code to test the property customerTrackingLink
        expect(instance).to.have.property('customerTrackingLink');
        // expect(instance.customerTrackingLink).to.be(expectedValueLiteral);
      });

      it('should have the property carrierCode (base name: "carrierCode")', function() {
        // TODO: update the code to test the property carrierCode
        expect(instance).to.have.property('carrierCode');
        // expect(instance.carrierCode).to.be(expectedValueLiteral);
      });

      it('should have the property carrierPhoneNumber (base name: "carrierPhoneNumber")', function() {
        // TODO: update the code to test the property carrierPhoneNumber
        expect(instance).to.have.property('carrierPhoneNumber');
        // expect(instance.carrierPhoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property carrierURL (base name: "carrierURL")', function() {
        // TODO: update the code to test the property carrierURL
        expect(instance).to.have.property('carrierURL');
        // expect(instance.carrierURL).to.be(expectedValueLiteral);
      });

      it('should have the property shipDate (base name: "shipDate")', function() {
        // TODO: update the code to test the property shipDate
        expect(instance).to.have.property('shipDate');
        // expect(instance.shipDate).to.be(expectedValueLiteral);
      });

      it('should have the property estimatedArrivalDate (base name: "estimatedArrivalDate")', function() {
        // TODO: update the code to test the property estimatedArrivalDate
        expect(instance).to.have.property('estimatedArrivalDate');
        // expect(instance.estimatedArrivalDate).to.be(expectedValueLiteral);
      });

      it('should have the property shipToAddress (base name: "shipToAddress")', function() {
        // TODO: update the code to test the property shipToAddress
        expect(instance).to.have.property('shipToAddress');
        // expect(instance.shipToAddress).to.be(expectedValueLiteral);
      });

      it('should have the property currentStatus (base name: "currentStatus")', function() {
        // TODO: update the code to test the property currentStatus
        expect(instance).to.have.property('currentStatus');
        // expect(instance.currentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property currentStatusDescription (base name: "currentStatusDescription")', function() {
        // TODO: update the code to test the property currentStatusDescription
        expect(instance).to.have.property('currentStatusDescription');
        // expect(instance.currentStatusDescription).to.be(expectedValueLiteral);
      });

      it('should have the property signedForBy (base name: "signedForBy")', function() {
        // TODO: update the code to test the property signedForBy
        expect(instance).to.have.property('signedForBy');
        // expect(instance.signedForBy).to.be(expectedValueLiteral);
      });

      it('should have the property additionalLocationInfo (base name: "additionalLocationInfo")', function() {
        // TODO: update the code to test the property additionalLocationInfo
        expect(instance).to.have.property('additionalLocationInfo');
        // expect(instance.additionalLocationInfo).to.be(expectedValueLiteral);
      });

      it('should have the property trackingEvents (base name: "trackingEvents")', function() {
        // TODO: update the code to test the property trackingEvents
        expect(instance).to.have.property('trackingEvents');
        // expect(instance.trackingEvents).to.be(expectedValueLiteral);
      });

    });
  });

}));
