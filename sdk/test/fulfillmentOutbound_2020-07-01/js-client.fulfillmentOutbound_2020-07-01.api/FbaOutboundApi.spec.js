/*
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/fulfillmentOutbound_2020-07-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/fulfillmentOutbound_2020-07-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApisForFulfillmentOutbound);
  }
}(this, function(expect, SellingPartnerApisForFulfillmentOutbound) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApisForFulfillmentOutbound.FbaOutboundApi();
  });

  describe('fulfillmentOutbound_2020-07-01', function() {
    describe('FbaOutboundApi', function() {
      describe('cancelFulfillmentOrder', function() {
        it('should call cancelFulfillmentOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelFulfillmentOrder call and complete the assertions
          /*
          var sellerFulfillmentOrderId = "sellerFulfillmentOrderId_example";

          instance.cancelFulfillmentOrder(sellerFulfillmentOrderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.CancelFulfillmentOrderResponse);
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createFulfillmentOrder', function() {
        it('should call createFulfillmentOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for createFulfillmentOrder call and complete the assertions
          /*
          var body = new SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentOrderRequest();
          body.marketplaceId = "";
          body.sellerFulfillmentOrderId = "";
          body.displayableOrderId = "";
          body.displayableOrderDate = new SellingPartnerApisForFulfillmentOutbound.Timestamp();
          body.displayableOrderComment = "";
          body.shippingSpeedCategory = new SellingPartnerApisForFulfillmentOutbound.ShippingSpeedCategory();
          body.deliveryWindow = new SellingPartnerApisForFulfillmentOutbound.DeliveryWindow();
          body.deliveryWindow.startDate = new SellingPartnerApisForFulfillmentOutbound.Timestamp();
          body.deliveryWindow.endDate = new SellingPartnerApisForFulfillmentOutbound.Timestamp();
          body.destinationAddress = new SellingPartnerApisForFulfillmentOutbound.Address();
          body.destinationAddress.name = "";
          body.destinationAddress.addressLine1 = "";
          body.destinationAddress.addressLine2 = "";
          body.destinationAddress.addressLine3 = "";
          body.destinationAddress.city = "";
          body.destinationAddress.districtOrCounty = "";
          body.destinationAddress.stateOrRegion = "";
          body.destinationAddress.postalCode = "";
          body.destinationAddress.countryCode = "";
          body.destinationAddress.phone = "";
          body.deliveryPreferences = new SellingPartnerApisForFulfillmentOutbound.DeliveryPreferences();
          body.deliveryPreferences.deliveryInstructions = "";
          body.deliveryPreferences.dropOffLocation = new SellingPartnerApisForFulfillmentOutbound.DropOffLocation();
          body.deliveryPreferences.dropOffLocation.type = "FRONT_DOOR";
          body.deliveryPreferences.dropOffLocation.attributes = {key: ""};
          body.fulfillmentAction = new SellingPartnerApisForFulfillmentOutbound.FulfillmentAction();
          body.fulfillmentPolicy = new SellingPartnerApisForFulfillmentOutbound.FulfillmentPolicy();
          body.codSettings = new SellingPartnerApisForFulfillmentOutbound.CODSettings();
          body.codSettings.isCodRequired = false;
          body.codSettings.codCharge = new SellingPartnerApisForFulfillmentOutbound.Money();
          body.codSettings.codCharge.currencyCode = "";
          body.codSettings.codCharge.value = new SellingPartnerApisForFulfillmentOutbound.Decimal();
          body.codSettings.codChargeTax = new SellingPartnerApisForFulfillmentOutbound.Money();
          body.codSettings.codChargeTax.currencyCode = "";
          body.codSettings.codChargeTax.value = new SellingPartnerApisForFulfillmentOutbound.Decimal();
          body.codSettings.shippingCharge = new SellingPartnerApisForFulfillmentOutbound.Money();
          body.codSettings.shippingCharge.currencyCode = "";
          body.codSettings.shippingCharge.value = new SellingPartnerApisForFulfillmentOutbound.Decimal();
          body.codSettings.shippingChargeTax = new SellingPartnerApisForFulfillmentOutbound.Money();
          body.codSettings.shippingChargeTax.currencyCode = "";
          body.codSettings.shippingChargeTax.value = new SellingPartnerApisForFulfillmentOutbound.Decimal();
          body.shipFromCountryCode = "";
          body.notificationEmails = new SellingPartnerApisForFulfillmentOutbound.NotificationEmailList();
          body.featureConstraints = [new SellingPartnerApisForFulfillmentOutbound.FeatureSettings()];
          body.featureConstraints[0].featureName = "";
          body.featureConstraints[0].featureFulfillmentPolicy = "Required";
          body.items = new SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentOrderItemList();
          body.paymentInformation = new SellingPartnerApisForFulfillmentOutbound.PaymentInformationList();

          instance.createFulfillmentOrder(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentOrderResponse);
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createFulfillmentReturn', function() {
        it('should call createFulfillmentReturn successfully', function(done) {
          // TODO: uncomment, update parameter values for createFulfillmentReturn call and complete the assertions
          /*
          var body = new SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentReturnRequest();
          body.items = new SellingPartnerApisForFulfillmentOutbound.CreateReturnItemList();
          var sellerFulfillmentOrderId = "sellerFulfillmentOrderId_example";

          instance.createFulfillmentReturn(body, sellerFulfillmentOrderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentReturnResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentReturnResult);
                  expect(data.payload.returnItems).to.be.a(SellingPartnerApisForFulfillmentOutbound.ReturnItemList);
                  expect(data.payload.invalidReturnItems).to.be.a(SellingPartnerApisForFulfillmentOutbound.InvalidReturnItemList);
                  expect(data.payload.returnAuthorizations).to.be.a(SellingPartnerApisForFulfillmentOutbound.ReturnAuthorizationList);
      
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deliveryOffers', function() {
        it('should call deliveryOffers successfully', function(done) {
          // TODO: uncomment, update parameter values for deliveryOffers call and complete the assertions
          /*
          var body = new SellingPartnerApisForFulfillmentOutbound.GetDeliveryOffersRequest();
          body.product = new SellingPartnerApisForFulfillmentOutbound.GetDeliveryOffersProduct();
          body.product.productIdentifier = new SellingPartnerApisForFulfillmentOutbound.ProductIdentifier();
          body.product.productIdentifier.merchantSku = "";
          body.product.amount = new SellingPartnerApisForFulfillmentOutbound.Amount();
          body.product.amount.unitOfMeasure = "Eaches";
          body.product.amount.value = new SellingPartnerApisForFulfillmentOutbound.Decimal();
          body.terms = new SellingPartnerApisForFulfillmentOutbound.GetDeliveryOffersTerms();
          body.terms.origin = new SellingPartnerApisForFulfillmentOutbound.Origin();
          body.terms.origin.countryCode = "";
          body.terms.destination = new SellingPartnerApisForFulfillmentOutbound.Destination();
          body.terms.destination.deliveryAddress = new SellingPartnerApisForFulfillmentOutbound.VariablePrecisionAddress();
          body.terms.destination.deliveryAddress.addressLine1 = "";
          body.terms.destination.deliveryAddress.addressLine2 = "";
          body.terms.destination.deliveryAddress.addressLine3 = "";
          body.terms.destination.deliveryAddress.city = "";
          body.terms.destination.deliveryAddress.districtOrCounty = "";
          body.terms.destination.deliveryAddress.stateOrRegion = "";
          body.terms.destination.deliveryAddress.postalCode = "";
          body.terms.destination.deliveryAddress.countryCode = "";
          body.terms.destination.ipAddress = new SellingPartnerApisForFulfillmentOutbound.IpAddress();

          instance.deliveryOffers(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetDeliveryOffersResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetDeliveryOffersResult);
                  expect(data.payload.deliveryOffers).to.be.a(SellingPartnerApisForFulfillmentOutbound.DeliveryOffersList);
      
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeatureInventory', function() {
        it('should call getFeatureInventory successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeatureInventory call and complete the assertions
          /*
          var marketplaceId = "marketplaceId_example";
          var featureName = "featureName_example";
          var opts = {};
          opts.nextToken = "nextToken_example";
          opts.queryStartDate = new Date("2013-10-20T19:20:30+01:00");

          instance.getFeatureInventory(marketplaceId, featureName, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFeatureInventoryResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFeatureInventoryResult);
                  expect(data.payload.marketplaceId).to.be.a('string');
              // expect(data.payload.marketplaceId).to.be("");
              expect(data.payload.featureName).to.be.a('string');
              // expect(data.payload.featureName).to.be("");
              expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
              {
                let dataCtr = data.payload.featureSkus;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.FeatureSku);
                  expect(data.sellerSku).to.be.a('string');
                  // expect(data.sellerSku).to.be("");
                  expect(data.fnSku).to.be.a('string');
                  // expect(data.fnSku).to.be("");
                  expect(data.asin).to.be.a('string');
                  // expect(data.asin).to.be("");
                  expect(data.skuCount).to.be.a('number');
                  // expect(data.skuCount).to.be();
                  {
                    let dataCtr = data.overlappingSkus;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      // expect(data).to.be("");
                    }
                  }
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeatureSKU', function() {
        it('should call getFeatureSKU successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeatureSKU call and complete the assertions
          /*
          var marketplaceId = "marketplaceId_example";
          var featureName = "featureName_example";
          var sellerSku = "sellerSku_example";

          instance.getFeatureSKU(marketplaceId, featureName, sellerSku).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFeatureSkuResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFeatureSkuResult);
                  expect(data.payload.marketplaceId).to.be.a('string');
              // expect(data.payload.marketplaceId).to.be("");
              expect(data.payload.featureName).to.be.a('string');
              // expect(data.payload.featureName).to.be("");
              expect(data.payload.isEligible).to.be.a('boolean');
              // expect(data.payload.isEligible).to.be(false);
              {
                let dataCtr = data.payload.ineligibleReasons;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.payload.skuInfo).to.be.a(SellingPartnerApisForFulfillmentOutbound.FeatureSku);
                    expect(data.payload.skuInfo.sellerSku).to.be.a('string');
                // expect(data.payload.skuInfo.sellerSku).to.be("");
                expect(data.payload.skuInfo.fnSku).to.be.a('string');
                // expect(data.payload.skuInfo.fnSku).to.be("");
                expect(data.payload.skuInfo.asin).to.be.a('string');
                // expect(data.payload.skuInfo.asin).to.be("");
                expect(data.payload.skuInfo.skuCount).to.be.a('number');
                // expect(data.payload.skuInfo.skuCount).to.be();
                {
                  let dataCtr = data.payload.skuInfo.overlappingSkus;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeatures', function() {
        it('should call getFeatures successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeatures call and complete the assertions
          /*
          var marketplaceId = "marketplaceId_example";

          instance.getFeatures(marketplaceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFeaturesResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFeaturesResult);
                  expect(data.payload.features).to.be.a(SellingPartnerApisForFulfillmentOutbound.Features);
      
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFulfillmentOrder', function() {
        it('should call getFulfillmentOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for getFulfillmentOrder call and complete the assertions
          /*
          var sellerFulfillmentOrderId = "sellerFulfillmentOrderId_example";

          instance.getFulfillmentOrder(sellerFulfillmentOrderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFulfillmentOrderResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFulfillmentOrderResult);
                  expect(data.payload.fulfillmentOrder).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentOrder);
                    expect(data.payload.fulfillmentOrder.sellerFulfillmentOrderId).to.be.a('string');
                // expect(data.payload.fulfillmentOrder.sellerFulfillmentOrderId).to.be("");
                expect(data.payload.fulfillmentOrder.marketplaceId).to.be.a('string');
                // expect(data.payload.fulfillmentOrder.marketplaceId).to.be("");
                expect(data.payload.fulfillmentOrder.displayableOrderId).to.be.a('string');
                // expect(data.payload.fulfillmentOrder.displayableOrderId).to.be("");
                expect(data.payload.fulfillmentOrder.displayableOrderDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                    expect(data.payload.fulfillmentOrder.displayableOrderComment).to.be.a('string');
                // expect(data.payload.fulfillmentOrder.displayableOrderComment).to.be("");
                expect(data.payload.fulfillmentOrder.shippingSpeedCategory).to.be.a(SellingPartnerApisForFulfillmentOutbound.ShippingSpeedCategory);
                    expect(data.payload.fulfillmentOrder.deliveryWindow).to.be.a(SellingPartnerApisForFulfillmentOutbound.DeliveryWindow);
                      expect(data.payload.fulfillmentOrder.deliveryWindow.startDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                      expect(data.payload.fulfillmentOrder.deliveryWindow.endDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
          
                expect(data.payload.fulfillmentOrder.destinationAddress).to.be.a(SellingPartnerApisForFulfillmentOutbound.Address);
                      expect(data.payload.fulfillmentOrder.destinationAddress.name).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.name).to.be("");
                  expect(data.payload.fulfillmentOrder.destinationAddress.addressLine1).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.addressLine1).to.be("");
                  expect(data.payload.fulfillmentOrder.destinationAddress.addressLine2).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.addressLine2).to.be("");
                  expect(data.payload.fulfillmentOrder.destinationAddress.addressLine3).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.addressLine3).to.be("");
                  expect(data.payload.fulfillmentOrder.destinationAddress.city).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.city).to.be("");
                  expect(data.payload.fulfillmentOrder.destinationAddress.districtOrCounty).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.districtOrCounty).to.be("");
                  expect(data.payload.fulfillmentOrder.destinationAddress.stateOrRegion).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.stateOrRegion).to.be("");
                  expect(data.payload.fulfillmentOrder.destinationAddress.postalCode).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.postalCode).to.be("");
                  expect(data.payload.fulfillmentOrder.destinationAddress.countryCode).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.countryCode).to.be("");
                  expect(data.payload.fulfillmentOrder.destinationAddress.phone).to.be.a('string');
                  // expect(data.payload.fulfillmentOrder.destinationAddress.phone).to.be("");
                expect(data.payload.fulfillmentOrder.fulfillmentAction).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentAction);
                    expect(data.payload.fulfillmentOrder.fulfillmentPolicy).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentPolicy);
                    expect(data.payload.fulfillmentOrder.codSettings).to.be.a(SellingPartnerApisForFulfillmentOutbound.CODSettings);
                      expect(data.payload.fulfillmentOrder.codSettings.isCodRequired).to.be.a('boolean');
                  // expect(data.payload.fulfillmentOrder.codSettings.isCodRequired).to.be(false);
                  expect(data.payload.fulfillmentOrder.codSettings.codCharge).to.be.a(SellingPartnerApisForFulfillmentOutbound.Money);
                        expect(data.payload.fulfillmentOrder.codSettings.codCharge.currencyCode).to.be.a('string');
                    // expect(data.payload.fulfillmentOrder.codSettings.codCharge.currencyCode).to.be("");
                    expect(data.payload.fulfillmentOrder.codSettings.codCharge.value).to.be.a(SellingPartnerApisForFulfillmentOutbound.Decimal);
            
                  expect(data.payload.fulfillmentOrder.codSettings.codChargeTax).to.be.a(SellingPartnerApisForFulfillmentOutbound.Money);
                        expect(data.payload.fulfillmentOrder.codSettings.codChargeTax.currencyCode).to.be.a('string');
                    // expect(data.payload.fulfillmentOrder.codSettings.codChargeTax.currencyCode).to.be("");
                    expect(data.payload.fulfillmentOrder.codSettings.codChargeTax.value).to.be.a(SellingPartnerApisForFulfillmentOutbound.Decimal);
            
                  expect(data.payload.fulfillmentOrder.codSettings.shippingCharge).to.be.a(SellingPartnerApisForFulfillmentOutbound.Money);
                        expect(data.payload.fulfillmentOrder.codSettings.shippingCharge.currencyCode).to.be.a('string');
                    // expect(data.payload.fulfillmentOrder.codSettings.shippingCharge.currencyCode).to.be("");
                    expect(data.payload.fulfillmentOrder.codSettings.shippingCharge.value).to.be.a(SellingPartnerApisForFulfillmentOutbound.Decimal);
            
                  expect(data.payload.fulfillmentOrder.codSettings.shippingChargeTax).to.be.a(SellingPartnerApisForFulfillmentOutbound.Money);
                        expect(data.payload.fulfillmentOrder.codSettings.shippingChargeTax.currencyCode).to.be.a('string');
                    // expect(data.payload.fulfillmentOrder.codSettings.shippingChargeTax.currencyCode).to.be("");
                    expect(data.payload.fulfillmentOrder.codSettings.shippingChargeTax.value).to.be.a(SellingPartnerApisForFulfillmentOutbound.Decimal);
            
                expect(data.payload.fulfillmentOrder.receivedDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                    expect(data.payload.fulfillmentOrder.fulfillmentOrderStatus).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentOrderStatus);
                    expect(data.payload.fulfillmentOrder.statusUpdatedDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                    expect(data.payload.fulfillmentOrder.notificationEmails).to.be.a(SellingPartnerApisForFulfillmentOutbound.NotificationEmailList);
                    {
                  let dataCtr = data.payload.fulfillmentOrder.featureConstraints;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.FeatureSettings);
                    expect(data.featureName).to.be.a('string');
                    // expect(data.featureName).to.be("");
                    expect(data.featureFulfillmentPolicy).to.be.a('string');
                    // expect(data.featureFulfillmentPolicy).to.be("Required");
                  }
                }
              expect(data.payload.fulfillmentOrderItems).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentOrderItemList);
                  expect(data.payload.fulfillmentShipments).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentShipmentList);
                  expect(data.payload.returnItems).to.be.a(SellingPartnerApisForFulfillmentOutbound.ReturnItemList);
                  expect(data.payload.returnAuthorizations).to.be.a(SellingPartnerApisForFulfillmentOutbound.ReturnAuthorizationList);
                  expect(data.payload.paymentInformation).to.be.a(SellingPartnerApisForFulfillmentOutbound.PaymentInformationList);
      
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFulfillmentPreview', function() {
        it('should call getFulfillmentPreview successfully', function(done) {
          // TODO: uncomment, update parameter values for getFulfillmentPreview call and complete the assertions
          /*
          var body = new SellingPartnerApisForFulfillmentOutbound.GetFulfillmentPreviewRequest();
          body.marketplaceId = "";
          body.address = new SellingPartnerApisForFulfillmentOutbound.Address();
          body.address.name = "";
          body.address.addressLine1 = "";
          body.address.addressLine2 = "";
          body.address.addressLine3 = "";
          body.address.city = "";
          body.address.districtOrCounty = "";
          body.address.stateOrRegion = "";
          body.address.postalCode = "";
          body.address.countryCode = "";
          body.address.phone = "";
          body.items = new SellingPartnerApisForFulfillmentOutbound.GetFulfillmentPreviewItemList();
          body.shippingSpeedCategories = new SellingPartnerApisForFulfillmentOutbound.ShippingSpeedCategoryList();
          body.includeCODFulfillmentPreview = false;
          body.includeDeliveryWindows = false;
          body.featureConstraints = [new SellingPartnerApisForFulfillmentOutbound.FeatureSettings()];
          body.featureConstraints[0].featureName = "";
          body.featureConstraints[0].featureFulfillmentPolicy = "Required";

          instance.getFulfillmentPreview(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFulfillmentPreviewResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetFulfillmentPreviewResult);
                  expect(data.payload.fulfillmentPreviews).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentPreviewList);
      
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPackageTrackingDetails', function() {
        it('should call getPackageTrackingDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getPackageTrackingDetails call and complete the assertions
          /*
          var packageNumber = 56;

          instance.getPackageTrackingDetails(packageNumber).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.GetPackageTrackingDetailsResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.PackageTrackingDetails);
                  expect(data.payload.packageNumber).to.be.a('number');
              // expect(data.payload.packageNumber).to.be(0);
              expect(data.payload.trackingNumber).to.be.a('string');
              // expect(data.payload.trackingNumber).to.be("");
              expect(data.payload.customerTrackingLink).to.be.a('string');
              // expect(data.payload.customerTrackingLink).to.be("");
              expect(data.payload.carrierCode).to.be.a('string');
              // expect(data.payload.carrierCode).to.be("");
              expect(data.payload.carrierPhoneNumber).to.be.a('string');
              // expect(data.payload.carrierPhoneNumber).to.be("");
              expect(data.payload.carrierURL).to.be.a('string');
              // expect(data.payload.carrierURL).to.be("");
              expect(data.payload.shipDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                  expect(data.payload.estimatedArrivalDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                  expect(data.payload.shipToAddress).to.be.a(SellingPartnerApisForFulfillmentOutbound.TrackingAddress);
                    expect(data.payload.shipToAddress.city).to.be.a('string');
                // expect(data.payload.shipToAddress.city).to.be("");
                expect(data.payload.shipToAddress.state).to.be.a('string');
                // expect(data.payload.shipToAddress.state).to.be("");
                expect(data.payload.shipToAddress.country).to.be.a('string');
                // expect(data.payload.shipToAddress.country).to.be("");
              expect(data.payload.currentStatus).to.be.a(SellingPartnerApisForFulfillmentOutbound.CurrentStatus);
                  expect(data.payload.currentStatusDescription).to.be.a('string');
              // expect(data.payload.currentStatusDescription).to.be("");
              expect(data.payload.signedForBy).to.be.a('string');
              // expect(data.payload.signedForBy).to.be("");
              expect(data.payload.additionalLocationInfo).to.be.a(SellingPartnerApisForFulfillmentOutbound.AdditionalLocationInfo);
                  expect(data.payload.trackingEvents).to.be.a(SellingPartnerApisForFulfillmentOutbound.TrackingEventList);
      
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listAllFulfillmentOrders', function() {
        it('should call listAllFulfillmentOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for listAllFulfillmentOrders call and complete the assertions
          /*
          var opts = {};
          opts.queryStartDate = new Date("2013-10-20T19:20:30+01:00");
          opts.nextToken = "nextToken_example";

          instance.listAllFulfillmentOrders(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.ListAllFulfillmentOrdersResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.ListAllFulfillmentOrdersResult);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
              {
                let dataCtr = data.payload.fulfillmentOrders;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentOrder);
                  expect(data.sellerFulfillmentOrderId).to.be.a('string');
                  // expect(data.sellerFulfillmentOrderId).to.be("");
                  expect(data.marketplaceId).to.be.a('string');
                  // expect(data.marketplaceId).to.be("");
                  expect(data.displayableOrderId).to.be.a('string');
                  // expect(data.displayableOrderId).to.be("");
                  expect(data.displayableOrderDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                      expect(data.displayableOrderComment).to.be.a('string');
                  // expect(data.displayableOrderComment).to.be("");
                  expect(data.shippingSpeedCategory).to.be.a(SellingPartnerApisForFulfillmentOutbound.ShippingSpeedCategory);
                      expect(data.deliveryWindow).to.be.a(SellingPartnerApisForFulfillmentOutbound.DeliveryWindow);
                        expect(data.deliveryWindow.startDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                        expect(data.deliveryWindow.endDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
            
                  expect(data.destinationAddress).to.be.a(SellingPartnerApisForFulfillmentOutbound.Address);
                        expect(data.destinationAddress.name).to.be.a('string');
                    // expect(data.destinationAddress.name).to.be("");
                    expect(data.destinationAddress.addressLine1).to.be.a('string');
                    // expect(data.destinationAddress.addressLine1).to.be("");
                    expect(data.destinationAddress.addressLine2).to.be.a('string');
                    // expect(data.destinationAddress.addressLine2).to.be("");
                    expect(data.destinationAddress.addressLine3).to.be.a('string');
                    // expect(data.destinationAddress.addressLine3).to.be("");
                    expect(data.destinationAddress.city).to.be.a('string');
                    // expect(data.destinationAddress.city).to.be("");
                    expect(data.destinationAddress.districtOrCounty).to.be.a('string');
                    // expect(data.destinationAddress.districtOrCounty).to.be("");
                    expect(data.destinationAddress.stateOrRegion).to.be.a('string');
                    // expect(data.destinationAddress.stateOrRegion).to.be("");
                    expect(data.destinationAddress.postalCode).to.be.a('string');
                    // expect(data.destinationAddress.postalCode).to.be("");
                    expect(data.destinationAddress.countryCode).to.be.a('string');
                    // expect(data.destinationAddress.countryCode).to.be("");
                    expect(data.destinationAddress.phone).to.be.a('string');
                    // expect(data.destinationAddress.phone).to.be("");
                  expect(data.fulfillmentAction).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentAction);
                      expect(data.fulfillmentPolicy).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentPolicy);
                      expect(data.codSettings).to.be.a(SellingPartnerApisForFulfillmentOutbound.CODSettings);
                        expect(data.codSettings.isCodRequired).to.be.a('boolean');
                    // expect(data.codSettings.isCodRequired).to.be(false);
                    expect(data.codSettings.codCharge).to.be.a(SellingPartnerApisForFulfillmentOutbound.Money);
                          expect(data.codSettings.codCharge.currencyCode).to.be.a('string');
                      // expect(data.codSettings.codCharge.currencyCode).to.be("");
                      expect(data.codSettings.codCharge.value).to.be.a(SellingPartnerApisForFulfillmentOutbound.Decimal);
              
                    expect(data.codSettings.codChargeTax).to.be.a(SellingPartnerApisForFulfillmentOutbound.Money);
                          expect(data.codSettings.codChargeTax.currencyCode).to.be.a('string');
                      // expect(data.codSettings.codChargeTax.currencyCode).to.be("");
                      expect(data.codSettings.codChargeTax.value).to.be.a(SellingPartnerApisForFulfillmentOutbound.Decimal);
              
                    expect(data.codSettings.shippingCharge).to.be.a(SellingPartnerApisForFulfillmentOutbound.Money);
                          expect(data.codSettings.shippingCharge.currencyCode).to.be.a('string');
                      // expect(data.codSettings.shippingCharge.currencyCode).to.be("");
                      expect(data.codSettings.shippingCharge.value).to.be.a(SellingPartnerApisForFulfillmentOutbound.Decimal);
              
                    expect(data.codSettings.shippingChargeTax).to.be.a(SellingPartnerApisForFulfillmentOutbound.Money);
                          expect(data.codSettings.shippingChargeTax.currencyCode).to.be.a('string');
                      // expect(data.codSettings.shippingChargeTax.currencyCode).to.be("");
                      expect(data.codSettings.shippingChargeTax.value).to.be.a(SellingPartnerApisForFulfillmentOutbound.Decimal);
              
                  expect(data.receivedDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                      expect(data.fulfillmentOrderStatus).to.be.a(SellingPartnerApisForFulfillmentOutbound.FulfillmentOrderStatus);
                      expect(data.statusUpdatedDate).to.be.a(SellingPartnerApisForFulfillmentOutbound.Timestamp);
                      expect(data.notificationEmails).to.be.a(SellingPartnerApisForFulfillmentOutbound.NotificationEmailList);
                      {
                    let dataCtr = data.featureConstraints;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.FeatureSettings);
                      expect(data.featureName).to.be.a('string');
                      // expect(data.featureName).to.be("");
                      expect(data.featureFulfillmentPolicy).to.be.a('string');
                      // expect(data.featureFulfillmentPolicy).to.be("Required");
                    }
                  }
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listReturnReasonCodes', function() {
        it('should call listReturnReasonCodes successfully', function(done) {
          // TODO: uncomment, update parameter values for listReturnReasonCodes call and complete the assertions
          /*
          var sellerSku = "sellerSku_example";
          var opts = {};
          opts.marketplaceId = "marketplaceId_example";
          opts.sellerFulfillmentOrderId = "sellerFulfillmentOrderId_example";
          opts.language = "language_example";

          instance.listReturnReasonCodes(sellerSku, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.ListReturnReasonCodesResponse);
            expect(data.payload).to.be.a(SellingPartnerApisForFulfillmentOutbound.ListReturnReasonCodesResult);
                  expect(data.payload.reasonCodeDetails).to.be.a(SellingPartnerApisForFulfillmentOutbound.ReasonCodeDetailsList);
      
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitFulfillmentOrderStatusUpdate', function() {
        it('should call submitFulfillmentOrderStatusUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for submitFulfillmentOrderStatusUpdate call and complete the assertions
          /*
          var sellerFulfillmentOrderId = "sellerFulfillmentOrderId_example";
          var body = new SellingPartnerApisForFulfillmentOutbound.SubmitFulfillmentOrderStatusUpdateRequest();
          body.fulfillmentOrderStatus = new SellingPartnerApisForFulfillmentOutbound.FulfillmentOrderStatus();

          instance.submitFulfillmentOrderStatusUpdate(sellerFulfillmentOrderId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.SubmitFulfillmentOrderStatusUpdateResponse);
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateFulfillmentOrder', function() {
        it('should call updateFulfillmentOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for updateFulfillmentOrder call and complete the assertions
          /*
          var body = new SellingPartnerApisForFulfillmentOutbound.UpdateFulfillmentOrderRequest();
          body.marketplaceId = "";
          body.displayableOrderId = "";
          body.displayableOrderDate = new SellingPartnerApisForFulfillmentOutbound.Timestamp();
          body.displayableOrderComment = "";
          body.shippingSpeedCategory = new SellingPartnerApisForFulfillmentOutbound.ShippingSpeedCategory();
          body.destinationAddress = new SellingPartnerApisForFulfillmentOutbound.Address();
          body.destinationAddress.name = "";
          body.destinationAddress.addressLine1 = "";
          body.destinationAddress.addressLine2 = "";
          body.destinationAddress.addressLine3 = "";
          body.destinationAddress.city = "";
          body.destinationAddress.districtOrCounty = "";
          body.destinationAddress.stateOrRegion = "";
          body.destinationAddress.postalCode = "";
          body.destinationAddress.countryCode = "";
          body.destinationAddress.phone = "";
          body.fulfillmentAction = new SellingPartnerApisForFulfillmentOutbound.FulfillmentAction();
          body.fulfillmentPolicy = new SellingPartnerApisForFulfillmentOutbound.FulfillmentPolicy();
          body.shipFromCountryCode = "";
          body.notificationEmails = new SellingPartnerApisForFulfillmentOutbound.NotificationEmailList();
          body.featureConstraints = [new SellingPartnerApisForFulfillmentOutbound.FeatureSettings()];
          body.featureConstraints[0].featureName = "";
          body.featureConstraints[0].featureFulfillmentPolicy = "Required";
          body.items = new SellingPartnerApisForFulfillmentOutbound.UpdateFulfillmentOrderItemList();
          var sellerFulfillmentOrderId = "sellerFulfillmentOrderId_example";

          instance.updateFulfillmentOrder(body, sellerFulfillmentOrderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApisForFulfillmentOutbound.UpdateFulfillmentOrderResponse);
            expect(data.errors).to.be.a(SellingPartnerApisForFulfillmentOutbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
