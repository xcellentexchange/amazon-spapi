/*
 * Selling Partner API for Feeds
 * Effective **June 27, 2024**, the Selling Partner API for Feeds v2020-09-04 will no longer be available and all calls to it will fail. Integrations that rely on the Feeds API must migrate to [Feeds v2021-06-30](https://developer-docs.amazon.com/sp-api/docs/feeds-api-v2021-06-30-reference) to avoid service disruption.
 *
 * OpenAPI spec version: 2020-09-04
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/feeds_2020-09-04/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/feeds_2020-09-04/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFeeds);
  }
}(this, function(expect, SellingPartnerApiForFeeds) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForFeeds.FeedsApi();
  });

  describe('feeds_2020-09-04', function() {
    describe('FeedsApi', function() {
      describe('cancelFeed', function() {
        it('should call cancelFeed successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelFeed call and complete the assertions
          /*
          var feedId = "feedId_example";

          instance.cancelFeed(feedId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFeeds.CancelFeedResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForFeeds.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createFeed', function() {
        it('should call createFeed successfully', function(done) {
          // TODO: uncomment, update parameter values for createFeed call and complete the assertions
          /*
          var body = new SellingPartnerApiForFeeds.CreateFeedSpecification();
          body.feedType = "";
          body.marketplaceIds = [""];
          body.inputFeedDocumentId = "";
          body.feedOptions = new SellingPartnerApiForFeeds.FeedOptions();

          instance.createFeed(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFeeds.CreateFeedResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFeeds.CreateFeedResult);
                  expect(data.payload.feedId).to.be.a('string');
              // expect(data.payload.feedId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFeeds.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createFeedDocument', function() {
        it('should call createFeedDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for createFeedDocument call and complete the assertions
          /*
          var body = new SellingPartnerApiForFeeds.CreateFeedDocumentSpecification();
          body.contentType = "";

          instance.createFeedDocument(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFeeds.CreateFeedDocumentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFeeds.CreateFeedDocumentResult);
                  expect(data.payload.feedDocumentId).to.be.a('string');
              // expect(data.payload.feedDocumentId).to.be("");
              expect(data.payload.url).to.be.a('string');
              // expect(data.payload.url).to.be("");
              expect(data.payload.encryptionDetails).to.be.a(SellingPartnerApiForFeeds.FeedDocumentEncryptionDetails);
                    expect(data.payload.encryptionDetails.standard).to.be.a('string');
                // expect(data.payload.encryptionDetails.standard).to.be("AES");
                expect(data.payload.encryptionDetails.initializationVector).to.be.a('string');
                // expect(data.payload.encryptionDetails.initializationVector).to.be("");
                expect(data.payload.encryptionDetails.key).to.be.a('string');
                // expect(data.payload.encryptionDetails.key).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFeeds.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeed', function() {
        it('should call getFeed successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeed call and complete the assertions
          /*
          var feedId = "feedId_example";

          instance.getFeed(feedId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFeeds.GetFeedResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFeeds.Feed);
                  expect(data.payload.feedId).to.be.a('string');
              // expect(data.payload.feedId).to.be("");
              expect(data.payload.feedType).to.be.a('string');
              // expect(data.payload.feedType).to.be("");
              {
                let dataCtr = data.payload.marketplaceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.payload.createdTime).to.be.a(Date);
              // expect(data.payload.createdTime).to.be(new Date());
              expect(data.payload.processingStatus).to.be.a('string');
              // expect(data.payload.processingStatus).to.be("CANCELLED");
              expect(data.payload.processingStartTime).to.be.a(Date);
              // expect(data.payload.processingStartTime).to.be(new Date());
              expect(data.payload.processingEndTime).to.be.a(Date);
              // expect(data.payload.processingEndTime).to.be(new Date());
              expect(data.payload.resultFeedDocumentId).to.be.a('string');
              // expect(data.payload.resultFeedDocumentId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFeeds.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeedDocument', function() {
        it('should call getFeedDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeedDocument call and complete the assertions
          /*
          var feedDocumentId = "feedDocumentId_example";

          instance.getFeedDocument(feedDocumentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFeeds.GetFeedDocumentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFeeds.FeedDocument);
                  expect(data.payload.feedDocumentId).to.be.a('string');
              // expect(data.payload.feedDocumentId).to.be("");
              expect(data.payload.url).to.be.a('string');
              // expect(data.payload.url).to.be("");
              expect(data.payload.encryptionDetails).to.be.a(SellingPartnerApiForFeeds.FeedDocumentEncryptionDetails);
                    expect(data.payload.encryptionDetails.standard).to.be.a('string');
                // expect(data.payload.encryptionDetails.standard).to.be("AES");
                expect(data.payload.encryptionDetails.initializationVector).to.be.a('string');
                // expect(data.payload.encryptionDetails.initializationVector).to.be("");
                expect(data.payload.encryptionDetails.key).to.be.a('string');
                // expect(data.payload.encryptionDetails.key).to.be("");
              expect(data.payload.compressionAlgorithm).to.be.a('string');
              // expect(data.payload.compressionAlgorithm).to.be("GZIP");
            expect(data.errors).to.be.a(SellingPartnerApiForFeeds.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeeds', function() {
        it('should call getFeeds successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeeds call and complete the assertions
          /*
          var opts = {};
          opts.feedTypes = ["feedTypes_example"];
          opts.marketplaceIds = ["marketplaceIds_example"];
          opts.pageSize = 10;
          opts.processingStatuses = ["processingStatuses_example"];
          opts.createdSince = new Date("2013-10-20T19:20:30+01:00");
          opts.createdUntil = new Date("2013-10-20T19:20:30+01:00");
          opts.nextToken = "nextToken_example";

          instance.getFeeds(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFeeds.GetFeedsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFeeds.FeedList);
                expect(data.nextToken).to.be.a('string');
            // expect(data.nextToken).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFeeds.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
