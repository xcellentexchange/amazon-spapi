/*
 * Selling Partner API for Easy Ship
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.
 *
 * OpenAPI spec version: 2022-03-23
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/easyShip_2022-03-23/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/easyShip_2022-03-23/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForEasyShip);
  }
}(this, function(expect, SellingPartnerApiForEasyShip) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForEasyShip.EasyShipApi();
  });

  describe('easyShip_2022-03-23', function() {
    describe('EasyShipApi', function() {
      describe('createScheduledPackage', function() {
        it('should call createScheduledPackage successfully', function(done) {
          // TODO: uncomment, update parameter values for createScheduledPackage call and complete the assertions
          /*
          var createScheduledPackageRequest = new SellingPartnerApiForEasyShip.CreateScheduledPackageRequest();
          createScheduledPackageRequest.amazonOrderId = new SellingPartnerApiForEasyShip.AmazonOrderId();
          createScheduledPackageRequest.marketplaceId = new SellingPartnerApiForEasyShip.ModelString();
          createScheduledPackageRequest.packageDetails = new SellingPartnerApiForEasyShip.PackageDetails();
          createScheduledPackageRequest.packageDetails.packageItems = new SellingPartnerApiForEasyShip.Items();
          createScheduledPackageRequest.packageDetails.packageTimeSlot = new SellingPartnerApiForEasyShip.TimeSlot();
          createScheduledPackageRequest.packageDetails.packageTimeSlot.slotId = new SellingPartnerApiForEasyShip.ModelString();
          createScheduledPackageRequest.packageDetails.packageTimeSlot.startTime = ;
          createScheduledPackageRequest.packageDetails.packageTimeSlot.endTime = ;
          createScheduledPackageRequest.packageDetails.packageTimeSlot.handoverMethod = new SellingPartnerApiForEasyShip.HandoverMethod();
          createScheduledPackageRequest.packageDetails.packageIdentifier = new SellingPartnerApiForEasyShip.PackageIdentifier();

          instance.createScheduledPackage(createScheduledPackageRequest).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForEasyShip.ModelPackage);
            expect(data.scheduledPackageId).to.be.a(SellingPartnerApiForEasyShip.ScheduledPackageId);
                  expect(data.scheduledPackageId.amazonOrderId).to.be.a(SellingPartnerApiForEasyShip.AmazonOrderId);
                  expect(data.scheduledPackageId.packageId).to.be.a(SellingPartnerApiForEasyShip.PackageId);
      
            expect(data.packageDimensions).to.be.a(SellingPartnerApiForEasyShip.Dimensions);
                  expect(data.packageDimensions.length).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                  expect(data.packageDimensions.width).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                  expect(data.packageDimensions.height).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                  expect(data.packageDimensions.unit).to.be.a(SellingPartnerApiForEasyShip.UnitOfLength);
                  expect(data.packageDimensions.identifier).to.be.a(SellingPartnerApiForEasyShip.ModelString);
      
            expect(data.packageWeight).to.be.a(SellingPartnerApiForEasyShip.Weight);
                  expect(data.packageWeight.value).to.be.a(SellingPartnerApiForEasyShip.WeightValue);
                  expect(data.packageWeight.unit).to.be.a(SellingPartnerApiForEasyShip.UnitOfWeight);
      
            expect(data.packageItems).to.be.a(SellingPartnerApiForEasyShip.Items);
                expect(data.packageTimeSlot).to.be.a(SellingPartnerApiForEasyShip.TimeSlot);
                  expect(data.packageTimeSlot.slotId).to.be.a(SellingPartnerApiForEasyShip.ModelString);
                  expect(data.packageTimeSlot.startTime).to.be.a(Date);
              // expect(data.packageTimeSlot.startTime).to.be();
              expect(data.packageTimeSlot.endTime).to.be.a(Date);
              // expect(data.packageTimeSlot.endTime).to.be();
              expect(data.packageTimeSlot.handoverMethod).to.be.a(SellingPartnerApiForEasyShip.HandoverMethod);
      
            expect(data.packageIdentifier).to.be.a(SellingPartnerApiForEasyShip.PackageIdentifier);
                expect(data.invoice).to.be.a(SellingPartnerApiForEasyShip.InvoiceData);
                  expect(data.invoice.invoiceNumber).to.be.a(SellingPartnerApiForEasyShip.ModelString);
                  expect(data.invoice.invoiceDate).to.be.a(Date);
              // expect(data.invoice.invoiceDate).to.be();
            expect(data.packageStatus).to.be.a(SellingPartnerApiForEasyShip.PackageStatus);
                expect(data.trackingDetails).to.be.a(SellingPartnerApiForEasyShip.TrackingDetails);
                  expect(data.trackingDetails.trackingId).to.be.a(SellingPartnerApiForEasyShip.ModelString);
      

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createScheduledPackageBulk', function() {
        it('should call createScheduledPackageBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for createScheduledPackageBulk call and complete the assertions
          /*
          var createScheduledPackagesRequest = new SellingPartnerApiForEasyShip.CreateScheduledPackagesRequest();
          createScheduledPackagesRequest.marketplaceId = new SellingPartnerApiForEasyShip.ModelString();
          createScheduledPackagesRequest.orderScheduleDetailsList = [new SellingPartnerApiForEasyShip.OrderScheduleDetails()];
          createScheduledPackagesRequest.orderScheduleDetailsList[0].amazonOrderId = new SellingPartnerApiForEasyShip.AmazonOrderId();
          createScheduledPackagesRequest.orderScheduleDetailsList[0].packageDetails = new SellingPartnerApiForEasyShip.PackageDetails();
          createScheduledPackagesRequest.orderScheduleDetailsList[0].packageDetails.packageItems = new SellingPartnerApiForEasyShip.Items();
          createScheduledPackagesRequest.orderScheduleDetailsList[0].packageDetails.packageTimeSlot = new SellingPartnerApiForEasyShip.TimeSlot();
          createScheduledPackagesRequest.orderScheduleDetailsList[0].packageDetails.packageTimeSlot.slotId = new SellingPartnerApiForEasyShip.ModelString();
          createScheduledPackagesRequest.orderScheduleDetailsList[0].packageDetails.packageTimeSlot.startTime = ;
          createScheduledPackagesRequest.orderScheduleDetailsList[0].packageDetails.packageTimeSlot.endTime = ;
          createScheduledPackagesRequest.orderScheduleDetailsList[0].packageDetails.packageTimeSlot.handoverMethod = new SellingPartnerApiForEasyShip.HandoverMethod();
          createScheduledPackagesRequest.orderScheduleDetailsList[0].packageDetails.packageIdentifier = new SellingPartnerApiForEasyShip.PackageIdentifier();
          createScheduledPackagesRequest.labelFormat = new SellingPartnerApiForEasyShip.LabelFormat();

          instance.createScheduledPackageBulk(createScheduledPackagesRequest).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForEasyShip.CreateScheduledPackagesResponse);
            {
              let dataCtr = data.scheduledPackages;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForEasyShip.ModelPackage);
                expect(data.scheduledPackageId).to.be.a(SellingPartnerApiForEasyShip.ScheduledPackageId);
                      expect(data.scheduledPackageId.amazonOrderId).to.be.a(SellingPartnerApiForEasyShip.AmazonOrderId);
                      expect(data.scheduledPackageId.packageId).to.be.a(SellingPartnerApiForEasyShip.PackageId);
          
                expect(data.packageDimensions).to.be.a(SellingPartnerApiForEasyShip.Dimensions);
                      expect(data.packageDimensions.length).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                      expect(data.packageDimensions.width).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                      expect(data.packageDimensions.height).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                      expect(data.packageDimensions.unit).to.be.a(SellingPartnerApiForEasyShip.UnitOfLength);
                      expect(data.packageDimensions.identifier).to.be.a(SellingPartnerApiForEasyShip.ModelString);
          
                expect(data.packageWeight).to.be.a(SellingPartnerApiForEasyShip.Weight);
                      expect(data.packageWeight.value).to.be.a(SellingPartnerApiForEasyShip.WeightValue);
                      expect(data.packageWeight.unit).to.be.a(SellingPartnerApiForEasyShip.UnitOfWeight);
          
                expect(data.packageItems).to.be.a(SellingPartnerApiForEasyShip.Items);
                    expect(data.packageTimeSlot).to.be.a(SellingPartnerApiForEasyShip.TimeSlot);
                      expect(data.packageTimeSlot.slotId).to.be.a(SellingPartnerApiForEasyShip.ModelString);
                      expect(data.packageTimeSlot.startTime).to.be.a(Date);
                  // expect(data.packageTimeSlot.startTime).to.be();
                  expect(data.packageTimeSlot.endTime).to.be.a(Date);
                  // expect(data.packageTimeSlot.endTime).to.be();
                  expect(data.packageTimeSlot.handoverMethod).to.be.a(SellingPartnerApiForEasyShip.HandoverMethod);
          
                expect(data.packageIdentifier).to.be.a(SellingPartnerApiForEasyShip.PackageIdentifier);
                    expect(data.invoice).to.be.a(SellingPartnerApiForEasyShip.InvoiceData);
                      expect(data.invoice.invoiceNumber).to.be.a(SellingPartnerApiForEasyShip.ModelString);
                      expect(data.invoice.invoiceDate).to.be.a(Date);
                  // expect(data.invoice.invoiceDate).to.be();
                expect(data.packageStatus).to.be.a(SellingPartnerApiForEasyShip.PackageStatus);
                    expect(data.trackingDetails).to.be.a(SellingPartnerApiForEasyShip.TrackingDetails);
                      expect(data.trackingDetails.trackingId).to.be.a(SellingPartnerApiForEasyShip.ModelString);
          
              }
            }
            {
              let dataCtr = data.rejectedOrders;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForEasyShip.RejectedOrder);
                expect(data.amazonOrderId).to.be.a(SellingPartnerApiForEasyShip.AmazonOrderId);
                    expect(data.error).to.be.a(SellingPartnerApiForEasyShip.Error);
                      expect(data.error.code).to.be.a('string');
                  // expect(data.error.code).to.be("");
                  expect(data.error.message).to.be.a('string');
                  // expect(data.error.message).to.be("");
                  expect(data.error.details).to.be.a('string');
                  // expect(data.error.details).to.be("");
              }
            }
            expect(data.printableDocumentsUrl).to.be.a(SellingPartnerApiForEasyShip.URL);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getScheduledPackage', function() {
        it('should call getScheduledPackage successfully', function(done) {
          // TODO: uncomment, update parameter values for getScheduledPackage call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceId = "marketplaceId_example";

          instance.getScheduledPackage(amazonOrderId, marketplaceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForEasyShip.ModelPackage);
            expect(data.scheduledPackageId).to.be.a(SellingPartnerApiForEasyShip.ScheduledPackageId);
                  expect(data.scheduledPackageId.amazonOrderId).to.be.a(SellingPartnerApiForEasyShip.AmazonOrderId);
                  expect(data.scheduledPackageId.packageId).to.be.a(SellingPartnerApiForEasyShip.PackageId);
      
            expect(data.packageDimensions).to.be.a(SellingPartnerApiForEasyShip.Dimensions);
                  expect(data.packageDimensions.length).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                  expect(data.packageDimensions.width).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                  expect(data.packageDimensions.height).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                  expect(data.packageDimensions.unit).to.be.a(SellingPartnerApiForEasyShip.UnitOfLength);
                  expect(data.packageDimensions.identifier).to.be.a(SellingPartnerApiForEasyShip.ModelString);
      
            expect(data.packageWeight).to.be.a(SellingPartnerApiForEasyShip.Weight);
                  expect(data.packageWeight.value).to.be.a(SellingPartnerApiForEasyShip.WeightValue);
                  expect(data.packageWeight.unit).to.be.a(SellingPartnerApiForEasyShip.UnitOfWeight);
      
            expect(data.packageItems).to.be.a(SellingPartnerApiForEasyShip.Items);
                expect(data.packageTimeSlot).to.be.a(SellingPartnerApiForEasyShip.TimeSlot);
                  expect(data.packageTimeSlot.slotId).to.be.a(SellingPartnerApiForEasyShip.ModelString);
                  expect(data.packageTimeSlot.startTime).to.be.a(Date);
              // expect(data.packageTimeSlot.startTime).to.be();
              expect(data.packageTimeSlot.endTime).to.be.a(Date);
              // expect(data.packageTimeSlot.endTime).to.be();
              expect(data.packageTimeSlot.handoverMethod).to.be.a(SellingPartnerApiForEasyShip.HandoverMethod);
      
            expect(data.packageIdentifier).to.be.a(SellingPartnerApiForEasyShip.PackageIdentifier);
                expect(data.invoice).to.be.a(SellingPartnerApiForEasyShip.InvoiceData);
                  expect(data.invoice.invoiceNumber).to.be.a(SellingPartnerApiForEasyShip.ModelString);
                  expect(data.invoice.invoiceDate).to.be.a(Date);
              // expect(data.invoice.invoiceDate).to.be();
            expect(data.packageStatus).to.be.a(SellingPartnerApiForEasyShip.PackageStatus);
                expect(data.trackingDetails).to.be.a(SellingPartnerApiForEasyShip.TrackingDetails);
                  expect(data.trackingDetails.trackingId).to.be.a(SellingPartnerApiForEasyShip.ModelString);
      

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listHandoverSlots', function() {
        it('should call listHandoverSlots successfully', function(done) {
          // TODO: uncomment, update parameter values for listHandoverSlots call and complete the assertions
          /*
          var opts = {};
          opts.listHandoverSlotsRequest = new SellingPartnerApiForEasyShip.ListHandoverSlotsRequest();
          opts.listHandoverSlotsRequest.marketplaceId = new SellingPartnerApiForEasyShip.ModelString();
          opts.listHandoverSlotsRequest.amazonOrderId = new SellingPartnerApiForEasyShip.AmazonOrderId();
          opts.listHandoverSlotsRequest.packageDimensions = new SellingPartnerApiForEasyShip.Dimensions();
          opts.listHandoverSlotsRequest.packageDimensions.length = new SellingPartnerApiForEasyShip.Dimension();
          opts.listHandoverSlotsRequest.packageDimensions.width = new SellingPartnerApiForEasyShip.Dimension();
          opts.listHandoverSlotsRequest.packageDimensions.height = new SellingPartnerApiForEasyShip.Dimension();
          opts.listHandoverSlotsRequest.packageDimensions.unit = new SellingPartnerApiForEasyShip.UnitOfLength();
          opts.listHandoverSlotsRequest.packageDimensions.identifier = new SellingPartnerApiForEasyShip.ModelString();
          opts.listHandoverSlotsRequest.packageWeight = new SellingPartnerApiForEasyShip.Weight();
          opts.listHandoverSlotsRequest.packageWeight.value = new SellingPartnerApiForEasyShip.WeightValue();
          opts.listHandoverSlotsRequest.packageWeight.unit = new SellingPartnerApiForEasyShip.UnitOfWeight();

          instance.listHandoverSlots(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForEasyShip.ListHandoverSlotsResponse);
            expect(data.amazonOrderId).to.be.a(SellingPartnerApiForEasyShip.AmazonOrderId);
                expect(data.timeSlots).to.be.a(SellingPartnerApiForEasyShip.TimeSlots);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateScheduledPackages', function() {
        it('should call updateScheduledPackages successfully', function(done) {
          // TODO: uncomment, update parameter values for updateScheduledPackages call and complete the assertions
          /*
          var opts = {};
          opts.updateScheduledPackagesRequest = new SellingPartnerApiForEasyShip.UpdateScheduledPackagesRequest();
          opts.updateScheduledPackagesRequest.marketplaceId = new SellingPartnerApiForEasyShip.ModelString();
          opts.updateScheduledPackagesRequest.updatePackageDetailsList = new SellingPartnerApiForEasyShip.UpdatePackageDetailsList();

          instance.updateScheduledPackages(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForEasyShip.Packages);
            {
              let dataCtr = data.packages;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForEasyShip.ModelPackage);
                expect(data.scheduledPackageId).to.be.a(SellingPartnerApiForEasyShip.ScheduledPackageId);
                      expect(data.scheduledPackageId.amazonOrderId).to.be.a(SellingPartnerApiForEasyShip.AmazonOrderId);
                      expect(data.scheduledPackageId.packageId).to.be.a(SellingPartnerApiForEasyShip.PackageId);
          
                expect(data.packageDimensions).to.be.a(SellingPartnerApiForEasyShip.Dimensions);
                      expect(data.packageDimensions.length).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                      expect(data.packageDimensions.width).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                      expect(data.packageDimensions.height).to.be.a(SellingPartnerApiForEasyShip.Dimension);
                      expect(data.packageDimensions.unit).to.be.a(SellingPartnerApiForEasyShip.UnitOfLength);
                      expect(data.packageDimensions.identifier).to.be.a(SellingPartnerApiForEasyShip.ModelString);
          
                expect(data.packageWeight).to.be.a(SellingPartnerApiForEasyShip.Weight);
                      expect(data.packageWeight.value).to.be.a(SellingPartnerApiForEasyShip.WeightValue);
                      expect(data.packageWeight.unit).to.be.a(SellingPartnerApiForEasyShip.UnitOfWeight);
          
                expect(data.packageItems).to.be.a(SellingPartnerApiForEasyShip.Items);
                    expect(data.packageTimeSlot).to.be.a(SellingPartnerApiForEasyShip.TimeSlot);
                      expect(data.packageTimeSlot.slotId).to.be.a(SellingPartnerApiForEasyShip.ModelString);
                      expect(data.packageTimeSlot.startTime).to.be.a(Date);
                  // expect(data.packageTimeSlot.startTime).to.be();
                  expect(data.packageTimeSlot.endTime).to.be.a(Date);
                  // expect(data.packageTimeSlot.endTime).to.be();
                  expect(data.packageTimeSlot.handoverMethod).to.be.a(SellingPartnerApiForEasyShip.HandoverMethod);
          
                expect(data.packageIdentifier).to.be.a(SellingPartnerApiForEasyShip.PackageIdentifier);
                    expect(data.invoice).to.be.a(SellingPartnerApiForEasyShip.InvoiceData);
                      expect(data.invoice.invoiceNumber).to.be.a(SellingPartnerApiForEasyShip.ModelString);
                      expect(data.invoice.invoiceDate).to.be.a(Date);
                  // expect(data.invoice.invoiceDate).to.be();
                expect(data.packageStatus).to.be.a(SellingPartnerApiForEasyShip.PackageStatus);
                    expect(data.trackingDetails).to.be.a(SellingPartnerApiForEasyShip.TrackingDetails);
                      expect(data.trackingDetails.trackingId).to.be.a(SellingPartnerApiForEasyShip.ModelString);
          
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
