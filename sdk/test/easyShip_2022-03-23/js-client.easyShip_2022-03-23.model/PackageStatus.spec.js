/*
 * Selling Partner API for Easy Ship
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.
 *
 * OpenAPI spec version: 2022-03-23
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/easyShip_2022-03-23/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/easyShip_2022-03-23/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForEasyShip);
  }
}(this, function(expect, SellingPartnerApiForEasyShip) {
  'use strict';

  var instance;

  describe('easyShip_2022-03-23', function() {
    describe('PackageStatus', function() {
      beforeEach(function() {
        instance = SellingPartnerApiForEasyShip.PackageStatus;
      });

      it('should create an instance of PackageStatus', function() {
        // TODO: update the code to test PackageStatus
        expect(instance).to.be.a('object');
      });

      it('should have the property readyForPickup', function() {
        expect(instance).to.have.property('readyForPickup');
        expect(instance.readyForPickup).to.be("ReadyForPickup");
      });

      it('should have the property pickedUp', function() {
        expect(instance).to.have.property('pickedUp');
        expect(instance.pickedUp).to.be("PickedUp");
      });

      it('should have the property atOriginFC', function() {
        expect(instance).to.have.property('atOriginFC');
        expect(instance.atOriginFC).to.be("AtOriginFC");
      });

      it('should have the property atDestinationFC', function() {
        expect(instance).to.have.property('atDestinationFC');
        expect(instance.atDestinationFC).to.be("AtDestinationFC");
      });

      it('should have the property delivered', function() {
        expect(instance).to.have.property('delivered');
        expect(instance.delivered).to.be("Delivered");
      });

      it('should have the property rejected', function() {
        expect(instance).to.have.property('rejected');
        expect(instance.rejected).to.be("Rejected");
      });

      it('should have the property undeliverable', function() {
        expect(instance).to.have.property('undeliverable');
        expect(instance.undeliverable).to.be("Undeliverable");
      });

      it('should have the property returnedToSeller', function() {
        expect(instance).to.have.property('returnedToSeller');
        expect(instance.returnedToSeller).to.be("ReturnedToSeller");
      });

      it('should have the property lostInTransit', function() {
        expect(instance).to.have.property('lostInTransit');
        expect(instance.lostInTransit).to.be("LostInTransit");
      });

      it('should have the property labelCanceled', function() {
        expect(instance).to.have.property('labelCanceled');
        expect(instance.labelCanceled).to.be("LabelCanceled");
      });

      it('should have the property damagedInTransit', function() {
        expect(instance).to.have.property('damagedInTransit');
        expect(instance.damagedInTransit).to.be("DamagedInTransit");
      });

      it('should have the property outForDelivery', function() {
        expect(instance).to.have.property('outForDelivery');
        expect(instance.outForDelivery).to.be("OutForDelivery");
      });

    });
  });

}));
