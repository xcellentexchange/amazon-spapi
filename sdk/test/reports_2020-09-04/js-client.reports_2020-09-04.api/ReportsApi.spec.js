/*
 * Selling Partner API for Reports
 * Effective **June 27, 2024**, the Selling Partner API for Reports v2020-09-04 will no longer be available and all calls to it will fail. Integrations that rely on the Reports API must migrate to [Reports v2021-06-30](https://developer-docs.amazon.com/sp-api/docs/reports-api-v2021-06-30-reference) to avoid service disruption.
 *
 * OpenAPI spec version: 2020-09-04
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/reports_2020-09-04/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/reports_2020-09-04/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForReports);
  }
}(this, function(expect, SellingPartnerApiForReports) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForReports.ReportsApi();
  });

  describe('reports_2020-09-04', function() {
    describe('ReportsApi', function() {
      describe('cancelReport', function() {
        it('should call cancelReport successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelReport call and complete the assertions
          /*
          var reportId = "reportId_example";

          instance.cancelReport(reportId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReports.CancelReportResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForReports.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelReportSchedule', function() {
        it('should call cancelReportSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelReportSchedule call and complete the assertions
          /*
          var reportScheduleId = "reportScheduleId_example";

          instance.cancelReportSchedule(reportScheduleId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReports.CancelReportScheduleResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForReports.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createReport', function() {
        it('should call createReport successfully', function(done) {
          // TODO: uncomment, update parameter values for createReport call and complete the assertions
          /*
          var body = new SellingPartnerApiForReports.CreateReportSpecification();
          body.reportOptions = new SellingPartnerApiForReports.ReportOptions();
          body.reportType = "";
          body.dataStartTime = new Date();
          body.dataEndTime = new Date();
          body.marketplaceIds = [""];

          instance.createReport(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReports.CreateReportResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForReports.CreateReportResult);
                  expect(data.payload.reportId).to.be.a('string');
              // expect(data.payload.reportId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForReports.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createReportSchedule', function() {
        it('should call createReportSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for createReportSchedule call and complete the assertions
          /*
          var body = new SellingPartnerApiForReports.CreateReportScheduleSpecification();
          body.reportType = "";
          body.marketplaceIds = [""];
          body.reportOptions = new SellingPartnerApiForReports.ReportOptions();
          body.period = "PT5M";
          body.nextReportCreationTime = new Date();

          instance.createReportSchedule(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReports.CreateReportScheduleResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForReports.CreateReportScheduleResult);
                  expect(data.payload.reportScheduleId).to.be.a('string');
              // expect(data.payload.reportScheduleId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForReports.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReport', function() {
        it('should call getReport successfully', function(done) {
          // TODO: uncomment, update parameter values for getReport call and complete the assertions
          /*
          var reportId = "reportId_example";

          instance.getReport(reportId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReports.GetReportResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForReports.Report);
                  {
                let dataCtr = data.payload.marketplaceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.payload.reportId).to.be.a('string');
              // expect(data.payload.reportId).to.be("");
              expect(data.payload.reportType).to.be.a('string');
              // expect(data.payload.reportType).to.be("");
              expect(data.payload.dataStartTime).to.be.a(Date);
              // expect(data.payload.dataStartTime).to.be(new Date());
              expect(data.payload.dataEndTime).to.be.a(Date);
              // expect(data.payload.dataEndTime).to.be(new Date());
              expect(data.payload.reportScheduleId).to.be.a('string');
              // expect(data.payload.reportScheduleId).to.be("");
              expect(data.payload.createdTime).to.be.a(Date);
              // expect(data.payload.createdTime).to.be(new Date());
              expect(data.payload.processingStatus).to.be.a('string');
              // expect(data.payload.processingStatus).to.be("CANCELLED");
              expect(data.payload.processingStartTime).to.be.a(Date);
              // expect(data.payload.processingStartTime).to.be(new Date());
              expect(data.payload.processingEndTime).to.be.a(Date);
              // expect(data.payload.processingEndTime).to.be(new Date());
              expect(data.payload.reportDocumentId).to.be.a('string');
              // expect(data.payload.reportDocumentId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForReports.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportDocument', function() {
        it('should call getReportDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportDocument call and complete the assertions
          /*
          var reportDocumentId = "reportDocumentId_example";

          instance.getReportDocument(reportDocumentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReports.GetReportDocumentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForReports.ReportDocument);
                  expect(data.payload.reportDocumentId).to.be.a('string');
              // expect(data.payload.reportDocumentId).to.be("");
              expect(data.payload.url).to.be.a('string');
              // expect(data.payload.url).to.be("");
              expect(data.payload.encryptionDetails).to.be.a(SellingPartnerApiForReports.ReportDocumentEncryptionDetails);
                    expect(data.payload.encryptionDetails.standard).to.be.a('string');
                // expect(data.payload.encryptionDetails.standard).to.be("AES");
                expect(data.payload.encryptionDetails.initializationVector).to.be.a('string');
                // expect(data.payload.encryptionDetails.initializationVector).to.be("");
                expect(data.payload.encryptionDetails.key).to.be.a('string');
                // expect(data.payload.encryptionDetails.key).to.be("");
              expect(data.payload.compressionAlgorithm).to.be.a('string');
              // expect(data.payload.compressionAlgorithm).to.be("GZIP");
            expect(data.errors).to.be.a(SellingPartnerApiForReports.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportSchedule', function() {
        it('should call getReportSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportSchedule call and complete the assertions
          /*
          var reportScheduleId = "reportScheduleId_example";

          instance.getReportSchedule(reportScheduleId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReports.GetReportScheduleResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForReports.ReportSchedule);
                  expect(data.payload.reportScheduleId).to.be.a('string');
              // expect(data.payload.reportScheduleId).to.be("");
              expect(data.payload.reportType).to.be.a('string');
              // expect(data.payload.reportType).to.be("");
              {
                let dataCtr = data.payload.marketplaceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.payload.reportOptions).to.be.a(SellingPartnerApiForReports.ReportOptions);
                  expect(data.payload.period).to.be.a('string');
              // expect(data.payload.period).to.be("");
              expect(data.payload.nextReportCreationTime).to.be.a(Date);
              // expect(data.payload.nextReportCreationTime).to.be(new Date());
            expect(data.errors).to.be.a(SellingPartnerApiForReports.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportSchedules', function() {
        it('should call getReportSchedules successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportSchedules call and complete the assertions
          /*
          var reportTypes = ["reportTypes_example"];

          instance.getReportSchedules(reportTypes).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReports.GetReportSchedulesResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForReports.ReportScheduleList);
                expect(data.errors).to.be.a(SellingPartnerApiForReports.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReports', function() {
        it('should call getReports successfully', function(done) {
          // TODO: uncomment, update parameter values for getReports call and complete the assertions
          /*
          var opts = {};
          opts.reportTypes = ["reportTypes_example"];
          opts.processingStatuses = ["processingStatuses_example"];
          opts.marketplaceIds = ["marketplaceIds_example"];
          opts.pageSize = 10;
          opts.createdSince = new Date("2013-10-20T19:20:30+01:00");
          opts.createdUntil = new Date("2013-10-20T19:20:30+01:00");
          opts.nextToken = "nextToken_example";

          instance.getReports(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForReports.GetReportsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForReports.ReportList);
                expect(data.nextToken).to.be.a('string');
            // expect(data.nextToken).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForReports.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
