/*
 * Selling Partner API for Product Type Definitions
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).
 *
 * OpenAPI spec version: 2020-09-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/definitionsProductTypes_2020-09-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/definitionsProductTypes_2020-09-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForProductTypeDefinitions);
  }
}(this, function(expect, SellingPartnerApiForProductTypeDefinitions) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForProductTypeDefinitions.DefinitionsApi();
  });

  describe('definitionsProductTypes_2020-09-01', function() {
    describe('DefinitionsApi', function() {
      describe('getDefinitionsProductType', function() {
        it('should call getDefinitionsProductType successfully', function(done) {
          // TODO: uncomment, update parameter values for getDefinitionsProductType call and complete the assertions
          /*
          var productType = "LUGGAGE";
          var marketplaceIds = ["ATVPDKIKX0DER"];
          var opts = {};
          opts.sellerId = "sellerId_example";
          opts.productTypeVersion = "LATEST";
          opts.requirements = "LISTING";
          opts.requirementsEnforced = "ENFORCED";
          opts.locale = "DEFAULT";

          instance.getDefinitionsProductType(productType, marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForProductTypeDefinitions.ProductTypeDefinition);
            expect(data.metaSchema).to.be.a(SellingPartnerApiForProductTypeDefinitions.SchemaLink);
                  expect(data.metaSchema.link).to.be.a(SellingPartnerApiForProductTypeDefinitions.SchemaLinkLink);
                    expect(data.metaSchema.link.resource).to.be.a('string');
                // expect(data.metaSchema.link.resource).to.be("");
                expect(data.metaSchema.link.verb).to.be.a('string');
                // expect(data.metaSchema.link.verb).to.be("GET");
              expect(data.metaSchema.checksum).to.be.a('string');
              // expect(data.metaSchema.checksum).to.be("");
            expect(data.schema).to.be.a(SellingPartnerApiForProductTypeDefinitions.SchemaLink);
                  expect(data.schema.link).to.be.a(SellingPartnerApiForProductTypeDefinitions.SchemaLinkLink);
                    expect(data.schema.link.resource).to.be.a('string');
                // expect(data.schema.link.resource).to.be("");
                expect(data.schema.link.verb).to.be.a('string');
                // expect(data.schema.link.verb).to.be("GET");
              expect(data.schema.checksum).to.be.a('string');
              // expect(data.schema.checksum).to.be("");
            expect(data.requirements).to.be.a('string');
            // expect(data.requirements).to.be("LISTING");
            expect(data.requirementsEnforced).to.be.a('string');
            // expect(data.requirementsEnforced).to.be("ENFORCED");
            {
              let dataCtr = data.propertyGroups;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForProductTypeDefinitions.PropertyGroup);
                expect(data.title).to.be.a('string');
                // expect(data.title).to.be("");
                expect(data.description).to.be.a('string');
                // expect(data.description).to.be("");
                {
                  let dataCtr = data.propertyNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.locale).to.be.a('string');
            // expect(data.locale).to.be("");
            {
              let dataCtr = data.marketplaceIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.productType).to.be.a('string');
            // expect(data.productType).to.be("");
            expect(data.displayName).to.be.a('string');
            // expect(data.displayName).to.be("");
            expect(data.productTypeVersion).to.be.a(SellingPartnerApiForProductTypeDefinitions.ProductTypeVersion);
                  expect(data.productTypeVersion.version).to.be.a('string');
              // expect(data.productTypeVersion.version).to.be("");
              expect(data.productTypeVersion.latest).to.be.a('boolean');
              // expect(data.productTypeVersion.latest).to.be(false);
              expect(data.productTypeVersion.releaseCandidate).to.be.a('boolean');
              // expect(data.productTypeVersion.releaseCandidate).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchDefinitionsProductTypes', function() {
        it('should call searchDefinitionsProductTypes successfully', function(done) {
          // TODO: uncomment, update parameter values for searchDefinitionsProductTypes call and complete the assertions
          /*
          var marketplaceIds = ["ATVPDKIKX0DER"];
          var opts = {};
          opts.keywords = ["LUGGAGE"];
          opts.itemName = "Running shoes";
          opts.locale = "en_US";
          opts.searchLocale = "en_US";

          instance.searchDefinitionsProductTypes(marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForProductTypeDefinitions.ProductTypeList);
            {
              let dataCtr = data.productTypes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForProductTypeDefinitions.ProductType);
                expect(data.name).to.be.a('string');
                // expect(data.name).to.be("");
                expect(data.displayName).to.be.a('string');
                // expect(data.displayName).to.be("");
                {
                  let dataCtr = data.marketplaceIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.productTypeVersion).to.be.a('string');
            // expect(data.productTypeVersion).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
