/*
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/services/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/services/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForServices);
  }
}(this, function(expect, SellingPartnerApiForServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForServices.ServiceApi();
  });

  describe('services', function() {
    describe('ServiceApi', function() {
      describe('addAppointmentForServiceJobByServiceJobId', function() {
        it('should call addAppointmentForServiceJobByServiceJobId successfully', function(done) {
          // TODO: uncomment, update parameter values for addAppointmentForServiceJobByServiceJobId call and complete the assertions
          /*
          var serviceJobId = "serviceJobId_example";
          var body = new SellingPartnerApiForServices.AddAppointmentRequest();
          body.appointmentTime = new SellingPartnerApiForServices.AppointmentTimeInput();
          body.appointmentTime.startTime = new Date();
          body.appointmentTime.durationInMinutes = 0;

          instance.addAppointmentForServiceJobByServiceJobId(serviceJobId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.SetAppointmentResponse);
            expect(data.appointmentId).to.be.a(SellingPartnerApiForServices.AppointmentId);
                expect(data.warnings).to.be.a(SellingPartnerApiForServices.WarningList);
                expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('assignAppointmentResources', function() {
        it('should call assignAppointmentResources successfully', function(done) {
          // TODO: uncomment, update parameter values for assignAppointmentResources call and complete the assertions
          /*
          var serviceJobId = "serviceJobId_example";
          var appointmentId = "appointmentId_example";
          var body = new SellingPartnerApiForServices.AssignAppointmentResourcesRequest();
          body.resources = new SellingPartnerApiForServices.AppointmentResources();

          instance.assignAppointmentResources(serviceJobId, appointmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.AssignAppointmentResourcesResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForServices.AssignAppointmentResourcesResponsePayload);
                  expect(data.payload.warnings).to.be.a(SellingPartnerApiForServices.WarningList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelReservation', function() {
        it('should call cancelReservation successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelReservation call and complete the assertions
          /*
          var reservationId = "reservationId_example";
          var marketplaceIds = ["marketplaceIds_example"];

          instance.cancelReservation(reservationId, marketplaceIds).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.CancelReservationResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelServiceJobByServiceJobId', function() {
        it('should call cancelServiceJobByServiceJobId successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelServiceJobByServiceJobId call and complete the assertions
          /*
          var serviceJobId = "serviceJobId_example";
          var cancellationReasonCode = "cancellationReasonCode_example";

          instance.cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.CancelServiceJobByServiceJobIdResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('completeServiceJobByServiceJobId', function() {
        it('should call completeServiceJobByServiceJobId successfully', function(done) {
          // TODO: uncomment, update parameter values for completeServiceJobByServiceJobId call and complete the assertions
          /*
          var serviceJobId = "serviceJobId_example";

          instance.completeServiceJobByServiceJobId(serviceJobId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.CompleteServiceJobByServiceJobIdResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createReservation', function() {
        it('should call createReservation successfully', function(done) {
          // TODO: uncomment, update parameter values for createReservation call and complete the assertions
          /*
          var body = new SellingPartnerApiForServices.CreateReservationRequest();
          body.resourceId = "";
          body.reservation = new SellingPartnerApiForServices.Reservation();
          body.reservation.reservationId = "";
          body.reservation.type = "APPOINTMENT";
          body.reservation.availability = new SellingPartnerApiForServices.AvailabilityRecord();
          body.reservation.availability.startTime = new Date();
          body.reservation.availability.endTime = new Date();
          body.reservation.availability.recurrence = new SellingPartnerApiForServices.Recurrence();
          body.reservation.availability.recurrence.endTime = new Date();
          body.reservation.availability.recurrence.daysOfWeek = [new SellingPartnerApiForServices.DayOfWeek()];
          body.reservation.availability.recurrence.daysOfMonth = [0];
          body.reservation.availability.capacity = 0;
          var marketplaceIds = ["marketplaceIds_example"];

          instance.createReservation(body, marketplaceIds).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.CreateReservationResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForServices.CreateReservationRecord);
                  expect(data.payload.reservation).to.be.a(SellingPartnerApiForServices.Reservation);
                    expect(data.payload.reservation.reservationId).to.be.a('string');
                // expect(data.payload.reservation.reservationId).to.be("");
                expect(data.payload.reservation.type).to.be.a('string');
                // expect(data.payload.reservation.type).to.be("APPOINTMENT");
                expect(data.payload.reservation.availability).to.be.a(SellingPartnerApiForServices.AvailabilityRecord);
                      expect(data.payload.reservation.availability.startTime).to.be.a(Date);
                  // expect(data.payload.reservation.availability.startTime).to.be(new Date());
                  expect(data.payload.reservation.availability.endTime).to.be.a(Date);
                  // expect(data.payload.reservation.availability.endTime).to.be(new Date());
                  expect(data.payload.reservation.availability.recurrence).to.be.a(SellingPartnerApiForServices.Recurrence);
                        expect(data.payload.reservation.availability.recurrence.endTime).to.be.a(Date);
                    // expect(data.payload.reservation.availability.recurrence.endTime).to.be(new Date());
                    {
                      let dataCtr = data.payload.reservation.availability.recurrence.daysOfWeek;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SellingPartnerApiForServices.DayOfWeek);
                      }
                    }
                    {
                      let dataCtr = data.payload.reservation.availability.recurrence.daysOfMonth;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        // expect(data).to.be(0);
                      }
                    }
                  expect(data.payload.reservation.availability.capacity).to.be.a('number');
                  // expect(data.payload.reservation.availability.capacity).to.be(0);
              expect(data.payload.warnings).to.be.a(SellingPartnerApiForServices.WarningList);
                  expect(data.payload.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createServiceDocumentUploadDestination', function() {
        it('should call createServiceDocumentUploadDestination successfully', function(done) {
          // TODO: uncomment, update parameter values for createServiceDocumentUploadDestination call and complete the assertions
          /*
          var body = new SellingPartnerApiForServices.ServiceUploadDocument();
          body.contentType = "TIFF";
          body.contentLength = ;
          body.contentMD5 = "";

          instance.createServiceDocumentUploadDestination(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.CreateServiceDocumentUploadDestination);
            expect(data.payload).to.be.a(SellingPartnerApiForServices.ServiceDocumentUploadDestination);
                  expect(data.payload.uploadDestinationId).to.be.a('string');
              // expect(data.payload.uploadDestinationId).to.be("");
              expect(data.payload.url).to.be.a('string');
              // expect(data.payload.url).to.be("");
              expect(data.payload.encryptionDetails).to.be.a(SellingPartnerApiForServices.EncryptionDetails);
                    expect(data.payload.encryptionDetails.standard).to.be.a('string');
                // expect(data.payload.encryptionDetails.standard).to.be("AES");
                expect(data.payload.encryptionDetails.initializationVector).to.be.a('string');
                // expect(data.payload.encryptionDetails.initializationVector).to.be("");
                expect(data.payload.encryptionDetails.key).to.be.a('string');
                // expect(data.payload.encryptionDetails.key).to.be("");
              expect(data.payload.headers).to.be.a(Object);
              // expect(data.payload.headers).to.be();
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAppointmentSlots', function() {
        it('should call getAppointmentSlots successfully', function(done) {
          // TODO: uncomment, update parameter values for getAppointmentSlots call and complete the assertions
          /*
          var asin = "asin_example";
          var storeId = "storeId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var opts = {};
          opts.startTime = "startTime_example";
          opts.endTime = "endTime_example";

          instance.getAppointmentSlots(asin, storeId, marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.GetAppointmentSlotsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForServices.AppointmentSlotReport);
                  expect(data.payload.schedulingType).to.be.a('string');
              // expect(data.payload.schedulingType).to.be("REAL_TIME_SCHEDULING");
              expect(data.payload.startTime).to.be.a(Date);
              // expect(data.payload.startTime).to.be(new Date());
              expect(data.payload.endTime).to.be.a(Date);
              // expect(data.payload.endTime).to.be(new Date());
              {
                let dataCtr = data.payload.appointmentSlots;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForServices.AppointmentSlot);
                  expect(data.startTime).to.be.a(Date);
                  // expect(data.startTime).to.be(new Date());
                  expect(data.endTime).to.be.a(Date);
                  // expect(data.endTime).to.be(new Date());
                  expect(data.capacity).to.be.a('number');
                  // expect(data.capacity).to.be(0);
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAppointmmentSlotsByJobId', function() {
        it('should call getAppointmmentSlotsByJobId successfully', function(done) {
          // TODO: uncomment, update parameter values for getAppointmmentSlotsByJobId call and complete the assertions
          /*
          var serviceJobId = "serviceJobId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var opts = {};
          opts.startTime = "startTime_example";
          opts.endTime = "endTime_example";

          instance.getAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.GetAppointmentSlotsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForServices.AppointmentSlotReport);
                  expect(data.payload.schedulingType).to.be.a('string');
              // expect(data.payload.schedulingType).to.be("REAL_TIME_SCHEDULING");
              expect(data.payload.startTime).to.be.a(Date);
              // expect(data.payload.startTime).to.be(new Date());
              expect(data.payload.endTime).to.be.a(Date);
              // expect(data.payload.endTime).to.be(new Date());
              {
                let dataCtr = data.payload.appointmentSlots;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForServices.AppointmentSlot);
                  expect(data.startTime).to.be.a(Date);
                  // expect(data.startTime).to.be(new Date());
                  expect(data.endTime).to.be.a(Date);
                  // expect(data.endTime).to.be(new Date());
                  expect(data.capacity).to.be.a('number');
                  // expect(data.capacity).to.be(0);
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFixedSlotCapacity', function() {
        it('should call getFixedSlotCapacity successfully', function(done) {
          // TODO: uncomment, update parameter values for getFixedSlotCapacity call and complete the assertions
          /*
          var resourceId = "resourceId_example";
          var body = new SellingPartnerApiForServices.FixedSlotCapacityQuery();
          body.capacityTypes = [new SellingPartnerApiForServices.CapacityType()];
          body.slotDuration = ;
          body.startDateTime = new Date();
          body.endDateTime = new Date();
          var marketplaceIds = ["marketplaceIds_example"];
          var opts = {};
          opts.nextPageToken = "nextPageToken_example";

          instance.getFixedSlotCapacity(resourceId, body, marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.FixedSlotCapacity);
            expect(data.resourceId).to.be.a('string');
            // expect(data.resourceId).to.be("");
            expect(data.slotDuration).to.be.a('number');
            // expect(data.slotDuration).to.be();
            {
              let dataCtr = data.capacities;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForServices.FixedSlot);
                expect(data.startDateTime).to.be.a(Date);
                // expect(data.startDateTime).to.be(new Date());
                expect(data.scheduledCapacity).to.be.a('number');
                // expect(data.scheduledCapacity).to.be(0);
                expect(data.availableCapacity).to.be.a('number');
                // expect(data.availableCapacity).to.be(0);
                expect(data.encumberedCapacity).to.be.a('number');
                // expect(data.encumberedCapacity).to.be(0);
                expect(data.reservedCapacity).to.be.a('number');
                // expect(data.reservedCapacity).to.be(0);
              }
            }
            expect(data.nextPageToken).to.be.a('string');
            // expect(data.nextPageToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRangeSlotCapacity', function() {
        it('should call getRangeSlotCapacity successfully', function(done) {
          // TODO: uncomment, update parameter values for getRangeSlotCapacity call and complete the assertions
          /*
          var resourceId = "resourceId_example";
          var body = new SellingPartnerApiForServices.RangeSlotCapacityQuery();
          body.capacityTypes = [new SellingPartnerApiForServices.CapacityType()];
          body.startDateTime = new Date();
          body.endDateTime = new Date();
          var marketplaceIds = ["marketplaceIds_example"];
          var opts = {};
          opts.nextPageToken = "nextPageToken_example";

          instance.getRangeSlotCapacity(resourceId, body, marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.RangeSlotCapacity);
            expect(data.resourceId).to.be.a('string');
            // expect(data.resourceId).to.be("");
            {
              let dataCtr = data.capacities;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForServices.RangeCapacity);
                expect(data.capacityType).to.be.a(SellingPartnerApiForServices.CapacityType);
                    {
                  let dataCtr = data.slots;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForServices.RangeSlot);
                    expect(data.startDateTime).to.be.a(Date);
                    // expect(data.startDateTime).to.be(new Date());
                    expect(data.endDateTime).to.be.a(Date);
                    // expect(data.endDateTime).to.be(new Date());
                    expect(data.capacity).to.be.a('number');
                    // expect(data.capacity).to.be(0);
                  }
                }
              }
            }
            expect(data.nextPageToken).to.be.a('string');
            // expect(data.nextPageToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getServiceJobByServiceJobId', function() {
        it('should call getServiceJobByServiceJobId successfully', function(done) {
          // TODO: uncomment, update parameter values for getServiceJobByServiceJobId call and complete the assertions
          /*
          var serviceJobId = "serviceJobId_example";

          instance.getServiceJobByServiceJobId(serviceJobId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.GetServiceJobByServiceJobIdResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForServices.ServiceJob);
                  expect(data.payload.createTime).to.be.a(Date);
              // expect(data.payload.createTime).to.be(new Date());
              expect(data.payload.serviceJobId).to.be.a(SellingPartnerApiForServices.ServiceJobId);
                  expect(data.payload.serviceJobStatus).to.be.a('string');
              // expect(data.payload.serviceJobStatus).to.be("NOT_SERVICED");
              expect(data.payload.scopeOfWork).to.be.a(SellingPartnerApiForServices.ScopeOfWork);
                    expect(data.payload.scopeOfWork.asin).to.be.a('string');
                // expect(data.payload.scopeOfWork.asin).to.be("");
                expect(data.payload.scopeOfWork.title).to.be.a('string');
                // expect(data.payload.scopeOfWork.title).to.be("");
                expect(data.payload.scopeOfWork.quantity).to.be.a('number');
                // expect(data.payload.scopeOfWork.quantity).to.be(0);
                {
                  let dataCtr = data.payload.scopeOfWork.requiredSkills;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
              expect(data.payload.seller).to.be.a(SellingPartnerApiForServices.Seller);
                    expect(data.payload.seller.sellerId).to.be.a('string');
                // expect(data.payload.seller.sellerId).to.be("");
              expect(data.payload.serviceJobProvider).to.be.a(SellingPartnerApiForServices.ServiceJobProvider);
                    expect(data.payload.serviceJobProvider.serviceJobProviderId).to.be.a('string');
                // expect(data.payload.serviceJobProvider.serviceJobProviderId).to.be("");
              {
                let dataCtr = data.payload.preferredAppointmentTimes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForServices.AppointmentTime);
                  expect(data.startTime).to.be.a(Date);
                  // expect(data.startTime).to.be(new Date());
                  expect(data.durationInMinutes).to.be.a('number');
                  // expect(data.durationInMinutes).to.be(0);
                }
              }
              {
                let dataCtr = data.payload.appointments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForServices.Appointment);
                  expect(data.appointmentId).to.be.a(SellingPartnerApiForServices.AppointmentId);
                      expect(data.appointmentStatus).to.be.a('string');
                  // expect(data.appointmentStatus).to.be("ACTIVE");
                  expect(data.appointmentTime).to.be.a(SellingPartnerApiForServices.AppointmentTime);
                        expect(data.appointmentTime.startTime).to.be.a(Date);
                    // expect(data.appointmentTime.startTime).to.be(new Date());
                    expect(data.appointmentTime.durationInMinutes).to.be.a('number');
                    // expect(data.appointmentTime.durationInMinutes).to.be(0);
                  {
                    let dataCtr = data.assignedTechnicians;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForServices.Technician);
                      expect(data.technicianId).to.be.a('string');
                      // expect(data.technicianId).to.be("");
                      expect(data.name).to.be.a('string');
                      // expect(data.name).to.be("");
                    }
                  }
                  expect(data.rescheduledAppointmentId).to.be.a(SellingPartnerApiForServices.AppointmentId);
                      expect(data.poa).to.be.a(SellingPartnerApiForServices.Poa);
                        expect(data.poa.appointmentTime).to.be.a(SellingPartnerApiForServices.AppointmentTime);
                          expect(data.poa.appointmentTime.startTime).to.be.a(Date);
                      // expect(data.poa.appointmentTime.startTime).to.be(new Date());
                      expect(data.poa.appointmentTime.durationInMinutes).to.be.a('number');
                      // expect(data.poa.appointmentTime.durationInMinutes).to.be(0);
                    {
                      let dataCtr = data.poa.technicians;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SellingPartnerApiForServices.Technician);
                        expect(data.technicianId).to.be.a('string');
                        // expect(data.technicianId).to.be("");
                        expect(data.name).to.be.a('string');
                        // expect(data.name).to.be("");
                      }
                    }
                    expect(data.poa.uploadingTechnician).to.be.a('string');
                    // expect(data.poa.uploadingTechnician).to.be("");
                    expect(data.poa.uploadTime).to.be.a(Date);
                    // expect(data.poa.uploadTime).to.be(new Date());
                    expect(data.poa.poaType).to.be.a('string');
                    // expect(data.poa.poaType).to.be("NO_SIGNATURE_DUMMY_POS");
                }
              }
              expect(data.payload.serviceOrderId).to.be.a(SellingPartnerApiForServices.OrderId);
                  expect(data.payload.marketplaceId).to.be.a('string');
              // expect(data.payload.marketplaceId).to.be("");
              expect(data.payload.storeId).to.be.a('string');
              // expect(data.payload.storeId).to.be("");
              expect(data.payload.buyer).to.be.a(SellingPartnerApiForServices.Buyer);
                    expect(data.payload.buyer.buyerId).to.be.a('string');
                // expect(data.payload.buyer.buyerId).to.be("");
                expect(data.payload.buyer.name).to.be.a('string');
                // expect(data.payload.buyer.name).to.be("");
                expect(data.payload.buyer.phone).to.be.a('string');
                // expect(data.payload.buyer.phone).to.be("");
                expect(data.payload.buyer.isPrimeMember).to.be.a('boolean');
                // expect(data.payload.buyer.isPrimeMember).to.be(false);
              {
                let dataCtr = data.payload.associatedItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForServices.AssociatedItem);
                  expect(data.asin).to.be.a('string');
                  // expect(data.asin).to.be("");
                  expect(data.title).to.be.a('string');
                  // expect(data.title).to.be("");
                  expect(data.quantity).to.be.a('number');
                  // expect(data.quantity).to.be(0);
                  expect(data.orderId).to.be.a(SellingPartnerApiForServices.OrderId);
                      expect(data.itemStatus).to.be.a('string');
                  // expect(data.itemStatus).to.be("ACTIVE");
                  expect(data.brandName).to.be.a('string');
                  // expect(data.brandName).to.be("");
                  expect(data.itemDelivery).to.be.a(SellingPartnerApiForServices.ItemDelivery);
                        expect(data.itemDelivery.estimatedDeliveryDate).to.be.a(Date);
                    // expect(data.itemDelivery.estimatedDeliveryDate).to.be(new Date());
                    expect(data.itemDelivery.itemDeliveryPromise).to.be.a(SellingPartnerApiForServices.ItemDeliveryPromise);
                          expect(data.itemDelivery.itemDeliveryPromise.startTime).to.be.a(Date);
                      // expect(data.itemDelivery.itemDeliveryPromise.startTime).to.be(new Date());
                      expect(data.itemDelivery.itemDeliveryPromise.endTime).to.be.a(Date);
                      // expect(data.itemDelivery.itemDeliveryPromise.endTime).to.be(new Date());
                }
              }
              expect(data.payload.serviceLocation).to.be.a(SellingPartnerApiForServices.ServiceLocation);
                    expect(data.payload.serviceLocation.serviceLocationType).to.be.a('string');
                // expect(data.payload.serviceLocation.serviceLocationType).to.be("IN_HOME");
                expect(data.payload.serviceLocation.address).to.be.a(SellingPartnerApiForServices.Address);
                      expect(data.payload.serviceLocation.address.name).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.name).to.be("");
                  expect(data.payload.serviceLocation.address.addressLine1).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.addressLine1).to.be("");
                  expect(data.payload.serviceLocation.address.addressLine2).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.addressLine2).to.be("");
                  expect(data.payload.serviceLocation.address.addressLine3).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.addressLine3).to.be("");
                  expect(data.payload.serviceLocation.address.city).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.city).to.be("");
                  expect(data.payload.serviceLocation.address.county).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.county).to.be("");
                  expect(data.payload.serviceLocation.address.district).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.district).to.be("");
                  expect(data.payload.serviceLocation.address.stateOrRegion).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.stateOrRegion).to.be("");
                  expect(data.payload.serviceLocation.address.postalCode).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.postalCode).to.be("");
                  expect(data.payload.serviceLocation.address.countryCode).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.countryCode).to.be("");
                  expect(data.payload.serviceLocation.address.phone).to.be.a('string');
                  // expect(data.payload.serviceLocation.address.phone).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getServiceJobs', function() {
        it('should call getServiceJobs successfully', function(done) {
          // TODO: uncomment, update parameter values for getServiceJobs call and complete the assertions
          /*
          var marketplaceIds = ["marketplaceIds_example"];
          var opts = {};
          opts.serviceOrderIds = ["serviceOrderIds_example"];
          opts.serviceJobStatus = ["serviceJobStatus_example"];
          opts.pageToken = "pageToken_example";
          opts.pageSize = 20;
          opts.sortField = "sortField_example";
          opts.sortOrder = "sortOrder_example";
          opts.createdAfter = "createdAfter_example";
          opts.createdBefore = "createdBefore_example";
          opts.lastUpdatedAfter = "lastUpdatedAfter_example";
          opts.lastUpdatedBefore = "lastUpdatedBefore_example";
          opts.scheduleStartDate = "scheduleStartDate_example";
          opts.scheduleEndDate = "scheduleEndDate_example";
          opts.asins = ["asins_example"];
          opts.requiredSkills = ["requiredSkills_example"];
          opts.storeIds = ["storeIds_example"];

          instance.getServiceJobs(marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.GetServiceJobsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForServices.JobListing);
                  expect(data.payload.totalResultSize).to.be.a('number');
              // expect(data.payload.totalResultSize).to.be(0);
              expect(data.payload.nextPageToken).to.be.a('string');
              // expect(data.payload.nextPageToken).to.be("");
              expect(data.payload.previousPageToken).to.be.a('string');
              // expect(data.payload.previousPageToken).to.be("");
              {
                let dataCtr = data.payload.jobs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForServices.ServiceJob);
                  expect(data.createTime).to.be.a(Date);
                  // expect(data.createTime).to.be(new Date());
                  expect(data.serviceJobId).to.be.a(SellingPartnerApiForServices.ServiceJobId);
                      expect(data.serviceJobStatus).to.be.a('string');
                  // expect(data.serviceJobStatus).to.be("NOT_SERVICED");
                  expect(data.scopeOfWork).to.be.a(SellingPartnerApiForServices.ScopeOfWork);
                        expect(data.scopeOfWork.asin).to.be.a('string');
                    // expect(data.scopeOfWork.asin).to.be("");
                    expect(data.scopeOfWork.title).to.be.a('string');
                    // expect(data.scopeOfWork.title).to.be("");
                    expect(data.scopeOfWork.quantity).to.be.a('number');
                    // expect(data.scopeOfWork.quantity).to.be(0);
                    {
                      let dataCtr = data.scopeOfWork.requiredSkills;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        // expect(data).to.be("");
                      }
                    }
                  expect(data.seller).to.be.a(SellingPartnerApiForServices.Seller);
                        expect(data.seller.sellerId).to.be.a('string');
                    // expect(data.seller.sellerId).to.be("");
                  expect(data.serviceJobProvider).to.be.a(SellingPartnerApiForServices.ServiceJobProvider);
                        expect(data.serviceJobProvider.serviceJobProviderId).to.be.a('string');
                    // expect(data.serviceJobProvider.serviceJobProviderId).to.be("");
                  {
                    let dataCtr = data.preferredAppointmentTimes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForServices.AppointmentTime);
                      expect(data.startTime).to.be.a(Date);
                      // expect(data.startTime).to.be(new Date());
                      expect(data.durationInMinutes).to.be.a('number');
                      // expect(data.durationInMinutes).to.be(0);
                    }
                  }
                  {
                    let dataCtr = data.appointments;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForServices.Appointment);
                      expect(data.appointmentId).to.be.a(SellingPartnerApiForServices.AppointmentId);
                          expect(data.appointmentStatus).to.be.a('string');
                      // expect(data.appointmentStatus).to.be("ACTIVE");
                      expect(data.appointmentTime).to.be.a(SellingPartnerApiForServices.AppointmentTime);
                            expect(data.appointmentTime.startTime).to.be.a(Date);
                        // expect(data.appointmentTime.startTime).to.be(new Date());
                        expect(data.appointmentTime.durationInMinutes).to.be.a('number');
                        // expect(data.appointmentTime.durationInMinutes).to.be(0);
                      {
                        let dataCtr = data.assignedTechnicians;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SellingPartnerApiForServices.Technician);
                          expect(data.technicianId).to.be.a('string');
                          // expect(data.technicianId).to.be("");
                          expect(data.name).to.be.a('string');
                          // expect(data.name).to.be("");
                        }
                      }
                      expect(data.rescheduledAppointmentId).to.be.a(SellingPartnerApiForServices.AppointmentId);
                          expect(data.poa).to.be.a(SellingPartnerApiForServices.Poa);
                            expect(data.poa.appointmentTime).to.be.a(SellingPartnerApiForServices.AppointmentTime);
                              expect(data.poa.appointmentTime.startTime).to.be.a(Date);
                          // expect(data.poa.appointmentTime.startTime).to.be(new Date());
                          expect(data.poa.appointmentTime.durationInMinutes).to.be.a('number');
                          // expect(data.poa.appointmentTime.durationInMinutes).to.be(0);
                        {
                          let dataCtr = data.poa.technicians;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(SellingPartnerApiForServices.Technician);
                            expect(data.technicianId).to.be.a('string');
                            // expect(data.technicianId).to.be("");
                            expect(data.name).to.be.a('string');
                            // expect(data.name).to.be("");
                          }
                        }
                        expect(data.poa.uploadingTechnician).to.be.a('string');
                        // expect(data.poa.uploadingTechnician).to.be("");
                        expect(data.poa.uploadTime).to.be.a(Date);
                        // expect(data.poa.uploadTime).to.be(new Date());
                        expect(data.poa.poaType).to.be.a('string');
                        // expect(data.poa.poaType).to.be("NO_SIGNATURE_DUMMY_POS");
                    }
                  }
                  expect(data.serviceOrderId).to.be.a(SellingPartnerApiForServices.OrderId);
                      expect(data.marketplaceId).to.be.a('string');
                  // expect(data.marketplaceId).to.be("");
                  expect(data.storeId).to.be.a('string');
                  // expect(data.storeId).to.be("");
                  expect(data.buyer).to.be.a(SellingPartnerApiForServices.Buyer);
                        expect(data.buyer.buyerId).to.be.a('string');
                    // expect(data.buyer.buyerId).to.be("");
                    expect(data.buyer.name).to.be.a('string');
                    // expect(data.buyer.name).to.be("");
                    expect(data.buyer.phone).to.be.a('string');
                    // expect(data.buyer.phone).to.be("");
                    expect(data.buyer.isPrimeMember).to.be.a('boolean');
                    // expect(data.buyer.isPrimeMember).to.be(false);
                  {
                    let dataCtr = data.associatedItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForServices.AssociatedItem);
                      expect(data.asin).to.be.a('string');
                      // expect(data.asin).to.be("");
                      expect(data.title).to.be.a('string');
                      // expect(data.title).to.be("");
                      expect(data.quantity).to.be.a('number');
                      // expect(data.quantity).to.be(0);
                      expect(data.orderId).to.be.a(SellingPartnerApiForServices.OrderId);
                          expect(data.itemStatus).to.be.a('string');
                      // expect(data.itemStatus).to.be("ACTIVE");
                      expect(data.brandName).to.be.a('string');
                      // expect(data.brandName).to.be("");
                      expect(data.itemDelivery).to.be.a(SellingPartnerApiForServices.ItemDelivery);
                            expect(data.itemDelivery.estimatedDeliveryDate).to.be.a(Date);
                        // expect(data.itemDelivery.estimatedDeliveryDate).to.be(new Date());
                        expect(data.itemDelivery.itemDeliveryPromise).to.be.a(SellingPartnerApiForServices.ItemDeliveryPromise);
                              expect(data.itemDelivery.itemDeliveryPromise.startTime).to.be.a(Date);
                          // expect(data.itemDelivery.itemDeliveryPromise.startTime).to.be(new Date());
                          expect(data.itemDelivery.itemDeliveryPromise.endTime).to.be.a(Date);
                          // expect(data.itemDelivery.itemDeliveryPromise.endTime).to.be(new Date());
                    }
                  }
                  expect(data.serviceLocation).to.be.a(SellingPartnerApiForServices.ServiceLocation);
                        expect(data.serviceLocation.serviceLocationType).to.be.a('string');
                    // expect(data.serviceLocation.serviceLocationType).to.be("IN_HOME");
                    expect(data.serviceLocation.address).to.be.a(SellingPartnerApiForServices.Address);
                          expect(data.serviceLocation.address.name).to.be.a('string');
                      // expect(data.serviceLocation.address.name).to.be("");
                      expect(data.serviceLocation.address.addressLine1).to.be.a('string');
                      // expect(data.serviceLocation.address.addressLine1).to.be("");
                      expect(data.serviceLocation.address.addressLine2).to.be.a('string');
                      // expect(data.serviceLocation.address.addressLine2).to.be("");
                      expect(data.serviceLocation.address.addressLine3).to.be.a('string');
                      // expect(data.serviceLocation.address.addressLine3).to.be("");
                      expect(data.serviceLocation.address.city).to.be.a('string');
                      // expect(data.serviceLocation.address.city).to.be("");
                      expect(data.serviceLocation.address.county).to.be.a('string');
                      // expect(data.serviceLocation.address.county).to.be("");
                      expect(data.serviceLocation.address.district).to.be.a('string');
                      // expect(data.serviceLocation.address.district).to.be("");
                      expect(data.serviceLocation.address.stateOrRegion).to.be.a('string');
                      // expect(data.serviceLocation.address.stateOrRegion).to.be("");
                      expect(data.serviceLocation.address.postalCode).to.be.a('string');
                      // expect(data.serviceLocation.address.postalCode).to.be("");
                      expect(data.serviceLocation.address.countryCode).to.be.a('string');
                      // expect(data.serviceLocation.address.countryCode).to.be("");
                      expect(data.serviceLocation.address.phone).to.be.a('string');
                      // expect(data.serviceLocation.address.phone).to.be("");
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('rescheduleAppointmentForServiceJobByServiceJobId', function() {
        it('should call rescheduleAppointmentForServiceJobByServiceJobId successfully', function(done) {
          // TODO: uncomment, update parameter values for rescheduleAppointmentForServiceJobByServiceJobId call and complete the assertions
          /*
          var serviceJobId = "serviceJobId_example";
          var appointmentId = "appointmentId_example";
          var body = new SellingPartnerApiForServices.RescheduleAppointmentRequest();
          body.appointmentTime = new SellingPartnerApiForServices.AppointmentTimeInput();
          body.appointmentTime.startTime = new Date();
          body.appointmentTime.durationInMinutes = 0;
          body.rescheduleReasonCode = new SellingPartnerApiForServices.RescheduleReasonCode();

          instance.rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.SetAppointmentResponse);
            expect(data.appointmentId).to.be.a(SellingPartnerApiForServices.AppointmentId);
                expect(data.warnings).to.be.a(SellingPartnerApiForServices.WarningList);
                expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setAppointmentFulfillmentData', function() {
        it('should call setAppointmentFulfillmentData successfully', function(done) {
          // TODO: uncomment, update parameter values for setAppointmentFulfillmentData call and complete the assertions
          /*
          var serviceJobId = "serviceJobId_example";
          var appointmentId = "appointmentId_example";
          var body = new SellingPartnerApiForServices.SetAppointmentFulfillmentDataRequest();
          body.fulfillmentTime = new SellingPartnerApiForServices.FulfillmentTime();
          body.fulfillmentTime.startTime = new Date();
          body.fulfillmentTime.endTime = new Date();
          body.appointmentResources = new SellingPartnerApiForServices.AppointmentResources();
          body.fulfillmentDocuments = new SellingPartnerApiForServices.FulfillmentDocuments();

          instance.setAppointmentFulfillmentData(serviceJobId, appointmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateReservation', function() {
        it('should call updateReservation successfully', function(done) {
          // TODO: uncomment, update parameter values for updateReservation call and complete the assertions
          /*
          var reservationId = "reservationId_example";
          var body = new SellingPartnerApiForServices.UpdateReservationRequest();
          body.resourceId = "";
          body.reservation = new SellingPartnerApiForServices.Reservation();
          body.reservation.reservationId = "";
          body.reservation.type = "APPOINTMENT";
          body.reservation.availability = new SellingPartnerApiForServices.AvailabilityRecord();
          body.reservation.availability.startTime = new Date();
          body.reservation.availability.endTime = new Date();
          body.reservation.availability.recurrence = new SellingPartnerApiForServices.Recurrence();
          body.reservation.availability.recurrence.endTime = new Date();
          body.reservation.availability.recurrence.daysOfWeek = [new SellingPartnerApiForServices.DayOfWeek()];
          body.reservation.availability.recurrence.daysOfMonth = [0];
          body.reservation.availability.capacity = 0;
          var marketplaceIds = ["marketplaceIds_example"];

          instance.updateReservation(reservationId, body, marketplaceIds).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.UpdateReservationResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForServices.UpdateReservationRecord);
                  expect(data.payload.reservation).to.be.a(SellingPartnerApiForServices.Reservation);
                    expect(data.payload.reservation.reservationId).to.be.a('string');
                // expect(data.payload.reservation.reservationId).to.be("");
                expect(data.payload.reservation.type).to.be.a('string');
                // expect(data.payload.reservation.type).to.be("APPOINTMENT");
                expect(data.payload.reservation.availability).to.be.a(SellingPartnerApiForServices.AvailabilityRecord);
                      expect(data.payload.reservation.availability.startTime).to.be.a(Date);
                  // expect(data.payload.reservation.availability.startTime).to.be(new Date());
                  expect(data.payload.reservation.availability.endTime).to.be.a(Date);
                  // expect(data.payload.reservation.availability.endTime).to.be(new Date());
                  expect(data.payload.reservation.availability.recurrence).to.be.a(SellingPartnerApiForServices.Recurrence);
                        expect(data.payload.reservation.availability.recurrence.endTime).to.be.a(Date);
                    // expect(data.payload.reservation.availability.recurrence.endTime).to.be(new Date());
                    {
                      let dataCtr = data.payload.reservation.availability.recurrence.daysOfWeek;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SellingPartnerApiForServices.DayOfWeek);
                      }
                    }
                    {
                      let dataCtr = data.payload.reservation.availability.recurrence.daysOfMonth;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        // expect(data).to.be(0);
                      }
                    }
                  expect(data.payload.reservation.availability.capacity).to.be.a('number');
                  // expect(data.payload.reservation.availability.capacity).to.be(0);
              expect(data.payload.warnings).to.be.a(SellingPartnerApiForServices.WarningList);
                  expect(data.payload.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSchedule', function() {
        it('should call updateSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSchedule call and complete the assertions
          /*
          var resourceId = "resourceId_example";
          var body = new SellingPartnerApiForServices.UpdateScheduleRequest();
          body.schedules = new SellingPartnerApiForServices.AvailabilityRecords();
          var marketplaceIds = ["marketplaceIds_example"];

          instance.updateSchedule(resourceId, body, marketplaceIds).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForServices.UpdateScheduleResponse);
            {
              let dataCtr = data.payload;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForServices.UpdateScheduleRecord);
                expect(data.availability).to.be.a(SellingPartnerApiForServices.AvailabilityRecord);
                      expect(data.availability.startTime).to.be.a(Date);
                  // expect(data.availability.startTime).to.be(new Date());
                  expect(data.availability.endTime).to.be.a(Date);
                  // expect(data.availability.endTime).to.be(new Date());
                  expect(data.availability.recurrence).to.be.a(SellingPartnerApiForServices.Recurrence);
                        expect(data.availability.recurrence.endTime).to.be.a(Date);
                    // expect(data.availability.recurrence.endTime).to.be(new Date());
                    {
                      let dataCtr = data.availability.recurrence.daysOfWeek;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SellingPartnerApiForServices.DayOfWeek);
                      }
                    }
                    {
                      let dataCtr = data.availability.recurrence.daysOfMonth;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        // expect(data).to.be(0);
                      }
                    }
                  expect(data.availability.capacity).to.be.a('number');
                  // expect(data.availability.capacity).to.be(0);
                expect(data.warnings).to.be.a(SellingPartnerApiForServices.WarningList);
                    expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
        
              }
            }
            expect(data.errors).to.be.a(SellingPartnerApiForServices.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
