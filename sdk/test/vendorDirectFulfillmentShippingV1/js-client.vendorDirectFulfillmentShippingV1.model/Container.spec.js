/*
 * Selling Partner API for Direct Fulfillment Shipping
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorDirectFulfillmentShippingV1/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorDirectFulfillmentShippingV1/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForDirectFulfillmentShipping);
  }
}(this, function(expect, SellingPartnerApiForDirectFulfillmentShipping) {
  'use strict';

  var instance;

  describe('vendorDirectFulfillmentShippingV1', function() {
    describe('Container', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForDirectFulfillmentShipping.Container();
      });

      it('should create an instance of Container', function() {
        // TODO: update the code to test Container
        expect(instance).to.be.a(SellingPartnerApiForDirectFulfillmentShipping.Container);
      });

      it('should have the property containerType (base name: "containerType")', function() {
        // TODO: update the code to test the property containerType
        expect(instance).to.have.property('containerType');
        // expect(instance.containerType).to.be(expectedValueLiteral);
      });

      it('should have the property containerIdentifier (base name: "containerIdentifier")', function() {
        // TODO: update the code to test the property containerIdentifier
        expect(instance).to.have.property('containerIdentifier');
        // expect(instance.containerIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property trackingNumber (base name: "trackingNumber")', function() {
        // TODO: update the code to test the property trackingNumber
        expect(instance).to.have.property('trackingNumber');
        // expect(instance.trackingNumber).to.be(expectedValueLiteral);
      });

      it('should have the property manifestId (base name: "manifestId")', function() {
        // TODO: update the code to test the property manifestId
        expect(instance).to.have.property('manifestId');
        // expect(instance.manifestId).to.be(expectedValueLiteral);
      });

      it('should have the property manifestDate (base name: "manifestDate")', function() {
        // TODO: update the code to test the property manifestDate
        expect(instance).to.have.property('manifestDate');
        // expect(instance.manifestDate).to.be(expectedValueLiteral);
      });

      it('should have the property shipMethod (base name: "shipMethod")', function() {
        // TODO: update the code to test the property shipMethod
        expect(instance).to.have.property('shipMethod');
        // expect(instance.shipMethod).to.be(expectedValueLiteral);
      });

      it('should have the property scacCode (base name: "scacCode")', function() {
        // TODO: update the code to test the property scacCode
        expect(instance).to.have.property('scacCode');
        // expect(instance.scacCode).to.be(expectedValueLiteral);
      });

      it('should have the property carrier (base name: "carrier")', function() {
        // TODO: update the code to test the property carrier
        expect(instance).to.have.property('carrier');
        // expect(instance.carrier).to.be(expectedValueLiteral);
      });

      it('should have the property containerSequenceNumber (base name: "containerSequenceNumber")', function() {
        // TODO: update the code to test the property containerSequenceNumber
        expect(instance).to.have.property('containerSequenceNumber');
        // expect(instance.containerSequenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property dimensions (base name: "dimensions")', function() {
        // TODO: update the code to test the property dimensions
        expect(instance).to.have.property('dimensions');
        // expect(instance.dimensions).to.be(expectedValueLiteral);
      });

      it('should have the property weight (base name: "weight")', function() {
        // TODO: update the code to test the property weight
        expect(instance).to.have.property('weight');
        // expect(instance.weight).to.be(expectedValueLiteral);
      });

      it('should have the property packedItems (base name: "packedItems")', function() {
        // TODO: update the code to test the property packedItems
        expect(instance).to.have.property('packedItems');
        // expect(instance.packedItems).to.be(expectedValueLiteral);
      });

    });
  });

}));
