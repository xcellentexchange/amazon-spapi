/*
 * Selling Partner API for Notifications
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/notifications/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/notifications/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForNotifications);
  }
}(this, function(expect, SellingPartnerApiForNotifications) {
  'use strict';

  var instance;

  describe('notifications', function() {
    describe('CreateSubscriptionRequest', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForNotifications.CreateSubscriptionRequest();
      });

      it('should create an instance of CreateSubscriptionRequest', function() {
        // TODO: update the code to test CreateSubscriptionRequest
        expect(instance).to.be.a(SellingPartnerApiForNotifications.CreateSubscriptionRequest);
      });

      it('should have the property payloadVersion (base name: "payloadVersion")', function() {
        // TODO: update the code to test the property payloadVersion
        expect(instance).to.have.property('payloadVersion');
        // expect(instance.payloadVersion).to.be(expectedValueLiteral);
      });

      it('should have the property destinationId (base name: "destinationId")', function() {
        // TODO: update the code to test the property destinationId
        expect(instance).to.have.property('destinationId');
        // expect(instance.destinationId).to.be(expectedValueLiteral);
      });

      it('should have the property processingDirective (base name: "processingDirective")', function() {
        // TODO: update the code to test the property processingDirective
        expect(instance).to.have.property('processingDirective');
        // expect(instance.processingDirective).to.be(expectedValueLiteral);
      });

    });
  });

}));
