/*
 * Selling Partner API for Notifications
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/notifications/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/notifications/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForNotifications);
  }
}(this, function(expect, SellingPartnerApiForNotifications) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForNotifications.NotificationsApi();
  });

  describe('notifications', function() {
    describe('NotificationsApi', function() {
      describe('createDestination', function() {
        it('should call createDestination successfully', function(done) {
          // TODO: uncomment, update parameter values for createDestination call and complete the assertions
          /*
          var body = new SellingPartnerApiForNotifications.CreateDestinationRequest();
          body.resourceSpecification = new SellingPartnerApiForNotifications.DestinationResourceSpecification();
          body.resourceSpecification.sqs = new SellingPartnerApiForNotifications.SqsResource();
          body.resourceSpecification.sqs.arn = "";
          body.resourceSpecification.eventBridge = new SellingPartnerApiForNotifications.EventBridgeResourceSpecification();
          body.resourceSpecification.eventBridge.region = "";
          body.resourceSpecification.eventBridge.accountId = "";
          body.name = "";

          instance.createDestination(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForNotifications.CreateDestinationResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForNotifications.Destination);
                  expect(data.payload.name).to.be.a('string');
              // expect(data.payload.name).to.be("");
              expect(data.payload.destinationId).to.be.a('string');
              // expect(data.payload.destinationId).to.be("");
              expect(data.payload.resource).to.be.a(SellingPartnerApiForNotifications.DestinationResource);
                    expect(data.payload.resource.sqs).to.be.a(SellingPartnerApiForNotifications.SqsResource);
                      expect(data.payload.resource.sqs.arn).to.be.a('string');
                  // expect(data.payload.resource.sqs.arn).to.be("");
                expect(data.payload.resource.eventBridge).to.be.a(SellingPartnerApiForNotifications.EventBridgeResource);
                      expect(data.payload.resource.eventBridge.name).to.be.a('string');
                  // expect(data.payload.resource.eventBridge.name).to.be("");
                  expect(data.payload.resource.eventBridge.region).to.be.a('string');
                  // expect(data.payload.resource.eventBridge.region).to.be("");
                  expect(data.payload.resource.eventBridge.accountId).to.be.a('string');
                  // expect(data.payload.resource.eventBridge.accountId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForNotifications.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createSubscription', function() {
        it('should call createSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for createSubscription call and complete the assertions
          /*
          var body = new SellingPartnerApiForNotifications.CreateSubscriptionRequest();
          body.payloadVersion = "";
          body.destinationId = "";
          body.processingDirective = new SellingPartnerApiForNotifications.ProcessingDirective();
          body.processingDirective.eventFilter = new SellingPartnerApiForNotifications.EventFilter();
          body.processingDirective.eventFilter.marketplaceIds = new SellingPartnerApiForNotifications.MarketplaceIds();
          body.processingDirective.eventFilter.orderChangeTypes = new SellingPartnerApiForNotifications.OrderChangeTypes();
          body.processingDirective.eventFilter.aggregationSettings = new SellingPartnerApiForNotifications.AggregationSettings();
          body.processingDirective.eventFilter.aggregationSettings.aggregationTimePeriod = new SellingPartnerApiForNotifications.AggregationTimePeriod();
          body.processingDirective.eventFilter.eventFilterType = "ANY_OFFER_CHANGED";
          var notificationType = "notificationType_example";

          instance.createSubscription(body, notificationType).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForNotifications.CreateSubscriptionResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForNotifications.Subscription);
                  expect(data.payload.subscriptionId).to.be.a('string');
              // expect(data.payload.subscriptionId).to.be("");
              expect(data.payload.payloadVersion).to.be.a('string');
              // expect(data.payload.payloadVersion).to.be("");
              expect(data.payload.destinationId).to.be.a('string');
              // expect(data.payload.destinationId).to.be("");
              expect(data.payload.processingDirective).to.be.a(SellingPartnerApiForNotifications.ProcessingDirective);
                    expect(data.payload.processingDirective.eventFilter).to.be.a(SellingPartnerApiForNotifications.EventFilter);
                      expect(data.payload.processingDirective.eventFilter.marketplaceIds).to.be.a(SellingPartnerApiForNotifications.MarketplaceIds);
                      expect(data.payload.processingDirective.eventFilter.orderChangeTypes).to.be.a(SellingPartnerApiForNotifications.OrderChangeTypes);
                      expect(data.payload.processingDirective.eventFilter.aggregationSettings).to.be.a(SellingPartnerApiForNotifications.AggregationSettings);
                        expect(data.payload.processingDirective.eventFilter.aggregationSettings.aggregationTimePeriod).to.be.a(SellingPartnerApiForNotifications.AggregationTimePeriod);
            
                  expect(data.payload.processingDirective.eventFilter.eventFilterType).to.be.a('string');
                  // expect(data.payload.processingDirective.eventFilter.eventFilterType).to.be("ANY_OFFER_CHANGED");
            expect(data.errors).to.be.a(SellingPartnerApiForNotifications.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDestination', function() {
        it('should call deleteDestination successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDestination call and complete the assertions
          /*
          var destinationId = "destinationId_example";

          instance.deleteDestination(destinationId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForNotifications.DeleteDestinationResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForNotifications.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteSubscriptionById', function() {
        it('should call deleteSubscriptionById successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteSubscriptionById call and complete the assertions
          /*
          var subscriptionId = "subscriptionId_example";
          var notificationType = "notificationType_example";

          instance.deleteSubscriptionById(subscriptionId, notificationType).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForNotifications.DeleteSubscriptionByIdResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForNotifications.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDestination', function() {
        it('should call getDestination successfully', function(done) {
          // TODO: uncomment, update parameter values for getDestination call and complete the assertions
          /*
          var destinationId = "destinationId_example";

          instance.getDestination(destinationId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForNotifications.GetDestinationResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForNotifications.Destination);
                  expect(data.payload.name).to.be.a('string');
              // expect(data.payload.name).to.be("");
              expect(data.payload.destinationId).to.be.a('string');
              // expect(data.payload.destinationId).to.be("");
              expect(data.payload.resource).to.be.a(SellingPartnerApiForNotifications.DestinationResource);
                    expect(data.payload.resource.sqs).to.be.a(SellingPartnerApiForNotifications.SqsResource);
                      expect(data.payload.resource.sqs.arn).to.be.a('string');
                  // expect(data.payload.resource.sqs.arn).to.be("");
                expect(data.payload.resource.eventBridge).to.be.a(SellingPartnerApiForNotifications.EventBridgeResource);
                      expect(data.payload.resource.eventBridge.name).to.be.a('string');
                  // expect(data.payload.resource.eventBridge.name).to.be("");
                  expect(data.payload.resource.eventBridge.region).to.be.a('string');
                  // expect(data.payload.resource.eventBridge.region).to.be("");
                  expect(data.payload.resource.eventBridge.accountId).to.be.a('string');
                  // expect(data.payload.resource.eventBridge.accountId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForNotifications.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDestinations', function() {
        it('should call getDestinations successfully', function(done) {
          // TODO: uncomment getDestinations call and complete the assertions
          /*

          instance.getDestinations().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForNotifications.GetDestinationsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForNotifications.DestinationList);
                expect(data.errors).to.be.a(SellingPartnerApiForNotifications.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSubscription', function() {
        it('should call getSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for getSubscription call and complete the assertions
          /*
          var notificationType = "notificationType_example";
          var opts = {};
          opts.payloadVersion = "payloadVersion_example";

          instance.getSubscription(notificationType, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForNotifications.GetSubscriptionResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForNotifications.Subscription);
                  expect(data.payload.subscriptionId).to.be.a('string');
              // expect(data.payload.subscriptionId).to.be("");
              expect(data.payload.payloadVersion).to.be.a('string');
              // expect(data.payload.payloadVersion).to.be("");
              expect(data.payload.destinationId).to.be.a('string');
              // expect(data.payload.destinationId).to.be("");
              expect(data.payload.processingDirective).to.be.a(SellingPartnerApiForNotifications.ProcessingDirective);
                    expect(data.payload.processingDirective.eventFilter).to.be.a(SellingPartnerApiForNotifications.EventFilter);
                      expect(data.payload.processingDirective.eventFilter.marketplaceIds).to.be.a(SellingPartnerApiForNotifications.MarketplaceIds);
                      expect(data.payload.processingDirective.eventFilter.orderChangeTypes).to.be.a(SellingPartnerApiForNotifications.OrderChangeTypes);
                      expect(data.payload.processingDirective.eventFilter.aggregationSettings).to.be.a(SellingPartnerApiForNotifications.AggregationSettings);
                        expect(data.payload.processingDirective.eventFilter.aggregationSettings.aggregationTimePeriod).to.be.a(SellingPartnerApiForNotifications.AggregationTimePeriod);
            
                  expect(data.payload.processingDirective.eventFilter.eventFilterType).to.be.a('string');
                  // expect(data.payload.processingDirective.eventFilter.eventFilterType).to.be("ANY_OFFER_CHANGED");
            expect(data.errors).to.be.a(SellingPartnerApiForNotifications.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSubscriptionById', function() {
        it('should call getSubscriptionById successfully', function(done) {
          // TODO: uncomment, update parameter values for getSubscriptionById call and complete the assertions
          /*
          var subscriptionId = "subscriptionId_example";
          var notificationType = "notificationType_example";

          instance.getSubscriptionById(subscriptionId, notificationType).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForNotifications.GetSubscriptionByIdResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForNotifications.Subscription);
                  expect(data.payload.subscriptionId).to.be.a('string');
              // expect(data.payload.subscriptionId).to.be("");
              expect(data.payload.payloadVersion).to.be.a('string');
              // expect(data.payload.payloadVersion).to.be("");
              expect(data.payload.destinationId).to.be.a('string');
              // expect(data.payload.destinationId).to.be("");
              expect(data.payload.processingDirective).to.be.a(SellingPartnerApiForNotifications.ProcessingDirective);
                    expect(data.payload.processingDirective.eventFilter).to.be.a(SellingPartnerApiForNotifications.EventFilter);
                      expect(data.payload.processingDirective.eventFilter.marketplaceIds).to.be.a(SellingPartnerApiForNotifications.MarketplaceIds);
                      expect(data.payload.processingDirective.eventFilter.orderChangeTypes).to.be.a(SellingPartnerApiForNotifications.OrderChangeTypes);
                      expect(data.payload.processingDirective.eventFilter.aggregationSettings).to.be.a(SellingPartnerApiForNotifications.AggregationSettings);
                        expect(data.payload.processingDirective.eventFilter.aggregationSettings.aggregationTimePeriod).to.be.a(SellingPartnerApiForNotifications.AggregationTimePeriod);
            
                  expect(data.payload.processingDirective.eventFilter.eventFilterType).to.be.a('string');
                  // expect(data.payload.processingDirective.eventFilter.eventFilterType).to.be("ANY_OFFER_CHANGED");
            expect(data.errors).to.be.a(SellingPartnerApiForNotifications.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
