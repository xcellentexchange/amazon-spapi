/*
 * The Selling Partner API for Invoices.
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * OpenAPI spec version: 2024-06-19
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/InvoicesApiModel_2024-06-19/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/InvoicesApiModel_2024-06-19/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForInvoices);
  }
}(this, function(expect, TheSellingPartnerApiForInvoices) {
  'use strict';

  var instance;

  describe('InvoicesApiModel_2024-06-19', function() {
    describe('ExportInvoicesRequest', function() {
      beforeEach(function() {
        instance = new TheSellingPartnerApiForInvoices.ExportInvoicesRequest();
      });

      it('should create an instance of ExportInvoicesRequest', function() {
        // TODO: update the code to test ExportInvoicesRequest
        expect(instance).to.be.a(TheSellingPartnerApiForInvoices.ExportInvoicesRequest);
      });

      it('should have the property dateEnd (base name: "dateEnd")', function() {
        // TODO: update the code to test the property dateEnd
        expect(instance).to.have.property('dateEnd');
        // expect(instance.dateEnd).to.be(expectedValueLiteral);
      });

      it('should have the property dateStart (base name: "dateStart")', function() {
        // TODO: update the code to test the property dateStart
        expect(instance).to.have.property('dateStart');
        // expect(instance.dateStart).to.be(expectedValueLiteral);
      });

      it('should have the property externalInvoiceId (base name: "externalInvoiceId")', function() {
        // TODO: update the code to test the property externalInvoiceId
        expect(instance).to.have.property('externalInvoiceId');
        // expect(instance.externalInvoiceId).to.be(expectedValueLiteral);
      });

      it('should have the property fileFormat (base name: "fileFormat")', function() {
        // TODO: update the code to test the property fileFormat
        expect(instance).to.have.property('fileFormat');
        // expect(instance.fileFormat).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceType (base name: "invoiceType")', function() {
        // TODO: update the code to test the property invoiceType
        expect(instance).to.have.property('invoiceType');
        // expect(instance.invoiceType).to.be(expectedValueLiteral);
      });

      it('should have the property marketplaceId (base name: "marketplaceId")', function() {
        // TODO: update the code to test the property marketplaceId
        expect(instance).to.have.property('marketplaceId');
        // expect(instance.marketplaceId).to.be(expectedValueLiteral);
      });

      it('should have the property series (base name: "series")', function() {
        // TODO: update the code to test the property series
        expect(instance).to.have.property('series');
        // expect(instance.series).to.be(expectedValueLiteral);
      });

      it('should have the property statuses (base name: "statuses")', function() {
        // TODO: update the code to test the property statuses
        expect(instance).to.have.property('statuses');
        // expect(instance.statuses).to.be(expectedValueLiteral);
      });

      it('should have the property transactionIdentifier (base name: "transactionIdentifier")', function() {
        // TODO: update the code to test the property transactionIdentifier
        expect(instance).to.have.property('transactionIdentifier');
        // expect(instance.transactionIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property transactionType (base name: "transactionType")', function() {
        // TODO: update the code to test the property transactionType
        expect(instance).to.have.property('transactionType');
        // expect(instance.transactionType).to.be(expectedValueLiteral);
      });

    });
  });

}));
