/*
 * The Selling Partner API for Invoices.
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * OpenAPI spec version: 2024-06-19
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/InvoicesApiModel_2024-06-19/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/InvoicesApiModel_2024-06-19/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForInvoices);
  }
}(this, function(expect, TheSellingPartnerApiForInvoices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheSellingPartnerApiForInvoices.InvoicesApi();
  });

  describe('InvoicesApiModel_2024-06-19', function() {
    describe('InvoicesApi', function() {
      describe('createInvoicesExport', function() {
        it('should call createInvoicesExport successfully', function(done) {
          // TODO: uncomment, update parameter values for createInvoicesExport call and complete the assertions
          /*
          var body = new TheSellingPartnerApiForInvoices.ExportInvoicesRequest();
          body.dateEnd = new Date();
          body.dateStart = new Date();
          body.externalInvoiceId = "";
          body.fileFormat = new TheSellingPartnerApiForInvoices.FileFormat();
          body.invoiceType = "";
          body.marketplaceId = "";
          body.series = "";
          body.statuses = [""];
          body.transactionIdentifier = new TheSellingPartnerApiForInvoices.TransactionIdentifier();
          body.transactionIdentifier.name = "";
          body.transactionIdentifier.id = "";
          body.transactionType = "";

          instance.createInvoicesExport(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForInvoices.ExportInvoicesResponse);
            expect(data.exportId).to.be.a('string');
            // expect(data.exportId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInvoice', function() {
        it('should call getInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoice call and complete the assertions
          /*
          var marketplaceId = "marketplaceId_example";
          var invoiceId = "invoiceId_example";

          instance.getInvoice(marketplaceId, invoiceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForInvoices.GetInvoiceResponse);
            expect(data.invoice).to.be.a(TheSellingPartnerApiForInvoices.Invoice);
                  expect(data.invoice._date).to.be.a(Date);
              // expect(data.invoice._date).to.be(new Date());
              expect(data.invoice.errorCode).to.be.a('string');
              // expect(data.invoice.errorCode).to.be("");
              expect(data.invoice.externalInvoiceId).to.be.a('string');
              // expect(data.invoice.externalInvoiceId).to.be("");
              expect(data.invoice.govResponse).to.be.a('string');
              // expect(data.invoice.govResponse).to.be("");
              expect(data.invoice.id).to.be.a('string');
              // expect(data.invoice.id).to.be("");
              expect(data.invoice.invoiceType).to.be.a('string');
              // expect(data.invoice.invoiceType).to.be("");
              expect(data.invoice.series).to.be.a('string');
              // expect(data.invoice.series).to.be("");
              expect(data.invoice.status).to.be.a('string');
              // expect(data.invoice.status).to.be("");
              {
                let dataCtr = data.invoice.transactionIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TheSellingPartnerApiForInvoices.TransactionIdentifier);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.id).to.be.a('string');
                  // expect(data.id).to.be("");
                }
              }
              expect(data.invoice.transactionType).to.be.a('string');
              // expect(data.invoice.transactionType).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInvoices', function() {
        it('should call getInvoices successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoices call and complete the assertions
          /*
          var marketplaceId = "marketplaceId_example";
          var opts = {};
          opts.transactionIdentifierName = "transactionIdentifierName_example";
          opts.pageSize = 56;
          opts.dateEnd = new Date("2013-10-20T19:20:30+01:00");
          opts.transactionType = "transactionType_example";
          opts.transactionIdentifierId = "transactionIdentifierId_example";
          opts.dateStart = new Date("2013-10-20T19:20:30+01:00");
          opts.series = "series_example";
          opts.nextToken = "nextToken_example";
          opts.sortOrder = "sortOrder_example";
          opts.invoiceType = "invoiceType_example";
          opts.statuses = ["statuses_example"];
          opts.externalInvoiceId = "externalInvoiceId_example";
          opts.sortBy = "sortBy_example";

          instance.getInvoices(marketplaceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForInvoices.GetInvoicesResponse);
            {
              let dataCtr = data.invoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForInvoices.Invoice);
                expect(data._date).to.be.a(Date);
                // expect(data._date).to.be(new Date());
                expect(data.errorCode).to.be.a('string');
                // expect(data.errorCode).to.be("");
                expect(data.externalInvoiceId).to.be.a('string');
                // expect(data.externalInvoiceId).to.be("");
                expect(data.govResponse).to.be.a('string');
                // expect(data.govResponse).to.be("");
                expect(data.id).to.be.a('string');
                // expect(data.id).to.be("");
                expect(data.invoiceType).to.be.a('string');
                // expect(data.invoiceType).to.be("");
                expect(data.series).to.be.a('string');
                // expect(data.series).to.be("");
                expect(data.status).to.be.a('string');
                // expect(data.status).to.be("");
                {
                  let dataCtr = data.transactionIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TheSellingPartnerApiForInvoices.TransactionIdentifier);
                    expect(data.name).to.be.a('string');
                    // expect(data.name).to.be("");
                    expect(data.id).to.be.a('string');
                    // expect(data.id).to.be("");
                  }
                }
                expect(data.transactionType).to.be.a('string');
                // expect(data.transactionType).to.be("");
              }
            }
            expect(data.nextToken).to.be.a('string');
            // expect(data.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInvoicesAttributes', function() {
        it('should call getInvoicesAttributes successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoicesAttributes call and complete the assertions
          /*
          var marketplaceId = "marketplaceId_example";

          instance.getInvoicesAttributes(marketplaceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForInvoices.GetInvoicesAttributesResponse);
            expect(data.invoicesAttributes).to.be.a(TheSellingPartnerApiForInvoices.InvoicesAttributes);
                  {
                let dataCtr = data.invoicesAttributes.invoiceStatusOptions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TheSellingPartnerApiForInvoices.AttributeOption);
                  expect(data.description).to.be.a('string');
                  // expect(data.description).to.be("");
                  expect(data.value).to.be.a('string');
                  // expect(data.value).to.be("");
                }
              }
              {
                let dataCtr = data.invoicesAttributes.invoiceTypeOptions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TheSellingPartnerApiForInvoices.AttributeOption);
                  expect(data.description).to.be.a('string');
                  // expect(data.description).to.be("");
                  expect(data.value).to.be.a('string');
                  // expect(data.value).to.be("");
                }
              }
              {
                let dataCtr = data.invoicesAttributes.transactionIdentifierNameOptions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TheSellingPartnerApiForInvoices.AttributeOption);
                  expect(data.description).to.be.a('string');
                  // expect(data.description).to.be("");
                  expect(data.value).to.be.a('string');
                  // expect(data.value).to.be("");
                }
              }
              {
                let dataCtr = data.invoicesAttributes.transactionTypeOptions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TheSellingPartnerApiForInvoices.AttributeOption);
                  expect(data.description).to.be.a('string');
                  // expect(data.description).to.be("");
                  expect(data.value).to.be.a('string');
                  // expect(data.value).to.be("");
                }
              }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInvoicesDocument', function() {
        it('should call getInvoicesDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoicesDocument call and complete the assertions
          /*
          var invoicesDocumentId = "invoicesDocumentId_example";

          instance.getInvoicesDocument(invoicesDocumentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForInvoices.GetInvoicesDocumentResponse);
            expect(data.invoicesDocument).to.be.a(TheSellingPartnerApiForInvoices.InvoicesDocument);
                  expect(data.invoicesDocument.invoicesDocumentId).to.be.a('string');
              // expect(data.invoicesDocument.invoicesDocumentId).to.be("");
              expect(data.invoicesDocument.invoicesDocumentUrl).to.be.a('string');
              // expect(data.invoicesDocument.invoicesDocumentUrl).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInvoicesExport', function() {
        it('should call getInvoicesExport successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoicesExport call and complete the assertions
          /*
          var exportId = "exportId_example";

          instance.getInvoicesExport(exportId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForInvoices.GetInvoicesExportResponse);
            expect(data._export).to.be.a(TheSellingPartnerApiForInvoices.ModelExport);
                  expect(data._export.errorMessage).to.be.a('string');
              // expect(data._export.errorMessage).to.be("");
              expect(data._export.exportId).to.be.a('string');
              // expect(data._export.exportId).to.be("");
              expect(data._export.generateExportFinishedAt).to.be.a(Date);
              // expect(data._export.generateExportFinishedAt).to.be(new Date());
              expect(data._export.generateExportStartedAt).to.be.a(Date);
              // expect(data._export.generateExportStartedAt).to.be(new Date());
              {
                let dataCtr = data._export.invoicesDocumentIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data._export.status).to.be.a(TheSellingPartnerApiForInvoices.ExportStatus);
      

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInvoicesExports', function() {
        it('should call getInvoicesExports successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoicesExports call and complete the assertions
          /*
          var marketplaceId = "marketplaceId_example";
          var opts = {};
          opts.dateStart = new Date("2013-10-20T19:20:30+01:00");
          opts.nextToken = "nextToken_example";
          opts.pageSize = 56;
          opts.dateEnd = new Date("2013-10-20T19:20:30+01:00");
          opts.status = "status_example";

          instance.getInvoicesExports(marketplaceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForInvoices.GetInvoicesExportsResponse);
            {
              let dataCtr = data.exports;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TheSellingPartnerApiForInvoices.ModelExport);
                expect(data.errorMessage).to.be.a('string');
                // expect(data.errorMessage).to.be("");
                expect(data.exportId).to.be.a('string');
                // expect(data.exportId).to.be("");
                expect(data.generateExportFinishedAt).to.be.a(Date);
                // expect(data.generateExportFinishedAt).to.be(new Date());
                expect(data.generateExportStartedAt).to.be.a(Date);
                // expect(data.generateExportStartedAt).to.be(new Date());
                {
                  let dataCtr = data.invoicesDocumentIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.status).to.be.a(TheSellingPartnerApiForInvoices.ExportStatus);
        
              }
            }
            expect(data.nextToken).to.be.a('string');
            // expect(data.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
