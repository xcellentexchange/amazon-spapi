/*
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/catalogItems_2022-04-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/catalogItems_2022-04-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForCatalogItems);
  }
}(this, function(expect, SellingPartnerApiForCatalogItems) {
  'use strict';

  var instance;

  describe('catalogItems_2022-04-01', function() {
    describe('ItemSummaryByMarketplace', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      });

      it('should create an instance of ItemSummaryByMarketplace', function() {
        // TODO: update the code to test ItemSummaryByMarketplace
        expect(instance).to.be.a(SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace);
      });

      it('should have the property marketplaceId (base name: "marketplaceId")', function() {
        // TODO: update the code to test the property marketplaceId
        expect(instance).to.have.property('marketplaceId');
        // expect(instance.marketplaceId).to.be(expectedValueLiteral);
      });

      it('should have the property adultProduct (base name: "adultProduct")', function() {
        // TODO: update the code to test the property adultProduct
        expect(instance).to.have.property('adultProduct');
        // expect(instance.adultProduct).to.be(expectedValueLiteral);
      });

      it('should have the property autographed (base name: "autographed")', function() {
        // TODO: update the code to test the property autographed
        expect(instance).to.have.property('autographed');
        // expect(instance.autographed).to.be(expectedValueLiteral);
      });

      it('should have the property brand (base name: "brand")', function() {
        // TODO: update the code to test the property brand
        expect(instance).to.have.property('brand');
        // expect(instance.brand).to.be(expectedValueLiteral);
      });

      it('should have the property browseClassification (base name: "browseClassification")', function() {
        // TODO: update the code to test the property browseClassification
        expect(instance).to.have.property('browseClassification');
        // expect(instance.browseClassification).to.be(expectedValueLiteral);
      });

      it('should have the property color (base name: "color")', function() {
        // TODO: update the code to test the property color
        expect(instance).to.have.property('color');
        // expect(instance.color).to.be(expectedValueLiteral);
      });

      it('should have the property contributors (base name: "contributors")', function() {
        // TODO: update the code to test the property contributors
        expect(instance).to.have.property('contributors');
        // expect(instance.contributors).to.be(expectedValueLiteral);
      });

      it('should have the property itemClassification (base name: "itemClassification")', function() {
        // TODO: update the code to test the property itemClassification
        expect(instance).to.have.property('itemClassification');
        // expect(instance.itemClassification).to.be(expectedValueLiteral);
      });

      it('should have the property itemName (base name: "itemName")', function() {
        // TODO: update the code to test the property itemName
        expect(instance).to.have.property('itemName');
        // expect(instance.itemName).to.be(expectedValueLiteral);
      });

      it('should have the property manufacturer (base name: "manufacturer")', function() {
        // TODO: update the code to test the property manufacturer
        expect(instance).to.have.property('manufacturer');
        // expect(instance.manufacturer).to.be(expectedValueLiteral);
      });

      it('should have the property memorabilia (base name: "memorabilia")', function() {
        // TODO: update the code to test the property memorabilia
        expect(instance).to.have.property('memorabilia');
        // expect(instance.memorabilia).to.be(expectedValueLiteral);
      });

      it('should have the property modelNumber (base name: "modelNumber")', function() {
        // TODO: update the code to test the property modelNumber
        expect(instance).to.have.property('modelNumber');
        // expect(instance.modelNumber).to.be(expectedValueLiteral);
      });

      it('should have the property packageQuantity (base name: "packageQuantity")', function() {
        // TODO: update the code to test the property packageQuantity
        expect(instance).to.have.property('packageQuantity');
        // expect(instance.packageQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property partNumber (base name: "partNumber")', function() {
        // TODO: update the code to test the property partNumber
        expect(instance).to.have.property('partNumber');
        // expect(instance.partNumber).to.be(expectedValueLiteral);
      });

      it('should have the property releaseDate (base name: "releaseDate")', function() {
        // TODO: update the code to test the property releaseDate
        expect(instance).to.have.property('releaseDate');
        // expect(instance.releaseDate).to.be(expectedValueLiteral);
      });

      it('should have the property size (base name: "size")', function() {
        // TODO: update the code to test the property size
        expect(instance).to.have.property('size');
        // expect(instance.size).to.be(expectedValueLiteral);
      });

      it('should have the property style (base name: "style")', function() {
        // TODO: update the code to test the property style
        expect(instance).to.have.property('style');
        // expect(instance.style).to.be(expectedValueLiteral);
      });

      it('should have the property tradeInEligible (base name: "tradeInEligible")', function() {
        // TODO: update the code to test the property tradeInEligible
        expect(instance).to.have.property('tradeInEligible');
        // expect(instance.tradeInEligible).to.be(expectedValueLiteral);
      });

      it('should have the property websiteDisplayGroup (base name: "websiteDisplayGroup")', function() {
        // TODO: update the code to test the property websiteDisplayGroup
        expect(instance).to.have.property('websiteDisplayGroup');
        // expect(instance.websiteDisplayGroup).to.be(expectedValueLiteral);
      });

      it('should have the property websiteDisplayGroupName (base name: "websiteDisplayGroupName")', function() {
        // TODO: update the code to test the property websiteDisplayGroupName
        expect(instance).to.have.property('websiteDisplayGroupName');
        // expect(instance.websiteDisplayGroupName).to.be(expectedValueLiteral);
      });

    });
  });

}));
