/*
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/listingsItems_2021-08-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/listingsItems_2021-08-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForListingsItems);
  }
}(this, function(expect, SellingPartnerApiForListingsItems) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForListingsItems.ListingsApi();
  });

  describe('listingsItems_2021-08-01', function() {
    describe('ListingsApi', function() {
      describe('deleteListingsItem', function() {
        it('should call deleteListingsItem successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteListingsItem call and complete the assertions
          /*
          var sellerId = "sellerId_example";
          var sku = "sku_example";
          var marketplaceIds = ["ATVPDKIKX0DER"];
          var opts = {};
          opts.issueLocale = "en_US";

          instance.deleteListingsItem(sellerId, sku, marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForListingsItems.ListingsItemSubmissionResponse);
            expect(data.sku).to.be.a('string');
            // expect(data.sku).to.be("");
            expect(data.status).to.be.a('string');
            // expect(data.status).to.be("ACCEPTED");
            expect(data.submissionId).to.be.a('string');
            // expect(data.submissionId).to.be("");
            {
              let dataCtr = data.issues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForListingsItems.Issue);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
                expect(data.severity).to.be.a('string');
                // expect(data.severity).to.be("ERROR");
                {
                  let dataCtr = data.attributeNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.categories;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.enforcements).to.be.a(SellingPartnerApiForListingsItems.IssueEnforcements);
                      {
                    let dataCtr = data.enforcements.actions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForListingsItems.IssueEnforcementAction);
                      expect(data.action).to.be.a('string');
                      // expect(data.action).to.be("LISTING_SUPPRESSED");
                    }
                  }
                  expect(data.enforcements.exemption).to.be.a(SellingPartnerApiForListingsItems.IssueExemption);
                        expect(data.enforcements.exemption.status).to.be.a('string');
                    // expect(data.enforcements.exemption.status).to.be("EXEMPT");
                    expect(data.enforcements.exemption.expiryDate).to.be.a(Date);
                    // expect(data.enforcements.exemption.expiryDate).to.be(2023-10-28T00:36:48.914Z);
              }
            }
            expect(data.identifiers).to.be.a(SellingPartnerApiForListingsItems.ItemIdentifiers);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getListingsItem', function() {
        it('should call getListingsItem successfully', function(done) {
          // TODO: uncomment, update parameter values for getListingsItem call and complete the assertions
          /*
          var sellerId = "sellerId_example";
          var sku = "sku_example";
          var marketplaceIds = ["ATVPDKIKX0DER"];
          var opts = {};
          opts.issueLocale = "en_US";
          opts.includedData = ["[\"summaries\"]"];

          instance.getListingsItem(sellerId, sku, marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForListingsItems.Item);
            expect(data.sku).to.be.a('string');
            // expect(data.sku).to.be("");
            expect(data.summaries).to.be.a(SellingPartnerApiForListingsItems.ItemSummaries);
                expect(data.attributes).to.be.a(SellingPartnerApiForListingsItems.ItemAttributes);
                expect(data.issues).to.be.a(SellingPartnerApiForListingsItems.ItemIssues);
                expect(data.offers).to.be.a(SellingPartnerApiForListingsItems.ItemOffers);
                {
              let dataCtr = data.fulfillmentAvailability;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForListingsItems.FulfillmentAvailability);
                expect(data.fulfillmentChannelCode).to.be.a('string');
                // expect(data.fulfillmentChannelCode).to.be("");
                expect(data.quantity).to.be.a('number');
                // expect(data.quantity).to.be(0);
              }
            }
            {
              let dataCtr = data.procurement;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForListingsItems.ItemProcurement);
                expect(data.costPrice).to.be.a(SellingPartnerApiForListingsItems.Money);
                      expect(data.costPrice.currencyCode).to.be.a('string');
                  // expect(data.costPrice.currencyCode).to.be("");
                  expect(data.costPrice.amount).to.be.a(SellingPartnerApiForListingsItems.Decimal);
          
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchListingsItem', function() {
        it('should call patchListingsItem successfully', function(done) {
          // TODO: uncomment, update parameter values for patchListingsItem call and complete the assertions
          /*
          var sellerId = "sellerId_example";
          var sku = "sku_example";
          var marketplaceIds = ["ATVPDKIKX0DER"];
          var body = new SellingPartnerApiForListingsItems.ListingsItemPatchRequest();
          body.productType = "";
          body.patches = [new SellingPartnerApiForListingsItems.PatchOperation()];
          body.patches[0].op = "add";
          body.patches[0].path = "";
          body.patches[0].value = [];
          var opts = {};
          opts.includedData = ["[\"issues\"]"];
          opts.mode = "VALIDATION_PREVIEW";
          opts.issueLocale = "en_US";

          instance.patchListingsItem(sellerId, sku, marketplaceIds, body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForListingsItems.ListingsItemSubmissionResponse);
            expect(data.sku).to.be.a('string');
            // expect(data.sku).to.be("");
            expect(data.status).to.be.a('string');
            // expect(data.status).to.be("ACCEPTED");
            expect(data.submissionId).to.be.a('string');
            // expect(data.submissionId).to.be("");
            {
              let dataCtr = data.issues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForListingsItems.Issue);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
                expect(data.severity).to.be.a('string');
                // expect(data.severity).to.be("ERROR");
                {
                  let dataCtr = data.attributeNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.categories;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.enforcements).to.be.a(SellingPartnerApiForListingsItems.IssueEnforcements);
                      {
                    let dataCtr = data.enforcements.actions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForListingsItems.IssueEnforcementAction);
                      expect(data.action).to.be.a('string');
                      // expect(data.action).to.be("LISTING_SUPPRESSED");
                    }
                  }
                  expect(data.enforcements.exemption).to.be.a(SellingPartnerApiForListingsItems.IssueExemption);
                        expect(data.enforcements.exemption.status).to.be.a('string');
                    // expect(data.enforcements.exemption.status).to.be("EXEMPT");
                    expect(data.enforcements.exemption.expiryDate).to.be.a(Date);
                    // expect(data.enforcements.exemption.expiryDate).to.be(2023-10-28T00:36:48.914Z);
              }
            }
            expect(data.identifiers).to.be.a(SellingPartnerApiForListingsItems.ItemIdentifiers);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putListingsItem', function() {
        it('should call putListingsItem successfully', function(done) {
          // TODO: uncomment, update parameter values for putListingsItem call and complete the assertions
          /*
          var sellerId = "sellerId_example";
          var sku = "sku_example";
          var marketplaceIds = ["ATVPDKIKX0DER"];
          var body = new SellingPartnerApiForListingsItems.ListingsItemPutRequest();
          body.productType = "";
          body.requirements = "LISTING";
          body.attributes = ;
          var opts = {};
          opts.includedData = ["[\"issues\"]"];
          opts.mode = "VALIDATION_PREVIEW";
          opts.issueLocale = "en_US";

          instance.putListingsItem(sellerId, sku, marketplaceIds, body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForListingsItems.ListingsItemSubmissionResponse);
            expect(data.sku).to.be.a('string');
            // expect(data.sku).to.be("");
            expect(data.status).to.be.a('string');
            // expect(data.status).to.be("ACCEPTED");
            expect(data.submissionId).to.be.a('string');
            // expect(data.submissionId).to.be("");
            {
              let dataCtr = data.issues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForListingsItems.Issue);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
                expect(data.severity).to.be.a('string');
                // expect(data.severity).to.be("ERROR");
                {
                  let dataCtr = data.attributeNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.categories;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.enforcements).to.be.a(SellingPartnerApiForListingsItems.IssueEnforcements);
                      {
                    let dataCtr = data.enforcements.actions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForListingsItems.IssueEnforcementAction);
                      expect(data.action).to.be.a('string');
                      // expect(data.action).to.be("LISTING_SUPPRESSED");
                    }
                  }
                  expect(data.enforcements.exemption).to.be.a(SellingPartnerApiForListingsItems.IssueExemption);
                        expect(data.enforcements.exemption.status).to.be.a('string');
                    // expect(data.enforcements.exemption.status).to.be("EXEMPT");
                    expect(data.enforcements.exemption.expiryDate).to.be.a(Date);
                    // expect(data.enforcements.exemption.expiryDate).to.be(2023-10-28T00:36:48.914Z);
              }
            }
            expect(data.identifiers).to.be.a(SellingPartnerApiForListingsItems.ItemIdentifiers);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchListingsItems', function() {
        it('should call searchListingsItems successfully', function(done) {
          // TODO: uncomment, update parameter values for searchListingsItems call and complete the assertions
          /*
          var sellerId = "sellerId_example";
          var marketplaceIds = ["ATVPDKIKX0DER"];
          var opts = {};
          opts.identifiers = ["GM-ZDPI-9B4E"];
          opts.identifiersType = "SKU";
          opts.pageSize = 10;
          opts.pageToken = "sdlkj234lkj234lksjdflkjwdflkjsfdlkj234234234234";
          opts.includedData = ["[\"summaries\"]"];
          opts.issueLocale = "en_US";

          instance.searchListingsItems(sellerId, marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForListingsItems.ItemSearchResults);
            expect(data.numberOfResults).to.be.a('number');
            // expect(data.numberOfResults).to.be(0);
            expect(data.pagination).to.be.a(SellingPartnerApiForListingsItems.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");
              expect(data.pagination.previousToken).to.be.a('string');
              // expect(data.pagination.previousToken).to.be("");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SellingPartnerApiForListingsItems.Item);
                expect(data.sku).to.be.a('string');
                // expect(data.sku).to.be("");
                expect(data.summaries).to.be.a(SellingPartnerApiForListingsItems.ItemSummaries);
                    expect(data.attributes).to.be.a(SellingPartnerApiForListingsItems.ItemAttributes);
                    expect(data.issues).to.be.a(SellingPartnerApiForListingsItems.ItemIssues);
                    expect(data.offers).to.be.a(SellingPartnerApiForListingsItems.ItemOffers);
                    {
                  let dataCtr = data.fulfillmentAvailability;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForListingsItems.FulfillmentAvailability);
                    expect(data.fulfillmentChannelCode).to.be.a('string');
                    // expect(data.fulfillmentChannelCode).to.be("");
                    expect(data.quantity).to.be.a('number');
                    // expect(data.quantity).to.be(0);
                  }
                }
                {
                  let dataCtr = data.procurement;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SellingPartnerApiForListingsItems.ItemProcurement);
                    expect(data.costPrice).to.be.a(SellingPartnerApiForListingsItems.Money);
                          expect(data.costPrice.currencyCode).to.be.a('string');
                      // expect(data.costPrice.currencyCode).to.be("");
                      expect(data.costPrice.amount).to.be.a(SellingPartnerApiForListingsItems.Decimal);
              
                  }
                }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
