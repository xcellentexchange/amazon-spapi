/*
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/listingsItems_2021-08-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/listingsItems_2021-08-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForListingsItems);
  }
}(this, function(expect, SellingPartnerApiForListingsItems) {
  'use strict';

  var instance;

  describe('listingsItems_2021-08-01', function() {
    describe('ItemSummaryByMarketplace', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForListingsItems.ItemSummaryByMarketplace();
      });

      it('should create an instance of ItemSummaryByMarketplace', function() {
        // TODO: update the code to test ItemSummaryByMarketplace
        expect(instance).to.be.a(SellingPartnerApiForListingsItems.ItemSummaryByMarketplace);
      });

      it('should have the property marketplaceId (base name: "marketplaceId")', function() {
        // TODO: update the code to test the property marketplaceId
        expect(instance).to.have.property('marketplaceId');
        // expect(instance.marketplaceId).to.be(expectedValueLiteral);
      });

      it('should have the property asin (base name: "asin")', function() {
        // TODO: update the code to test the property asin
        expect(instance).to.have.property('asin');
        // expect(instance.asin).to.be(expectedValueLiteral);
      });

      it('should have the property productType (base name: "productType")', function() {
        // TODO: update the code to test the property productType
        expect(instance).to.have.property('productType');
        // expect(instance.productType).to.be(expectedValueLiteral);
      });

      it('should have the property conditionType (base name: "conditionType")', function() {
        // TODO: update the code to test the property conditionType
        expect(instance).to.have.property('conditionType');
        // expect(instance.conditionType).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property fnSku (base name: "fnSku")', function() {
        // TODO: update the code to test the property fnSku
        expect(instance).to.have.property('fnSku');
        // expect(instance.fnSku).to.be(expectedValueLiteral);
      });

      it('should have the property itemName (base name: "itemName")', function() {
        // TODO: update the code to test the property itemName
        expect(instance).to.have.property('itemName');
        // expect(instance.itemName).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdatedDate (base name: "lastUpdatedDate")', function() {
        // TODO: update the code to test the property lastUpdatedDate
        expect(instance).to.have.property('lastUpdatedDate');
        // expect(instance.lastUpdatedDate).to.be(expectedValueLiteral);
      });

      it('should have the property mainImage (base name: "mainImage")', function() {
        // TODO: update the code to test the property mainImage
        expect(instance).to.have.property('mainImage');
        // expect(instance.mainImage).to.be(expectedValueLiteral);
      });

    });
  });

}));
