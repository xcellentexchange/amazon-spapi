/*
 * Selling Partner API for Solicitations
 * With the Solicitations API you can build applications that send non-critical solicitations to buyers. You can get a list of solicitation types that are available for an order that you specify, then call an operation that sends a solicitation to the buyer for that order. Buyers cannot respond to solicitations sent by this API, and these solicitations do not appear in the Messaging section of Seller Central or in the recipient's Message Center. The Solicitations API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/solicitations/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/solicitations/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForSolicitations);
  }
}(this, function(expect, SellingPartnerApiForSolicitations) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForSolicitations.SolicitationsApi();
  });

  describe('solicitations', function() {
    describe('SolicitationsApi', function() {
      describe('createProductReviewAndSellerFeedbackSolicitation', function() {
        it('should call createProductReviewAndSellerFeedbackSolicitation successfully', function(done) {
          // TODO: uncomment, update parameter values for createProductReviewAndSellerFeedbackSolicitation call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];

          instance.createProductReviewAndSellerFeedbackSolicitation(amazonOrderId, marketplaceIds).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForSolicitations.CreateProductReviewAndSellerFeedbackSolicitationResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForSolicitations.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSolicitationActionsForOrder', function() {
        it('should call getSolicitationActionsForOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for getSolicitationActionsForOrder call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];

          instance.getSolicitationActionsForOrder(amazonOrderId, marketplaceIds).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForSolicitations.GetSolicitationActionsForOrderResponse);
            expect(data.links).to.be.a(SellingPartnerApiForSolicitations.GetSolicitationActionsForOrderResponseLinks);
                  expect(data.links.self).to.be.a(SellingPartnerApiForSolicitations.LinkObject);
                    expect(data.links.self.href).to.be.a('string');
                // expect(data.links.self.href).to.be("");
                expect(data.links.self.name).to.be.a('string');
                // expect(data.links.self.name).to.be("");
              {
                let dataCtr = data.links.actions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForSolicitations.LinkObject);
                  expect(data.href).to.be.a('string');
                  // expect(data.href).to.be("");
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                }
              }
            expect(data.embedded).to.be.a(SellingPartnerApiForSolicitations.GetSolicitationActionsForOrderResponseEmbedded);
                  {
                let dataCtr = data.embedded.actions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForSolicitations.GetSolicitationActionResponse);
                  expect(data.links).to.be.a(SellingPartnerApiForSolicitations.GetSolicitationActionResponseLinks);
                        expect(data.links.self).to.be.a(SellingPartnerApiForSolicitations.LinkObject);
                          expect(data.links.self.href).to.be.a('string');
                      // expect(data.links.self.href).to.be("");
                      expect(data.links.self.name).to.be.a('string');
                      // expect(data.links.self.name).to.be("");
                    expect(data.links.schema).to.be.a(SellingPartnerApiForSolicitations.LinkObject);
                          expect(data.links.schema.href).to.be.a('string');
                      // expect(data.links.schema.href).to.be("");
                      expect(data.links.schema.name).to.be.a('string');
                      // expect(data.links.schema.name).to.be("");
                  expect(data.embedded).to.be.a(SellingPartnerApiForSolicitations.GetSolicitationActionResponseEmbedded);
                        expect(data.embedded.schema).to.be.a(SellingPartnerApiForSolicitations.GetSchemaResponse);
                          expect(data.embedded.schema.links).to.be.a(SellingPartnerApiForSolicitations.GetSchemaResponseLinks);
                            expect(data.embedded.schema.links.self).to.be.a(SellingPartnerApiForSolicitations.LinkObject);
                              expect(data.embedded.schema.links.self.href).to.be.a('string');
                          // expect(data.embedded.schema.links.self.href).to.be("");
                          expect(data.embedded.schema.links.self.name).to.be.a('string');
                          // expect(data.embedded.schema.links.self.name).to.be("");
                      expect(data.embedded.schema.payload).to.be.a(SellingPartnerApiForSolicitations.Schema);
                          expect(data.embedded.schema.errors).to.be.a(SellingPartnerApiForSolicitations.ErrorList);
              
                  expect(data.payload).to.be.a(SellingPartnerApiForSolicitations.SolicitationsAction);
                        expect(data.payload.name).to.be.a('string');
                    // expect(data.payload.name).to.be("");
                  expect(data.errors).to.be.a(SellingPartnerApiForSolicitations.ErrorList);
          
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApiForSolicitations.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
