/*
 * Selling Partner API for Data Kiosk
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2023-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/dataKiosk_2023-11-15/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/dataKiosk_2023-11-15/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForDataKiosk);
  }
}(this, function(expect, SellingPartnerApiForDataKiosk) {
  'use strict';

  var instance;

  describe('dataKiosk_2023-11-15', function() {
    describe('Query', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForDataKiosk.Query();
      });

      it('should create an instance of Query', function() {
        // TODO: update the code to test Query
        expect(instance).to.be.a(SellingPartnerApiForDataKiosk.Query);
      });

      it('should have the property queryId (base name: "queryId")', function() {
        // TODO: update the code to test the property queryId
        expect(instance).to.have.property('queryId');
        // expect(instance.queryId).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property createdTime (base name: "createdTime")', function() {
        // TODO: update the code to test the property createdTime
        expect(instance).to.have.property('createdTime');
        // expect(instance.createdTime).to.be(expectedValueLiteral);
      });

      it('should have the property processingStatus (base name: "processingStatus")', function() {
        // TODO: update the code to test the property processingStatus
        expect(instance).to.have.property('processingStatus');
        // expect(instance.processingStatus).to.be(expectedValueLiteral);
      });

      it('should have the property processingStartTime (base name: "processingStartTime")', function() {
        // TODO: update the code to test the property processingStartTime
        expect(instance).to.have.property('processingStartTime');
        // expect(instance.processingStartTime).to.be(expectedValueLiteral);
      });

      it('should have the property processingEndTime (base name: "processingEndTime")', function() {
        // TODO: update the code to test the property processingEndTime
        expect(instance).to.have.property('processingEndTime');
        // expect(instance.processingEndTime).to.be(expectedValueLiteral);
      });

      it('should have the property dataDocumentId (base name: "dataDocumentId")', function() {
        // TODO: update the code to test the property dataDocumentId
        expect(instance).to.have.property('dataDocumentId');
        // expect(instance.dataDocumentId).to.be(expectedValueLiteral);
      });

      it('should have the property errorDocumentId (base name: "errorDocumentId")', function() {
        // TODO: update the code to test the property errorDocumentId
        expect(instance).to.have.property('errorDocumentId');
        // expect(instance.errorDocumentId).to.be(expectedValueLiteral);
      });

      it('should have the property pagination (base name: "pagination")', function() {
        // TODO: update the code to test the property pagination
        expect(instance).to.have.property('pagination');
        // expect(instance.pagination).to.be(expectedValueLiteral);
      });

    });
  });

}));
