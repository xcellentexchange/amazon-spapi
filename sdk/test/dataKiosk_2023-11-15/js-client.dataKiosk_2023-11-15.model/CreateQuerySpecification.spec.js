/*
 * Selling Partner API for Data Kiosk
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2023-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/dataKiosk_2023-11-15/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/dataKiosk_2023-11-15/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForDataKiosk);
  }
}(this, function(expect, SellingPartnerApiForDataKiosk) {
  'use strict';

  var instance;

  describe('dataKiosk_2023-11-15', function() {
    describe('CreateQuerySpecification', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForDataKiosk.CreateQuerySpecification();
      });

      it('should create an instance of CreateQuerySpecification', function() {
        // TODO: update the code to test CreateQuerySpecification
        expect(instance).to.be.a(SellingPartnerApiForDataKiosk.CreateQuerySpecification);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property paginationToken (base name: "paginationToken")', function() {
        // TODO: update the code to test the property paginationToken
        expect(instance).to.have.property('paginationToken');
        // expect(instance.paginationToken).to.be(expectedValueLiteral);
      });

    });
  });

}));
