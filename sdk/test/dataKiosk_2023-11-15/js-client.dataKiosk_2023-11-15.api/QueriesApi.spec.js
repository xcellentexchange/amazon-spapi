/*
 * Selling Partner API for Data Kiosk
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2023-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/dataKiosk_2023-11-15/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/dataKiosk_2023-11-15/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForDataKiosk);
  }
}(this, function(expect, SellingPartnerApiForDataKiosk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForDataKiosk.QueriesApi();
  });

  describe('dataKiosk_2023-11-15', function() {
    describe('QueriesApi', function() {
      describe('cancelQuery', function() {
        it('should call cancelQuery successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelQuery call
          /*
          var queryId = "queryId_example";

          instance.cancelQuery(queryId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createQuery', function() {
        it('should call createQuery successfully', function(done) {
          // TODO: uncomment, update parameter values for createQuery call and complete the assertions
          /*
          var body = new SellingPartnerApiForDataKiosk.CreateQuerySpecification();
          body.query = "";
          body.paginationToken = "";

          instance.createQuery(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForDataKiosk.CreateQueryResponse);
            expect(data.queryId).to.be.a('string');
            // expect(data.queryId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDocument', function() {
        it('should call getDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for getDocument call and complete the assertions
          /*
          var documentId = "documentId_example";

          instance.getDocument(documentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForDataKiosk.GetDocumentResponse);
            expect(data.documentId).to.be.a('string');
            // expect(data.documentId).to.be("");
            expect(data.documentUrl).to.be.a('string');
            // expect(data.documentUrl).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getQueries', function() {
        it('should call getQueries successfully', function(done) {
          // TODO: uncomment, update parameter values for getQueries call and complete the assertions
          /*
          var opts = {};
          opts.processingStatuses = ["processingStatuses_example"];
          opts.pageSize = 10;
          opts.createdSince = new Date("2013-10-20T19:20:30+01:00");
          opts.createdUntil = new Date("2013-10-20T19:20:30+01:00");
          opts.paginationToken = "paginationToken_example";

          instance.getQueries(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForDataKiosk.GetQueriesResponse);
            expect(data.queries).to.be.a(SellingPartnerApiForDataKiosk.QueryList);
                expect(data.pagination).to.be.a(SellingPartnerApiForDataKiosk.GetQueriesResponsePagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getQuery', function() {
        it('should call getQuery successfully', function(done) {
          // TODO: uncomment, update parameter values for getQuery call and complete the assertions
          /*
          var queryId = "queryId_example";

          instance.getQuery(queryId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForDataKiosk.Query);
            expect(data.queryId).to.be.a('string');
            // expect(data.queryId).to.be("");
            expect(data.query).to.be.a('string');
            // expect(data.query).to.be("");
            expect(data.createdTime).to.be.a(Date);
            // expect(data.createdTime).to.be(new Date());
            expect(data.processingStatus).to.be.a('string');
            // expect(data.processingStatus).to.be("CANCELLED");
            expect(data.processingStartTime).to.be.a(Date);
            // expect(data.processingStartTime).to.be(new Date());
            expect(data.processingEndTime).to.be.a(Date);
            // expect(data.processingEndTime).to.be(new Date());
            expect(data.dataDocumentId).to.be.a('string');
            // expect(data.dataDocumentId).to.be("");
            expect(data.errorDocumentId).to.be.a('string');
            // expect(data.errorDocumentId).to.be("");
            expect(data.pagination).to.be.a(SellingPartnerApiForDataKiosk.QueryPagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
