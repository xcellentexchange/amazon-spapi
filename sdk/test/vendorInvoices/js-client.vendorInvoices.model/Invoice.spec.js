/*
 * Selling Partner API for Retail Procurement Payments
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorInvoices/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorInvoices/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementPayments);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementPayments) {
  'use strict';

  var instance;

  describe('vendorInvoices', function() {
    describe('Invoice', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForRetailProcurementPayments.Invoice();
      });

      it('should create an instance of Invoice', function() {
        // TODO: update the code to test Invoice
        expect(instance).to.be.a(SellingPartnerApiForRetailProcurementPayments.Invoice);
      });

      it('should have the property invoiceType (base name: "invoiceType")', function() {
        // TODO: update the code to test the property invoiceType
        expect(instance).to.have.property('invoiceType');
        // expect(instance.invoiceType).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property referenceNumber (base name: "referenceNumber")', function() {
        // TODO: update the code to test the property referenceNumber
        expect(instance).to.have.property('referenceNumber');
        // expect(instance.referenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property _date (base name: "date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

      it('should have the property remitToParty (base name: "remitToParty")', function() {
        // TODO: update the code to test the property remitToParty
        expect(instance).to.have.property('remitToParty');
        // expect(instance.remitToParty).to.be(expectedValueLiteral);
      });

      it('should have the property shipToParty (base name: "shipToParty")', function() {
        // TODO: update the code to test the property shipToParty
        expect(instance).to.have.property('shipToParty');
        // expect(instance.shipToParty).to.be(expectedValueLiteral);
      });

      it('should have the property shipFromParty (base name: "shipFromParty")', function() {
        // TODO: update the code to test the property shipFromParty
        expect(instance).to.have.property('shipFromParty');
        // expect(instance.shipFromParty).to.be(expectedValueLiteral);
      });

      it('should have the property billToParty (base name: "billToParty")', function() {
        // TODO: update the code to test the property billToParty
        expect(instance).to.have.property('billToParty');
        // expect(instance.billToParty).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTerms (base name: "paymentTerms")', function() {
        // TODO: update the code to test the property paymentTerms
        expect(instance).to.have.property('paymentTerms');
        // expect(instance.paymentTerms).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceTotal (base name: "invoiceTotal")', function() {
        // TODO: update the code to test the property invoiceTotal
        expect(instance).to.have.property('invoiceTotal');
        // expect(instance.invoiceTotal).to.be(expectedValueLiteral);
      });

      it('should have the property taxDetails (base name: "taxDetails")', function() {
        // TODO: update the code to test the property taxDetails
        expect(instance).to.have.property('taxDetails');
        // expect(instance.taxDetails).to.be(expectedValueLiteral);
      });

      it('should have the property additionalDetails (base name: "additionalDetails")', function() {
        // TODO: update the code to test the property additionalDetails
        expect(instance).to.have.property('additionalDetails');
        // expect(instance.additionalDetails).to.be(expectedValueLiteral);
      });

      it('should have the property chargeDetails (base name: "chargeDetails")', function() {
        // TODO: update the code to test the property chargeDetails
        expect(instance).to.have.property('chargeDetails');
        // expect(instance.chargeDetails).to.be(expectedValueLiteral);
      });

      it('should have the property allowanceDetails (base name: "allowanceDetails")', function() {
        // TODO: update the code to test the property allowanceDetails
        expect(instance).to.have.property('allowanceDetails');
        // expect(instance.allowanceDetails).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        // TODO: update the code to test the property items
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

    });
  });

}));
