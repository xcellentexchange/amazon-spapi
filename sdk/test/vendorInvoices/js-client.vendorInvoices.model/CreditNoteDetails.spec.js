/*
 * Selling Partner API for Retail Procurement Payments
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorInvoices/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorInvoices/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementPayments);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementPayments) {
  'use strict';

  var instance;

  describe('vendorInvoices', function() {
    describe('CreditNoteDetails', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForRetailProcurementPayments.CreditNoteDetails();
      });

      it('should create an instance of CreditNoteDetails', function() {
        // TODO: update the code to test CreditNoteDetails
        expect(instance).to.be.a(SellingPartnerApiForRetailProcurementPayments.CreditNoteDetails);
      });

      it('should have the property referenceInvoiceNumber (base name: "referenceInvoiceNumber")', function() {
        // TODO: update the code to test the property referenceInvoiceNumber
        expect(instance).to.have.property('referenceInvoiceNumber');
        // expect(instance.referenceInvoiceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property debitNoteNumber (base name: "debitNoteNumber")', function() {
        // TODO: update the code to test the property debitNoteNumber
        expect(instance).to.have.property('debitNoteNumber');
        // expect(instance.debitNoteNumber).to.be(expectedValueLiteral);
      });

      it('should have the property returnsReferenceNumber (base name: "returnsReferenceNumber")', function() {
        // TODO: update the code to test the property returnsReferenceNumber
        expect(instance).to.have.property('returnsReferenceNumber');
        // expect(instance.returnsReferenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property goodsReturnDate (base name: "goodsReturnDate")', function() {
        // TODO: update the code to test the property goodsReturnDate
        expect(instance).to.have.property('goodsReturnDate');
        // expect(instance.goodsReturnDate).to.be(expectedValueLiteral);
      });

      it('should have the property rmaId (base name: "rmaId")', function() {
        // TODO: update the code to test the property rmaId
        expect(instance).to.have.property('rmaId');
        // expect(instance.rmaId).to.be(expectedValueLiteral);
      });

      it('should have the property coopReferenceNumber (base name: "coopReferenceNumber")', function() {
        // TODO: update the code to test the property coopReferenceNumber
        expect(instance).to.have.property('coopReferenceNumber');
        // expect(instance.coopReferenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property consignorsReferenceNumber (base name: "consignorsReferenceNumber")', function() {
        // TODO: update the code to test the property consignorsReferenceNumber
        expect(instance).to.have.property('consignorsReferenceNumber');
        // expect(instance.consignorsReferenceNumber).to.be(expectedValueLiteral);
      });

    });
  });

}));
