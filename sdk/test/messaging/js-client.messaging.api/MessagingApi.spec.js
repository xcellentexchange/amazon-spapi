/*
 * Selling Partner API for Messaging
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/messaging/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/messaging/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMessaging);
  }
}(this, function(expect, SellingPartnerApiForMessaging) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForMessaging.MessagingApi();
  });

  describe('messaging', function() {
    describe('MessagingApi', function() {
      describe('confirmCustomizationDetails', function() {
        it('should call confirmCustomizationDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for confirmCustomizationDetails call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.CreateConfirmCustomizationDetailsRequest();
          body.text = "";
          body.attachments = [new SellingPartnerApiForMessaging.Attachment()];
          body.attachments[0].uploadDestinationId = "";
          body.attachments[0].fileName = "";

          instance.confirmCustomizationDetails(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateConfirmCustomizationDetailsResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAmazonMotors', function() {
        it('should call createAmazonMotors successfully', function(done) {
          // TODO: uncomment, update parameter values for createAmazonMotors call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.CreateAmazonMotorsRequest();
          body.attachments = [new SellingPartnerApiForMessaging.Attachment()];
          body.attachments[0].uploadDestinationId = "";
          body.attachments[0].fileName = "";

          instance.createAmazonMotors(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateAmazonMotorsResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createConfirmDeliveryDetails', function() {
        it('should call createConfirmDeliveryDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for createConfirmDeliveryDetails call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.CreateConfirmDeliveryDetailsRequest();
          body.text = "";

          instance.createConfirmDeliveryDetails(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateConfirmDeliveryDetailsResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createConfirmOrderDetails', function() {
        it('should call createConfirmOrderDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for createConfirmOrderDetails call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.CreateConfirmOrderDetailsRequest();
          body.text = "";

          instance.createConfirmOrderDetails(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateConfirmOrderDetailsResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createConfirmServiceDetails', function() {
        it('should call createConfirmServiceDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for createConfirmServiceDetails call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.CreateConfirmServiceDetailsRequest();
          body.text = "";

          instance.createConfirmServiceDetails(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateConfirmServiceDetailsResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDigitalAccessKey', function() {
        it('should call createDigitalAccessKey successfully', function(done) {
          // TODO: uncomment, update parameter values for createDigitalAccessKey call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.CreateDigitalAccessKeyRequest();
          body.text = "";
          body.attachments = [new SellingPartnerApiForMessaging.Attachment()];
          body.attachments[0].uploadDestinationId = "";
          body.attachments[0].fileName = "";

          instance.createDigitalAccessKey(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateDigitalAccessKeyResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createLegalDisclosure', function() {
        it('should call createLegalDisclosure successfully', function(done) {
          // TODO: uncomment, update parameter values for createLegalDisclosure call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.CreateLegalDisclosureRequest();
          body.attachments = [new SellingPartnerApiForMessaging.Attachment()];
          body.attachments[0].uploadDestinationId = "";
          body.attachments[0].fileName = "";

          instance.createLegalDisclosure(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateLegalDisclosureResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNegativeFeedbackRemoval', function() {
        it('should call createNegativeFeedbackRemoval successfully', function(done) {
          // TODO: uncomment, update parameter values for createNegativeFeedbackRemoval call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];

          instance.createNegativeFeedbackRemoval(amazonOrderId, marketplaceIds).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateNegativeFeedbackRemovalResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUnexpectedProblem', function() {
        it('should call createUnexpectedProblem successfully', function(done) {
          // TODO: uncomment, update parameter values for createUnexpectedProblem call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.CreateUnexpectedProblemRequest();
          body.text = "";

          instance.createUnexpectedProblem(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateUnexpectedProblemResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createWarranty', function() {
        it('should call createWarranty successfully', function(done) {
          // TODO: uncomment, update parameter values for createWarranty call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.CreateWarrantyRequest();
          body.attachments = [new SellingPartnerApiForMessaging.Attachment()];
          body.attachments[0].uploadDestinationId = "";
          body.attachments[0].fileName = "";
          body.coverageStartDate = new Date();
          body.coverageEndDate = new Date();

          instance.createWarranty(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.CreateWarrantyResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAttributes', function() {
        it('should call getAttributes successfully', function(done) {
          // TODO: uncomment, update parameter values for getAttributes call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];

          instance.getAttributes(amazonOrderId, marketplaceIds).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.GetAttributesResponse);
            expect(data.buyer).to.be.a(SellingPartnerApiForMessaging.GetAttributesResponseBuyer);
                  expect(data.buyer.locale).to.be.a('string');
              // expect(data.buyer.locale).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessagingActionsForOrder', function() {
        it('should call getMessagingActionsForOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessagingActionsForOrder call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];

          instance.getMessagingActionsForOrder(amazonOrderId, marketplaceIds).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.GetMessagingActionsForOrderResponse);
            expect(data.links).to.be.a(SellingPartnerApiForMessaging.GetMessagingActionsForOrderResponseLinks);
                  expect(data.links.self).to.be.a(SellingPartnerApiForMessaging.LinkObject);
                    expect(data.links.self.href).to.be.a('string');
                // expect(data.links.self.href).to.be("");
                expect(data.links.self.name).to.be.a('string');
                // expect(data.links.self.name).to.be("");
              {
                let dataCtr = data.links.actions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForMessaging.LinkObject);
                  expect(data.href).to.be.a('string');
                  // expect(data.href).to.be("");
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                }
              }
            expect(data.embedded).to.be.a(SellingPartnerApiForMessaging.GetMessagingActionsForOrderResponseEmbedded);
                  {
                let dataCtr = data.embedded.actions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForMessaging.GetMessagingActionResponse);
                  expect(data.links).to.be.a(SellingPartnerApiForMessaging.GetMessagingActionResponseLinks);
                        expect(data.links.self).to.be.a(SellingPartnerApiForMessaging.LinkObject);
                          expect(data.links.self.href).to.be.a('string');
                      // expect(data.links.self.href).to.be("");
                      expect(data.links.self.name).to.be.a('string');
                      // expect(data.links.self.name).to.be("");
                    expect(data.links.schema).to.be.a(SellingPartnerApiForMessaging.LinkObject);
                          expect(data.links.schema.href).to.be.a('string');
                      // expect(data.links.schema.href).to.be("");
                      expect(data.links.schema.name).to.be.a('string');
                      // expect(data.links.schema.name).to.be("");
                  expect(data.embedded).to.be.a(SellingPartnerApiForMessaging.GetMessagingActionResponseEmbedded);
                        expect(data.embedded.schema).to.be.a(SellingPartnerApiForMessaging.GetSchemaResponse);
                          expect(data.embedded.schema.links).to.be.a(SellingPartnerApiForMessaging.GetSchemaResponseLinks);
                            expect(data.embedded.schema.links.self).to.be.a(SellingPartnerApiForMessaging.LinkObject);
                              expect(data.embedded.schema.links.self.href).to.be.a('string');
                          // expect(data.embedded.schema.links.self.href).to.be("");
                          expect(data.embedded.schema.links.self.name).to.be.a('string');
                          // expect(data.embedded.schema.links.self.name).to.be("");
                      expect(data.embedded.schema.payload).to.be.a(SellingPartnerApiForMessaging.Schema);
                          expect(data.embedded.schema.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
              
                  expect(data.payload).to.be.a(SellingPartnerApiForMessaging.MessagingAction);
                        expect(data.payload.name).to.be.a('string');
                    // expect(data.payload.name).to.be("");
                  expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
          
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sendInvoice', function() {
        it('should call sendInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for sendInvoice call and complete the assertions
          /*
          var amazonOrderId = "amazonOrderId_example";
          var marketplaceIds = ["marketplaceIds_example"];
          var body = new SellingPartnerApiForMessaging.InvoiceRequest();
          body.attachments = [new SellingPartnerApiForMessaging.Attachment()];
          body.attachments[0].uploadDestinationId = "";
          body.attachments[0].fileName = "";

          instance.sendInvoice(amazonOrderId, marketplaceIds, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForMessaging.InvoiceResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForMessaging.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
