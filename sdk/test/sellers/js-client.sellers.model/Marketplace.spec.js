/*
 * Selling Partner API for Sellers
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/sellers/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/sellers/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForSellers);
  }
}(this, function(expect, SellingPartnerApiForSellers) {
  'use strict';

  var instance;

  describe('sellers', function() {
    describe('Marketplace', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForSellers.Marketplace();
      });

      it('should create an instance of Marketplace', function() {
        // TODO: update the code to test Marketplace
        expect(instance).to.be.a(SellingPartnerApiForSellers.Marketplace);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property countryCode (base name: "countryCode")', function() {
        // TODO: update the code to test the property countryCode
        expect(instance).to.have.property('countryCode');
        // expect(instance.countryCode).to.be(expectedValueLiteral);
      });

      it('should have the property defaultCurrencyCode (base name: "defaultCurrencyCode")', function() {
        // TODO: update the code to test the property defaultCurrencyCode
        expect(instance).to.have.property('defaultCurrencyCode');
        // expect(instance.defaultCurrencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property defaultLanguageCode (base name: "defaultLanguageCode")', function() {
        // TODO: update the code to test the property defaultLanguageCode
        expect(instance).to.have.property('defaultLanguageCode');
        // expect(instance.defaultLanguageCode).to.be(expectedValueLiteral);
      });

      it('should have the property domainName (base name: "domainName")', function() {
        // TODO: update the code to test the property domainName
        expect(instance).to.have.property('domainName');
        // expect(instance.domainName).to.be(expectedValueLiteral);
      });

    });
  });

}));
