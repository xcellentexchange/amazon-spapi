/*
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/shippingV2/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/shippingV2/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonShippingApi);
  }
}(this, function(expect, AmazonShippingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonShippingApi.ShippingApi();
  });

  describe('shippingV2', function() {
    describe('ShippingApi', function() {
      describe('cancelShipment', function() {
        it('should call cancelShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelShipment call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.cancelShipment(shipmentId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.CancelShipmentResponse);
            expect(data.payload).to.be.a(AmazonShippingApi.CancelShipmentResult);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('directPurchaseShipment', function() {
        it('should call directPurchaseShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for directPurchaseShipment call and complete the assertions
          /*
          var body = new AmazonShippingApi.DirectPurchaseRequest();
          body.shipTo = new AmazonShippingApi.Address();
          body.shipTo.name = "";
          body.shipTo.addressLine1 = "";
          body.shipTo.addressLine2 = "";
          body.shipTo.addressLine3 = "";
          body.shipTo.companyName = "";
          body.shipTo.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.shipTo.city = new AmazonShippingApi.City();
          body.shipTo.countryCode = new AmazonShippingApi.CountryCode();
          body.shipTo.postalCode = new AmazonShippingApi.PostalCode();
          body.shipTo.email = "";
          body.shipTo.phoneNumber = "";
          body.shipTo.geocode = new AmazonShippingApi.Geocode();
          body.shipTo.geocode.latitude = "";
          body.shipTo.geocode.longitude = "";
          body.shipFrom = new AmazonShippingApi.Address();
          body.shipFrom.name = "";
          body.shipFrom.addressLine1 = "";
          body.shipFrom.addressLine2 = "";
          body.shipFrom.addressLine3 = "";
          body.shipFrom.companyName = "";
          body.shipFrom.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.shipFrom.city = new AmazonShippingApi.City();
          body.shipFrom.countryCode = new AmazonShippingApi.CountryCode();
          body.shipFrom.postalCode = new AmazonShippingApi.PostalCode();
          body.shipFrom.email = "";
          body.shipFrom.phoneNumber = "";
          body.shipFrom.geocode = new AmazonShippingApi.Geocode();
          body.shipFrom.geocode.latitude = "";
          body.shipFrom.geocode.longitude = "";
          body.returnTo = new AmazonShippingApi.Address();
          body.returnTo.name = "";
          body.returnTo.addressLine1 = "";
          body.returnTo.addressLine2 = "";
          body.returnTo.addressLine3 = "";
          body.returnTo.companyName = "";
          body.returnTo.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.returnTo.city = new AmazonShippingApi.City();
          body.returnTo.countryCode = new AmazonShippingApi.CountryCode();
          body.returnTo.postalCode = new AmazonShippingApi.PostalCode();
          body.returnTo.email = "";
          body.returnTo.phoneNumber = "";
          body.returnTo.geocode = new AmazonShippingApi.Geocode();
          body.returnTo.geocode.latitude = "";
          body.returnTo.geocode.longitude = "";
          body.packages = new AmazonShippingApi.PackageList();
          body.channelDetails = new AmazonShippingApi.ChannelDetails();
          body.channelDetails.channelType = new AmazonShippingApi.ChannelType();
          body.channelDetails.amazonOrderDetails = new AmazonShippingApi.AmazonOrderDetails();
          body.channelDetails.amazonOrderDetails.orderId = "";
          body.channelDetails.amazonShipmentDetails = new AmazonShippingApi.AmazonShipmentDetails();
          body.channelDetails.amazonShipmentDetails.shipmentId = "";
          body.labelSpecifications = new AmazonShippingApi.RequestedDocumentSpecification();
          body.labelSpecifications.format = new AmazonShippingApi.DocumentFormat();
          body.labelSpecifications.size = new AmazonShippingApi.DocumentSize();
          body.labelSpecifications.size.width = ;
          body.labelSpecifications.size.length = ;
          body.labelSpecifications.size.unit = "INCH";
          body.labelSpecifications.dpi = new AmazonShippingApi.Dpi();
          body.labelSpecifications.pageLayout = new AmazonShippingApi.PageLayout();
          body.labelSpecifications.needFileJoining = new AmazonShippingApi.NeedFileJoining();
          body.labelSpecifications.requestedDocumentTypes = [new AmazonShippingApi.DocumentType()];
          var opts = {};
          opts.xAmznIdempotencyKey = "xAmznIdempotencyKey_example";
          opts.locale = "locale_example";
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.directPurchaseShipment(body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.DirectPurchaseResponse);
            expect(data.payload).to.be.a(AmazonShippingApi.DirectPurchaseResult);
                  expect(data.payload.shipmentId).to.be.a(AmazonShippingApi.ShipmentId);
                  expect(data.payload.packageDocumentDetailList).to.be.a(AmazonShippingApi.PackageDocumentDetailList);
      

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generateCollectionForm', function() {
        it('should call generateCollectionForm successfully', function(done) {
          // TODO: uncomment, update parameter values for generateCollectionForm call and complete the assertions
          /*
          var body = new AmazonShippingApi.GenerateCollectionFormRequest();
          body.clientReferenceDetails = new AmazonShippingApi.ClientReferenceDetails();
          body.carrierId = new AmazonShippingApi.CarrierId();
          body.shipFromAddress = new AmazonShippingApi.Address();
          body.shipFromAddress.name = "";
          body.shipFromAddress.addressLine1 = "";
          body.shipFromAddress.addressLine2 = "";
          body.shipFromAddress.addressLine3 = "";
          body.shipFromAddress.companyName = "";
          body.shipFromAddress.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.shipFromAddress.city = new AmazonShippingApi.City();
          body.shipFromAddress.countryCode = new AmazonShippingApi.CountryCode();
          body.shipFromAddress.postalCode = new AmazonShippingApi.PostalCode();
          body.shipFromAddress.email = "";
          body.shipFromAddress.phoneNumber = "";
          body.shipFromAddress.geocode = new AmazonShippingApi.Geocode();
          body.shipFromAddress.geocode.latitude = "";
          body.shipFromAddress.geocode.longitude = "";
          var opts = {};
          opts.xAmznIdempotencyKey = "xAmznIdempotencyKey_example";
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.generateCollectionForm(body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GenerateCollectionFormResponse);
            expect(data.collectionsFormDocument).to.be.a(AmazonShippingApi.CollectionsFormDocument);
                  expect(data.collectionsFormDocument.base64EncodedContent).to.be.a('string');
              // expect(data.collectionsFormDocument.base64EncodedContent).to.be("");
              expect(data.collectionsFormDocument.documentFormat).to.be.a('string');
              // expect(data.collectionsFormDocument.documentFormat).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAccessPoints', function() {
        it('should call getAccessPoints successfully', function(done) {
          // TODO: uncomment, update parameter values for getAccessPoints call and complete the assertions
          /*
          var accessPointTypes = ["HELIX"];
          var countryCode = "US";
          var postalCode = "EX332JL";
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getAccessPoints(accessPointTypes, countryCode, postalCode, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetAccessPointsResponse);
            expect(data.payload).to.be.a(AmazonShippingApi.GetAccessPointsResult);
                  expect(data.payload.accessPointsMap).to.be.a(AmazonShippingApi.AccessPointsMap);
      

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAdditionalInputs', function() {
        it('should call getAdditionalInputs successfully', function(done) {
          // TODO: uncomment, update parameter values for getAdditionalInputs call and complete the assertions
          /*
          var requestToken = "requestToken_example";
          var rateId = "rateId_example";
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getAdditionalInputs(requestToken, rateId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetAdditionalInputsResponse);
            expect(data.payload).to.be.a(AmazonShippingApi.GetAdditionalInputsResult);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCarrierAccountFormInputs', function() {
        it('should call getCarrierAccountFormInputs successfully', function(done) {
          // TODO: uncomment, update parameter values for getCarrierAccountFormInputs call and complete the assertions
          /*
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getCarrierAccountFormInputs(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetCarrierAccountFormInputsResponse);
            expect(data.linkableCarriersList).to.be.a(AmazonShippingApi.LinkableCarriersList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCarrierAccounts', function() {
        it('should call getCarrierAccounts successfully', function(done) {
          // TODO: uncomment, update parameter values for getCarrierAccounts call and complete the assertions
          /*
          var body = new AmazonShippingApi.GetCarrierAccountsRequest();
          body.clientReferenceDetails = new AmazonShippingApi.ClientReferenceDetails();
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getCarrierAccounts(body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetCarrierAccountsResponse);
            expect(data.activeAccounts).to.be.a(AmazonShippingApi.ActiveAccounts);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCollectionForm', function() {
        it('should call getCollectionForm successfully', function(done) {
          // TODO: uncomment, update parameter values for getCollectionForm call and complete the assertions
          /*
          var collectionFormId = "collectionFormId_example";
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getCollectionForm(collectionFormId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetCollectionFormResponse);
            expect(data.collectionsFormDocument).to.be.a(AmazonShippingApi.CollectionsFormDocument);
                  expect(data.collectionsFormDocument.base64EncodedContent).to.be.a('string');
              // expect(data.collectionsFormDocument.base64EncodedContent).to.be("");
              expect(data.collectionsFormDocument.documentFormat).to.be.a('string');
              // expect(data.collectionsFormDocument.documentFormat).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCollectionFormHistory', function() {
        it('should call getCollectionFormHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCollectionFormHistory call and complete the assertions
          /*
          var body = new AmazonShippingApi.GetCollectionFormHistoryRequest();
          body.clientReferenceDetails = new AmazonShippingApi.ClientReferenceDetails();
          body.maxResults = 0;
          body.carrierId = new AmazonShippingApi.CarrierId();
          body.shipFromAddress = new AmazonShippingApi.Address();
          body.shipFromAddress.name = "";
          body.shipFromAddress.addressLine1 = "";
          body.shipFromAddress.addressLine2 = "";
          body.shipFromAddress.addressLine3 = "";
          body.shipFromAddress.companyName = "";
          body.shipFromAddress.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.shipFromAddress.city = new AmazonShippingApi.City();
          body.shipFromAddress.countryCode = new AmazonShippingApi.CountryCode();
          body.shipFromAddress.postalCode = new AmazonShippingApi.PostalCode();
          body.shipFromAddress.email = "";
          body.shipFromAddress.phoneNumber = "";
          body.shipFromAddress.geocode = new AmazonShippingApi.Geocode();
          body.shipFromAddress.geocode.latitude = "";
          body.shipFromAddress.geocode.longitude = "";
          body.dateRange = new AmazonShippingApi.DateRange();
          body.dateRange.startDate = "";
          body.dateRange.endDate = "";
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getCollectionFormHistory(body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetCollectionFormHistoryResponse);
            expect(data.collectionFormsHistoryRecordList).to.be.a(AmazonShippingApi.CollectionFormsHistoryRecordList);
                expect(data.lastRefreshedDate).to.be.a('string');
            // expect(data.lastRefreshedDate).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRates', function() {
        it('should call getRates successfully', function(done) {
          // TODO: uncomment, update parameter values for getRates call and complete the assertions
          /*
          var body = new AmazonShippingApi.GetRatesRequest();
          body.shipTo = new AmazonShippingApi.Address();
          body.shipTo.name = "";
          body.shipTo.addressLine1 = "";
          body.shipTo.addressLine2 = "";
          body.shipTo.addressLine3 = "";
          body.shipTo.companyName = "";
          body.shipTo.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.shipTo.city = new AmazonShippingApi.City();
          body.shipTo.countryCode = new AmazonShippingApi.CountryCode();
          body.shipTo.postalCode = new AmazonShippingApi.PostalCode();
          body.shipTo.email = "";
          body.shipTo.phoneNumber = "";
          body.shipTo.geocode = new AmazonShippingApi.Geocode();
          body.shipTo.geocode.latitude = "";
          body.shipTo.geocode.longitude = "";
          body.shipFrom = new AmazonShippingApi.Address();
          body.shipFrom.name = "";
          body.shipFrom.addressLine1 = "";
          body.shipFrom.addressLine2 = "";
          body.shipFrom.addressLine3 = "";
          body.shipFrom.companyName = "";
          body.shipFrom.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.shipFrom.city = new AmazonShippingApi.City();
          body.shipFrom.countryCode = new AmazonShippingApi.CountryCode();
          body.shipFrom.postalCode = new AmazonShippingApi.PostalCode();
          body.shipFrom.email = "";
          body.shipFrom.phoneNumber = "";
          body.shipFrom.geocode = new AmazonShippingApi.Geocode();
          body.shipFrom.geocode.latitude = "";
          body.shipFrom.geocode.longitude = "";
          body.returnTo = new AmazonShippingApi.Address();
          body.returnTo.name = "";
          body.returnTo.addressLine1 = "";
          body.returnTo.addressLine2 = "";
          body.returnTo.addressLine3 = "";
          body.returnTo.companyName = "";
          body.returnTo.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.returnTo.city = new AmazonShippingApi.City();
          body.returnTo.countryCode = new AmazonShippingApi.CountryCode();
          body.returnTo.postalCode = new AmazonShippingApi.PostalCode();
          body.returnTo.email = "";
          body.returnTo.phoneNumber = "";
          body.returnTo.geocode = new AmazonShippingApi.Geocode();
          body.returnTo.geocode.latitude = "";
          body.returnTo.geocode.longitude = "";
          body.shipDate = new Date();
          body.shipperInstruction = new AmazonShippingApi.ShipperInstruction();
          body.shipperInstruction.deliveryNotes = "";
          body.packages = new AmazonShippingApi.PackageList();
          body.valueAddedServices = new AmazonShippingApi.ValueAddedServiceDetails();
          body.valueAddedServices.collectOnDelivery = new AmazonShippingApi.CollectOnDelivery();
          body.valueAddedServices.collectOnDelivery.amount = new AmazonShippingApi.Currency();
          body.valueAddedServices.collectOnDelivery.amount.value = ;
          body.valueAddedServices.collectOnDelivery.amount.unit = "";
          body.taxDetails = new AmazonShippingApi.TaxDetailList();
          body.channelDetails = new AmazonShippingApi.ChannelDetails();
          body.channelDetails.channelType = new AmazonShippingApi.ChannelType();
          body.channelDetails.amazonOrderDetails = new AmazonShippingApi.AmazonOrderDetails();
          body.channelDetails.amazonOrderDetails.orderId = "";
          body.channelDetails.amazonShipmentDetails = new AmazonShippingApi.AmazonShipmentDetails();
          body.channelDetails.amazonShipmentDetails.shipmentId = "";
          body.clientReferenceDetails = new AmazonShippingApi.ClientReferenceDetails();
          body.shipmentType = new AmazonShippingApi.ShipmentType();
          body.destinationAccessPointDetails = new AmazonShippingApi.AccessPointDetails();
          body.destinationAccessPointDetails.accessPointId = new AmazonShippingApi.AccessPointId();
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getRates(body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetRatesResponse);
            expect(data.payload).to.be.a(AmazonShippingApi.GetRatesResult);
                  expect(data.payload.requestToken).to.be.a(AmazonShippingApi.RequestToken);
                  expect(data.payload.rates).to.be.a(AmazonShippingApi.RateList);
                  expect(data.payload.ineligibleRates).to.be.a(AmazonShippingApi.IneligibleRateList);
      

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipmentDocuments', function() {
        it('should call getShipmentDocuments successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentDocuments call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var packageClientReferenceId = "packageClientReferenceId_example";
          var opts = {};
          opts.format = "format_example";
          opts.dpi = 8.14;
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getShipmentDocuments(shipmentId, packageClientReferenceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetShipmentDocumentsResponse);
            expect(data.payload).to.be.a(AmazonShippingApi.GetShipmentDocumentsResult);
                  expect(data.payload.shipmentId).to.be.a(AmazonShippingApi.ShipmentId);
                  expect(data.payload.packageDocumentDetail).to.be.a(AmazonShippingApi.PackageDocumentDetail);
                    expect(data.payload.packageDocumentDetail.packageClientReferenceId).to.be.a(AmazonShippingApi.PackageClientReferenceId);
                    expect(data.payload.packageDocumentDetail.packageDocuments).to.be.a(AmazonShippingApi.PackageDocumentList);
                    expect(data.payload.packageDocumentDetail.trackingId).to.be.a(AmazonShippingApi.TrackingId);
        

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTracking', function() {
        it('should call getTracking successfully', function(done) {
          // TODO: uncomment, update parameter values for getTracking call and complete the assertions
          /*
          var trackingId = "trackingId_example";
          var carrierId = "carrierId_example";
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getTracking(trackingId, carrierId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetTrackingResponse);
            expect(data.payload).to.be.a(AmazonShippingApi.GetTrackingResult);
                  expect(data.payload.trackingId).to.be.a(AmazonShippingApi.TrackingId);
                  expect(data.payload.alternateLegTrackingId).to.be.a(AmazonShippingApi.AlternateLegTrackingId);
                  {
                let dataCtr = data.payload.eventHistory;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(AmazonShippingApi.Event);
                  expect(data.eventCode).to.be.a(AmazonShippingApi.EventCode);
                      expect(data.location).to.be.a(AmazonShippingApi.Location);
                        expect(data.location.stateOrRegion).to.be.a(AmazonShippingApi.StateOrRegion);
                        expect(data.location.city).to.be.a(AmazonShippingApi.City);
                        expect(data.location.countryCode).to.be.a(AmazonShippingApi.CountryCode);
                        expect(data.location.postalCode).to.be.a(AmazonShippingApi.PostalCode);
            
                  expect(data.eventTime).to.be.a(Date);
                  // expect(data.eventTime).to.be(new Date());
                }
              }
              expect(data.payload.promisedDeliveryDate).to.be.a(Date);
              // expect(data.payload.promisedDeliveryDate).to.be(new Date());
              expect(data.payload.summary).to.be.a(AmazonShippingApi.TrackingSummary);
                    expect(data.payload.summary.status).to.be.a(AmazonShippingApi.Status);
        

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUnmanifestedShipments', function() {
        it('should call getUnmanifestedShipments successfully', function(done) {
          // TODO: uncomment, update parameter values for getUnmanifestedShipments call and complete the assertions
          /*
          var body = new AmazonShippingApi.GetUnmanifestedShipmentsRequest();
          body.clientReferenceDetails = new AmazonShippingApi.ClientReferenceDetails();
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.getUnmanifestedShipments(body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.GetUnmanifestedShipmentsResponse);
            expect(data.unmanifestedCarrierInformationList).to.be.a(AmazonShippingApi.UnmanifestedCarrierInformationList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('linkCarrierAccount', function() {
        it('should call linkCarrierAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for linkCarrierAccount call and complete the assertions
          /*
          var carrierId = "carrierId_example";
          var body = new AmazonShippingApi.LinkCarrierAccountRequest();
          body.clientReferenceDetails = new AmazonShippingApi.ClientReferenceDetails();
          body.carrierAccountType = new AmazonShippingApi.CarrierAccountType();
          body.carrierAccountAttributes = new AmazonShippingApi.CarrierAccountAttributes();
          body.encryptedCarrierAccountAttributes = new AmazonShippingApi.CarrierAccountAttributes();
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.linkCarrierAccount(carrierId, body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.LinkCarrierAccountResponse);
            expect(data.registrationStatus).to.be.a(AmazonShippingApi.AccountStatus);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('oneClickShipment', function() {
        it('should call oneClickShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for oneClickShipment call and complete the assertions
          /*
          var body = new AmazonShippingApi.OneClickShipmentRequest();
          body.shipTo = new AmazonShippingApi.Address();
          body.shipTo.name = "";
          body.shipTo.addressLine1 = "";
          body.shipTo.addressLine2 = "";
          body.shipTo.addressLine3 = "";
          body.shipTo.companyName = "";
          body.shipTo.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.shipTo.city = new AmazonShippingApi.City();
          body.shipTo.countryCode = new AmazonShippingApi.CountryCode();
          body.shipTo.postalCode = new AmazonShippingApi.PostalCode();
          body.shipTo.email = "";
          body.shipTo.phoneNumber = "";
          body.shipTo.geocode = new AmazonShippingApi.Geocode();
          body.shipTo.geocode.latitude = "";
          body.shipTo.geocode.longitude = "";
          body.shipFrom = new AmazonShippingApi.Address();
          body.shipFrom.name = "";
          body.shipFrom.addressLine1 = "";
          body.shipFrom.addressLine2 = "";
          body.shipFrom.addressLine3 = "";
          body.shipFrom.companyName = "";
          body.shipFrom.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.shipFrom.city = new AmazonShippingApi.City();
          body.shipFrom.countryCode = new AmazonShippingApi.CountryCode();
          body.shipFrom.postalCode = new AmazonShippingApi.PostalCode();
          body.shipFrom.email = "";
          body.shipFrom.phoneNumber = "";
          body.shipFrom.geocode = new AmazonShippingApi.Geocode();
          body.shipFrom.geocode.latitude = "";
          body.shipFrom.geocode.longitude = "";
          body.returnTo = new AmazonShippingApi.Address();
          body.returnTo.name = "";
          body.returnTo.addressLine1 = "";
          body.returnTo.addressLine2 = "";
          body.returnTo.addressLine3 = "";
          body.returnTo.companyName = "";
          body.returnTo.stateOrRegion = new AmazonShippingApi.StateOrRegion();
          body.returnTo.city = new AmazonShippingApi.City();
          body.returnTo.countryCode = new AmazonShippingApi.CountryCode();
          body.returnTo.postalCode = new AmazonShippingApi.PostalCode();
          body.returnTo.email = "";
          body.returnTo.phoneNumber = "";
          body.returnTo.geocode = new AmazonShippingApi.Geocode();
          body.returnTo.geocode.latitude = "";
          body.returnTo.geocode.longitude = "";
          body.shipDate = new Date();
          body.packages = new AmazonShippingApi.PackageList();
          body.valueAddedServicesDetails = new AmazonShippingApi.OneClickShipmentValueAddedServiceDetails();
          body.taxDetails = new AmazonShippingApi.TaxDetailList();
          body.channelDetails = new AmazonShippingApi.ChannelDetails();
          body.channelDetails.channelType = new AmazonShippingApi.ChannelType();
          body.channelDetails.amazonOrderDetails = new AmazonShippingApi.AmazonOrderDetails();
          body.channelDetails.amazonOrderDetails.orderId = "";
          body.channelDetails.amazonShipmentDetails = new AmazonShippingApi.AmazonShipmentDetails();
          body.channelDetails.amazonShipmentDetails.shipmentId = "";
          body.labelSpecifications = new AmazonShippingApi.RequestedDocumentSpecification();
          body.labelSpecifications.format = new AmazonShippingApi.DocumentFormat();
          body.labelSpecifications.size = new AmazonShippingApi.DocumentSize();
          body.labelSpecifications.size.width = ;
          body.labelSpecifications.size.length = ;
          body.labelSpecifications.size.unit = "INCH";
          body.labelSpecifications.dpi = new AmazonShippingApi.Dpi();
          body.labelSpecifications.pageLayout = new AmazonShippingApi.PageLayout();
          body.labelSpecifications.needFileJoining = new AmazonShippingApi.NeedFileJoining();
          body.labelSpecifications.requestedDocumentTypes = [new AmazonShippingApi.DocumentType()];
          body.serviceSelection = new AmazonShippingApi.ServiceSelection();
          body.serviceSelection.serviceId = new AmazonShippingApi.ServiceIds();
          body.shipperInstruction = new AmazonShippingApi.ShipperInstruction();
          body.shipperInstruction.deliveryNotes = "";
          body.destinationAccessPointDetails = new AmazonShippingApi.AccessPointDetails();
          body.destinationAccessPointDetails.accessPointId = new AmazonShippingApi.AccessPointId();
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.oneClickShipment(body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.OneClickShipmentResponse);
            expect(data.payload).to.be.a(AmazonShippingApi.OneClickShipmentResult);
                  expect(data.payload.shipmentId).to.be.a(AmazonShippingApi.ShipmentId);
                  expect(data.payload.packageDocumentDetails).to.be.a(AmazonShippingApi.PackageDocumentDetailList);
                  expect(data.payload.promise).to.be.a(AmazonShippingApi.Promise);
                    expect(data.payload.promise.deliveryWindow).to.be.a(AmazonShippingApi.TimeWindow);
                      expect(data.payload.promise.deliveryWindow.start).to.be.a(Date);
                  // expect(data.payload.promise.deliveryWindow.start).to.be(new Date());
                  expect(data.payload.promise.deliveryWindow.end).to.be.a(Date);
                  // expect(data.payload.promise.deliveryWindow.end).to.be(new Date());
                expect(data.payload.promise.pickupWindow).to.be.a(AmazonShippingApi.TimeWindow);
                      expect(data.payload.promise.pickupWindow.start).to.be.a(Date);
                  // expect(data.payload.promise.pickupWindow.start).to.be(new Date());
                  expect(data.payload.promise.pickupWindow.end).to.be.a(Date);
                  // expect(data.payload.promise.pickupWindow.end).to.be(new Date());
              expect(data.payload.carrier).to.be.a(AmazonShippingApi.Carrier);
                    expect(data.payload.carrier.id).to.be.a(AmazonShippingApi.CarrierId);
                    expect(data.payload.carrier.name).to.be.a(AmazonShippingApi.CarrierName);
        
              expect(data.payload.service).to.be.a(AmazonShippingApi.Service);
                    expect(data.payload.service.id).to.be.a(AmazonShippingApi.ServiceId);
                    expect(data.payload.service.name).to.be.a(AmazonShippingApi.ServiceName);
        
              expect(data.payload.totalCharge).to.be.a(AmazonShippingApi.Currency);
                    expect(data.payload.totalCharge.value).to.be.a('number');
                // expect(data.payload.totalCharge.value).to.be();
                expect(data.payload.totalCharge.unit).to.be.a('string');
                // expect(data.payload.totalCharge.unit).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseShipment', function() {
        it('should call purchaseShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseShipment call and complete the assertions
          /*
          var body = new AmazonShippingApi.PurchaseShipmentRequest();
          body.requestToken = new AmazonShippingApi.RequestToken();
          body.rateId = new AmazonShippingApi.RateId();
          body.requestedDocumentSpecification = new AmazonShippingApi.RequestedDocumentSpecification();
          body.requestedDocumentSpecification.format = new AmazonShippingApi.DocumentFormat();
          body.requestedDocumentSpecification.size = new AmazonShippingApi.DocumentSize();
          body.requestedDocumentSpecification.size.width = ;
          body.requestedDocumentSpecification.size.length = ;
          body.requestedDocumentSpecification.size.unit = "INCH";
          body.requestedDocumentSpecification.dpi = new AmazonShippingApi.Dpi();
          body.requestedDocumentSpecification.pageLayout = new AmazonShippingApi.PageLayout();
          body.requestedDocumentSpecification.needFileJoining = new AmazonShippingApi.NeedFileJoining();
          body.requestedDocumentSpecification.requestedDocumentTypes = [new AmazonShippingApi.DocumentType()];
          body.requestedValueAddedServices = new AmazonShippingApi.RequestedValueAddedServiceList();
          body.additionalInputs = {key: };
          var opts = {};
          opts.xAmznIdempotencyKey = "xAmznIdempotencyKey_example";
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.purchaseShipment(body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.PurchaseShipmentResponse);
            expect(data.payload).to.be.a(AmazonShippingApi.PurchaseShipmentResult);
                  expect(data.payload.shipmentId).to.be.a(AmazonShippingApi.ShipmentId);
                  expect(data.payload.packageDocumentDetails).to.be.a(AmazonShippingApi.PackageDocumentDetailList);
                  expect(data.payload.promise).to.be.a(AmazonShippingApi.Promise);
                    expect(data.payload.promise.deliveryWindow).to.be.a(AmazonShippingApi.TimeWindow);
                      expect(data.payload.promise.deliveryWindow.start).to.be.a(Date);
                  // expect(data.payload.promise.deliveryWindow.start).to.be(new Date());
                  expect(data.payload.promise.deliveryWindow.end).to.be.a(Date);
                  // expect(data.payload.promise.deliveryWindow.end).to.be(new Date());
                expect(data.payload.promise.pickupWindow).to.be.a(AmazonShippingApi.TimeWindow);
                      expect(data.payload.promise.pickupWindow.start).to.be.a(Date);
                  // expect(data.payload.promise.pickupWindow.start).to.be(new Date());
                  expect(data.payload.promise.pickupWindow.end).to.be.a(Date);
                  // expect(data.payload.promise.pickupWindow.end).to.be(new Date());

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unlinkCarrierAccount', function() {
        it('should call unlinkCarrierAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for unlinkCarrierAccount call and complete the assertions
          /*
          var carrierId = "carrierId_example";
          var body = new AmazonShippingApi.UnlinkCarrierAccountRequest();
          body.clientReferenceDetails = new AmazonShippingApi.ClientReferenceDetails();
          var opts = {};
          opts.xAmznShippingBusinessId = "xAmznShippingBusinessId_example";

          instance.unlinkCarrierAccount(carrierId, body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(AmazonShippingApi.UnlinkCarrierAccountResponse);
            expect(data.isUnlinked).to.be.a('boolean');
            // expect(data.isUnlinked).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
