/*
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorShipments/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorShipments/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementShipments);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementShipments) {
  'use strict';

  var instance;

  describe('vendorShipments', function() {
    describe('Shipment', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      });

      it('should create an instance of Shipment', function() {
        // TODO: update the code to test Shipment
        expect(instance).to.be.a(SellingPartnerApiForRetailProcurementShipments.Shipment);
      });

      it('should have the property vendorShipmentIdentifier (base name: "vendorShipmentIdentifier")', function() {
        // TODO: update the code to test the property vendorShipmentIdentifier
        expect(instance).to.have.property('vendorShipmentIdentifier');
        // expect(instance.vendorShipmentIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property transactionType (base name: "transactionType")', function() {
        // TODO: update the code to test the property transactionType
        expect(instance).to.have.property('transactionType');
        // expect(instance.transactionType).to.be(expectedValueLiteral);
      });

      it('should have the property buyerReferenceNumber (base name: "buyerReferenceNumber")', function() {
        // TODO: update the code to test the property buyerReferenceNumber
        expect(instance).to.have.property('buyerReferenceNumber');
        // expect(instance.buyerReferenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property transactionDate (base name: "transactionDate")', function() {
        // TODO: update the code to test the property transactionDate
        expect(instance).to.have.property('transactionDate');
        // expect(instance.transactionDate).to.be(expectedValueLiteral);
      });

      it('should have the property currentShipmentStatus (base name: "currentShipmentStatus")', function() {
        // TODO: update the code to test the property currentShipmentStatus
        expect(instance).to.have.property('currentShipmentStatus');
        // expect(instance.currentShipmentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property currentshipmentStatusDate (base name: "currentshipmentStatusDate")', function() {
        // TODO: update the code to test the property currentshipmentStatusDate
        expect(instance).to.have.property('currentshipmentStatusDate');
        // expect(instance.currentshipmentStatusDate).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentStatusDetails (base name: "shipmentStatusDetails")', function() {
        // TODO: update the code to test the property shipmentStatusDetails
        expect(instance).to.have.property('shipmentStatusDetails');
        // expect(instance.shipmentStatusDetails).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentCreateDate (base name: "shipmentCreateDate")', function() {
        // TODO: update the code to test the property shipmentCreateDate
        expect(instance).to.have.property('shipmentCreateDate');
        // expect(instance.shipmentCreateDate).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentConfirmDate (base name: "shipmentConfirmDate")', function() {
        // TODO: update the code to test the property shipmentConfirmDate
        expect(instance).to.have.property('shipmentConfirmDate');
        // expect(instance.shipmentConfirmDate).to.be(expectedValueLiteral);
      });

      it('should have the property packageLabelCreateDate (base name: "packageLabelCreateDate")', function() {
        // TODO: update the code to test the property packageLabelCreateDate
        expect(instance).to.have.property('packageLabelCreateDate');
        // expect(instance.packageLabelCreateDate).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentFreightTerm (base name: "shipmentFreightTerm")', function() {
        // TODO: update the code to test the property shipmentFreightTerm
        expect(instance).to.have.property('shipmentFreightTerm');
        // expect(instance.shipmentFreightTerm).to.be(expectedValueLiteral);
      });

      it('should have the property sellingParty (base name: "sellingParty")', function() {
        // TODO: update the code to test the property sellingParty
        expect(instance).to.have.property('sellingParty');
        // expect(instance.sellingParty).to.be(expectedValueLiteral);
      });

      it('should have the property shipFromParty (base name: "shipFromParty")', function() {
        // TODO: update the code to test the property shipFromParty
        expect(instance).to.have.property('shipFromParty');
        // expect(instance.shipFromParty).to.be(expectedValueLiteral);
      });

      it('should have the property shipToParty (base name: "shipToParty")', function() {
        // TODO: update the code to test the property shipToParty
        expect(instance).to.have.property('shipToParty');
        // expect(instance.shipToParty).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentMeasurements (base name: "shipmentMeasurements")', function() {
        // TODO: update the code to test the property shipmentMeasurements
        expect(instance).to.have.property('shipmentMeasurements');
        // expect(instance.shipmentMeasurements).to.be(expectedValueLiteral);
      });

      it('should have the property collectFreightPickupDetails (base name: "collectFreightPickupDetails")', function() {
        // TODO: update the code to test the property collectFreightPickupDetails
        expect(instance).to.have.property('collectFreightPickupDetails');
        // expect(instance.collectFreightPickupDetails).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseOrders (base name: "purchaseOrders")', function() {
        // TODO: update the code to test the property purchaseOrders
        expect(instance).to.have.property('purchaseOrders');
        // expect(instance.purchaseOrders).to.be(expectedValueLiteral);
      });

      it('should have the property importDetails (base name: "importDetails")', function() {
        // TODO: update the code to test the property importDetails
        expect(instance).to.have.property('importDetails');
        // expect(instance.importDetails).to.be(expectedValueLiteral);
      });

      it('should have the property containers (base name: "containers")', function() {
        // TODO: update the code to test the property containers
        expect(instance).to.have.property('containers');
        // expect(instance.containers).to.be(expectedValueLiteral);
      });

      it('should have the property transportationDetails (base name: "transportationDetails")', function() {
        // TODO: update the code to test the property transportationDetails
        expect(instance).to.have.property('transportationDetails');
        // expect(instance.transportationDetails).to.be(expectedValueLiteral);
      });

    });
  });

}));
