/*
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorShipments/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorShipments/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementShipments);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementShipments) {
  'use strict';

  var instance;

  describe('vendorShipments', function() {
    describe('Pallet', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForRetailProcurementShipments.Pallet();
      });

      it('should create an instance of Pallet', function() {
        // TODO: update the code to test Pallet
        expect(instance).to.be.a(SellingPartnerApiForRetailProcurementShipments.Pallet);
      });

      it('should have the property palletIdentifiers (base name: "palletIdentifiers")', function() {
        // TODO: update the code to test the property palletIdentifiers
        expect(instance).to.have.property('palletIdentifiers');
        // expect(instance.palletIdentifiers).to.be(expectedValueLiteral);
      });

      it('should have the property tier (base name: "tier")', function() {
        // TODO: update the code to test the property tier
        expect(instance).to.have.property('tier');
        // expect(instance.tier).to.be(expectedValueLiteral);
      });

      it('should have the property block (base name: "block")', function() {
        // TODO: update the code to test the property block
        expect(instance).to.have.property('block');
        // expect(instance.block).to.be(expectedValueLiteral);
      });

      it('should have the property dimensions (base name: "dimensions")', function() {
        // TODO: update the code to test the property dimensions
        expect(instance).to.have.property('dimensions');
        // expect(instance.dimensions).to.be(expectedValueLiteral);
      });

      it('should have the property weight (base name: "weight")', function() {
        // TODO: update the code to test the property weight
        expect(instance).to.have.property('weight');
        // expect(instance.weight).to.be(expectedValueLiteral);
      });

      it('should have the property cartonReferenceDetails (base name: "cartonReferenceDetails")', function() {
        // TODO: update the code to test the property cartonReferenceDetails
        expect(instance).to.have.property('cartonReferenceDetails');
        // expect(instance.cartonReferenceDetails).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        // TODO: update the code to test the property items
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

    });
  });

}));
