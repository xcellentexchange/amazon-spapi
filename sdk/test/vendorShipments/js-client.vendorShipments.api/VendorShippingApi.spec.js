/*
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/vendorShipments/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/vendorShipments/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementShipments);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementShipments) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForRetailProcurementShipments.VendorShippingApi();
  });

  describe('vendorShipments', function() {
    describe('VendorShippingApi', function() {
      describe('getShipmentDetails', function() {
        it('should call getShipmentDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentDetails call and complete the assertions
          /*
          var opts = {};
          opts.limit = 789;
          opts.sortOrder = "sortOrder_example";
          opts.nextToken = "nextToken_example";
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.shipmentConfirmedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.shipmentConfirmedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.packageLabelCreatedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.packageLabelCreatedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.shippedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.shippedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.estimatedDeliveryBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.estimatedDeliveryAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.shipmentDeliveryBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.shipmentDeliveryAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.requestedPickUpBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.requestedPickUpAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.scheduledPickUpBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.scheduledPickUpAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.currentShipmentStatus = "currentShipmentStatus_example";
          opts.vendorShipmentIdentifier = "vendorShipmentIdentifier_example";
          opts.buyerReferenceNumber = "buyerReferenceNumber_example";
          opts.buyerWarehouseCode = "buyerWarehouseCode_example";
          opts.sellerWarehouseCode = "sellerWarehouseCode_example";

          instance.getShipmentDetails(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.GetShipmentDetailsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForRetailProcurementShipments.ShipmentDetails);
                  expect(data.payload.pagination).to.be.a(SellingPartnerApiForRetailProcurementShipments.Pagination);
                    expect(data.payload.pagination.nextToken).to.be.a('string');
                // expect(data.payload.pagination.nextToken).to.be("");
              {
                let dataCtr = data.payload.shipments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.Shipment);
                  expect(data.vendorShipmentIdentifier).to.be.a('string');
                  // expect(data.vendorShipmentIdentifier).to.be("");
                  expect(data.transactionType).to.be.a('string');
                  // expect(data.transactionType).to.be("New");
                  expect(data.buyerReferenceNumber).to.be.a('string');
                  // expect(data.buyerReferenceNumber).to.be("");
                  expect(data.transactionDate).to.be.a(Date);
                  // expect(data.transactionDate).to.be(new Date());
                  expect(data.currentShipmentStatus).to.be.a('string');
                  // expect(data.currentShipmentStatus).to.be("Created");
                  expect(data.currentshipmentStatusDate).to.be.a(Date);
                  // expect(data.currentshipmentStatusDate).to.be(new Date());
                  {
                    let dataCtr = data.shipmentStatusDetails;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.ShipmentStatusDetails);
                      expect(data.shipmentStatus).to.be.a('string');
                      // expect(data.shipmentStatus).to.be("Created");
                      expect(data.shipmentStatusDate).to.be.a(Date);
                      // expect(data.shipmentStatusDate).to.be(new Date());
                    }
                  }
                  expect(data.shipmentCreateDate).to.be.a(Date);
                  // expect(data.shipmentCreateDate).to.be(new Date());
                  expect(data.shipmentConfirmDate).to.be.a(Date);
                  // expect(data.shipmentConfirmDate).to.be(new Date());
                  expect(data.packageLabelCreateDate).to.be.a(Date);
                  // expect(data.packageLabelCreateDate).to.be(new Date());
                  expect(data.shipmentFreightTerm).to.be.a('string');
                  // expect(data.shipmentFreightTerm).to.be("Collect");
                  expect(data.sellingParty).to.be.a(SellingPartnerApiForRetailProcurementShipments.PartyIdentification);
                        expect(data.sellingParty.address).to.be.a(SellingPartnerApiForRetailProcurementShipments.Address);
                          expect(data.sellingParty.address.name).to.be.a('string');
                      // expect(data.sellingParty.address.name).to.be("");
                      expect(data.sellingParty.address.addressLine1).to.be.a('string');
                      // expect(data.sellingParty.address.addressLine1).to.be("");
                      expect(data.sellingParty.address.addressLine2).to.be.a('string');
                      // expect(data.sellingParty.address.addressLine2).to.be("");
                      expect(data.sellingParty.address.addressLine3).to.be.a('string');
                      // expect(data.sellingParty.address.addressLine3).to.be("");
                      expect(data.sellingParty.address.city).to.be.a('string');
                      // expect(data.sellingParty.address.city).to.be("");
                      expect(data.sellingParty.address.county).to.be.a('string');
                      // expect(data.sellingParty.address.county).to.be("");
                      expect(data.sellingParty.address.district).to.be.a('string');
                      // expect(data.sellingParty.address.district).to.be("");
                      expect(data.sellingParty.address.stateOrRegion).to.be.a('string');
                      // expect(data.sellingParty.address.stateOrRegion).to.be("");
                      expect(data.sellingParty.address.postalCode).to.be.a('string');
                      // expect(data.sellingParty.address.postalCode).to.be("");
                      expect(data.sellingParty.address.countryCode).to.be.a('string');
                      // expect(data.sellingParty.address.countryCode).to.be("");
                      expect(data.sellingParty.address.phone).to.be.a('string');
                      // expect(data.sellingParty.address.phone).to.be("");
                    expect(data.sellingParty.partyId).to.be.a('string');
                    // expect(data.sellingParty.partyId).to.be("");
                    {
                      let dataCtr = data.sellingParty.taxRegistrationDetails;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.TaxRegistrationDetails);
                        expect(data.taxRegistrationType).to.be.a('string');
                        // expect(data.taxRegistrationType).to.be("VAT");
                        expect(data.taxRegistrationNumber).to.be.a('string');
                        // expect(data.taxRegistrationNumber).to.be("");
                      }
                    }
                  expect(data.shipFromParty).to.be.a(SellingPartnerApiForRetailProcurementShipments.PartyIdentification);
                        expect(data.shipFromParty.address).to.be.a(SellingPartnerApiForRetailProcurementShipments.Address);
                          expect(data.shipFromParty.address.name).to.be.a('string');
                      // expect(data.shipFromParty.address.name).to.be("");
                      expect(data.shipFromParty.address.addressLine1).to.be.a('string');
                      // expect(data.shipFromParty.address.addressLine1).to.be("");
                      expect(data.shipFromParty.address.addressLine2).to.be.a('string');
                      // expect(data.shipFromParty.address.addressLine2).to.be("");
                      expect(data.shipFromParty.address.addressLine3).to.be.a('string');
                      // expect(data.shipFromParty.address.addressLine3).to.be("");
                      expect(data.shipFromParty.address.city).to.be.a('string');
                      // expect(data.shipFromParty.address.city).to.be("");
                      expect(data.shipFromParty.address.county).to.be.a('string');
                      // expect(data.shipFromParty.address.county).to.be("");
                      expect(data.shipFromParty.address.district).to.be.a('string');
                      // expect(data.shipFromParty.address.district).to.be("");
                      expect(data.shipFromParty.address.stateOrRegion).to.be.a('string');
                      // expect(data.shipFromParty.address.stateOrRegion).to.be("");
                      expect(data.shipFromParty.address.postalCode).to.be.a('string');
                      // expect(data.shipFromParty.address.postalCode).to.be("");
                      expect(data.shipFromParty.address.countryCode).to.be.a('string');
                      // expect(data.shipFromParty.address.countryCode).to.be("");
                      expect(data.shipFromParty.address.phone).to.be.a('string');
                      // expect(data.shipFromParty.address.phone).to.be("");
                    expect(data.shipFromParty.partyId).to.be.a('string');
                    // expect(data.shipFromParty.partyId).to.be("");
                    {
                      let dataCtr = data.shipFromParty.taxRegistrationDetails;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.TaxRegistrationDetails);
                        expect(data.taxRegistrationType).to.be.a('string');
                        // expect(data.taxRegistrationType).to.be("VAT");
                        expect(data.taxRegistrationNumber).to.be.a('string');
                        // expect(data.taxRegistrationNumber).to.be("");
                      }
                    }
                  expect(data.shipToParty).to.be.a(SellingPartnerApiForRetailProcurementShipments.PartyIdentification);
                        expect(data.shipToParty.address).to.be.a(SellingPartnerApiForRetailProcurementShipments.Address);
                          expect(data.shipToParty.address.name).to.be.a('string');
                      // expect(data.shipToParty.address.name).to.be("");
                      expect(data.shipToParty.address.addressLine1).to.be.a('string');
                      // expect(data.shipToParty.address.addressLine1).to.be("");
                      expect(data.shipToParty.address.addressLine2).to.be.a('string');
                      // expect(data.shipToParty.address.addressLine2).to.be("");
                      expect(data.shipToParty.address.addressLine3).to.be.a('string');
                      // expect(data.shipToParty.address.addressLine3).to.be("");
                      expect(data.shipToParty.address.city).to.be.a('string');
                      // expect(data.shipToParty.address.city).to.be("");
                      expect(data.shipToParty.address.county).to.be.a('string');
                      // expect(data.shipToParty.address.county).to.be("");
                      expect(data.shipToParty.address.district).to.be.a('string');
                      // expect(data.shipToParty.address.district).to.be("");
                      expect(data.shipToParty.address.stateOrRegion).to.be.a('string');
                      // expect(data.shipToParty.address.stateOrRegion).to.be("");
                      expect(data.shipToParty.address.postalCode).to.be.a('string');
                      // expect(data.shipToParty.address.postalCode).to.be("");
                      expect(data.shipToParty.address.countryCode).to.be.a('string');
                      // expect(data.shipToParty.address.countryCode).to.be("");
                      expect(data.shipToParty.address.phone).to.be.a('string');
                      // expect(data.shipToParty.address.phone).to.be("");
                    expect(data.shipToParty.partyId).to.be.a('string');
                    // expect(data.shipToParty.partyId).to.be("");
                    {
                      let dataCtr = data.shipToParty.taxRegistrationDetails;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.TaxRegistrationDetails);
                        expect(data.taxRegistrationType).to.be.a('string');
                        // expect(data.taxRegistrationType).to.be("VAT");
                        expect(data.taxRegistrationNumber).to.be.a('string');
                        // expect(data.taxRegistrationNumber).to.be("");
                      }
                    }
                  expect(data.shipmentMeasurements).to.be.a(SellingPartnerApiForRetailProcurementShipments.TransportShipmentMeasurements);
                        expect(data.shipmentMeasurements.totalCartonCount).to.be.a('number');
                    // expect(data.shipmentMeasurements.totalCartonCount).to.be(0);
                    expect(data.shipmentMeasurements.totalPalletStackable).to.be.a('number');
                    // expect(data.shipmentMeasurements.totalPalletStackable).to.be(0);
                    expect(data.shipmentMeasurements.totalPalletNonStackable).to.be.a('number');
                    // expect(data.shipmentMeasurements.totalPalletNonStackable).to.be(0);
                    expect(data.shipmentMeasurements.shipmentWeight).to.be.a(SellingPartnerApiForRetailProcurementShipments.Weight);
                          expect(data.shipmentMeasurements.shipmentWeight.unitOfMeasure).to.be.a('string');
                      // expect(data.shipmentMeasurements.shipmentWeight.unitOfMeasure).to.be("G");
                      expect(data.shipmentMeasurements.shipmentWeight.value).to.be.a(SellingPartnerApiForRetailProcurementShipments.Decimal);
              
                    expect(data.shipmentMeasurements.shipmentVolume).to.be.a(SellingPartnerApiForRetailProcurementShipments.Volume);
                          expect(data.shipmentMeasurements.shipmentVolume.unitOfMeasure).to.be.a('string');
                      // expect(data.shipmentMeasurements.shipmentVolume.unitOfMeasure).to.be("CuFt");
                      expect(data.shipmentMeasurements.shipmentVolume.value).to.be.a(SellingPartnerApiForRetailProcurementShipments.Decimal);
              
                  expect(data.collectFreightPickupDetails).to.be.a(SellingPartnerApiForRetailProcurementShipments.CollectFreightPickupDetails);
                        expect(data.collectFreightPickupDetails.requestedPickUp).to.be.a(Date);
                    // expect(data.collectFreightPickupDetails.requestedPickUp).to.be(new Date());
                    expect(data.collectFreightPickupDetails.scheduledPickUp).to.be.a(Date);
                    // expect(data.collectFreightPickupDetails.scheduledPickUp).to.be(new Date());
                    expect(data.collectFreightPickupDetails.carrierAssignmentDate).to.be.a(Date);
                    // expect(data.collectFreightPickupDetails.carrierAssignmentDate).to.be(new Date());
                  {
                    let dataCtr = data.purchaseOrders;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.PurchaseOrders);
                      expect(data.purchaseOrderNumber).to.be.a('string');
                      // expect(data.purchaseOrderNumber).to.be("");
                      expect(data.purchaseOrderDate).to.be.a(Date);
                      // expect(data.purchaseOrderDate).to.be(new Date());
                      expect(data.shipWindow).to.be.a('string');
                      // expect(data.shipWindow).to.be("");
                      {
                        let dataCtr = data.items;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.PurchaseOrderItems);
                          expect(data.itemSequenceNumber).to.be.a('string');
                          // expect(data.itemSequenceNumber).to.be("");
                          expect(data.buyerProductIdentifier).to.be.a('string');
                          // expect(data.buyerProductIdentifier).to.be("");
                          expect(data.vendorProductIdentifier).to.be.a('string');
                          // expect(data.vendorProductIdentifier).to.be("");
                          expect(data.shippedQuantity).to.be.a(SellingPartnerApiForRetailProcurementShipments.ItemQuantity);
                                expect(data.shippedQuantity.amount).to.be.a('number');
                            // expect(data.shippedQuantity.amount).to.be(0);
                            expect(data.shippedQuantity.unitOfMeasure).to.be.a('string');
                            // expect(data.shippedQuantity.unitOfMeasure).to.be("Cases");
                            expect(data.shippedQuantity.unitSize).to.be.a('number');
                            // expect(data.shippedQuantity.unitSize).to.be(0);
                          expect(data.maximumRetailPrice).to.be.a(SellingPartnerApiForRetailProcurementShipments.Money);
                                expect(data.maximumRetailPrice.currencyCode).to.be.a('string');
                            // expect(data.maximumRetailPrice.currencyCode).to.be("");
                            expect(data.maximumRetailPrice.amount).to.be.a(SellingPartnerApiForRetailProcurementShipments.Decimal);
                    
                        }
                      }
                    }
                  }
                  expect(data.importDetails).to.be.a(SellingPartnerApiForRetailProcurementShipments.ImportDetails);
                        expect(data.importDetails.methodOfPayment).to.be.a('string');
                    // expect(data.importDetails.methodOfPayment).to.be("PaidByBuyer");
                    expect(data.importDetails.sealNumber).to.be.a('string');
                    // expect(data.importDetails.sealNumber).to.be("");
                    expect(data.importDetails.route).to.be.a(SellingPartnerApiForRetailProcurementShipments.Route);
                          {
                        let dataCtr = data.importDetails.route.stops;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.Stop);
                          expect(data.functionCode).to.be.a('string');
                          // expect(data.functionCode).to.be("PortOfDischarge");
                          expect(data.locationIdentification).to.be.a(SellingPartnerApiForRetailProcurementShipments.Location);
                                expect(data.locationIdentification.type).to.be.a('string');
                            // expect(data.locationIdentification.type).to.be("");
                            expect(data.locationIdentification.locationCode).to.be.a('string');
                            // expect(data.locationIdentification.locationCode).to.be("");
                            expect(data.locationIdentification.countryCode).to.be.a('string');
                            // expect(data.locationIdentification.countryCode).to.be("");
                          expect(data.arrivalTime).to.be.a(Date);
                          // expect(data.arrivalTime).to.be(new Date());
                          expect(data.departureTime).to.be.a(Date);
                          // expect(data.departureTime).to.be(new Date());
                        }
                      }
                    expect(data.importDetails.importContainers).to.be.a('string');
                    // expect(data.importDetails.importContainers).to.be("");
                    expect(data.importDetails.billableWeight).to.be.a(SellingPartnerApiForRetailProcurementShipments.Weight);
                          expect(data.importDetails.billableWeight.unitOfMeasure).to.be.a('string');
                      // expect(data.importDetails.billableWeight.unitOfMeasure).to.be("G");
                      expect(data.importDetails.billableWeight.value).to.be.a(SellingPartnerApiForRetailProcurementShipments.Decimal);
              
                    expect(data.importDetails.estimatedShipByDate).to.be.a(Date);
                    // expect(data.importDetails.estimatedShipByDate).to.be(new Date());
                    expect(data.importDetails.handlingInstructions).to.be.a('string');
                    // expect(data.importDetails.handlingInstructions).to.be("Oversized");
                  {
                    let dataCtr = data.containers;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.Containers);
                      expect(data.containerType).to.be.a('string');
                      // expect(data.containerType).to.be("carton");
                      expect(data.containerSequenceNumber).to.be.a('string');
                      // expect(data.containerSequenceNumber).to.be("");
                      {
                        let dataCtr = data.containerIdentifiers;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.ContainerIdentification);
                          expect(data.containerIdentificationType).to.be.a('string');
                          // expect(data.containerIdentificationType).to.be("SSCC");
                          expect(data.containerIdentificationNumber).to.be.a('string');
                          // expect(data.containerIdentificationNumber).to.be("");
                        }
                      }
                      expect(data.trackingNumber).to.be.a('string');
                      // expect(data.trackingNumber).to.be("");
                      expect(data.dimensions).to.be.a(SellingPartnerApiForRetailProcurementShipments.Dimensions);
                            expect(data.dimensions.length).to.be.a(SellingPartnerApiForRetailProcurementShipments.Decimal);
                            expect(data.dimensions.width).to.be.a(SellingPartnerApiForRetailProcurementShipments.Decimal);
                            expect(data.dimensions.height).to.be.a(SellingPartnerApiForRetailProcurementShipments.Decimal);
                            expect(data.dimensions.unitOfMeasure).to.be.a('string');
                        // expect(data.dimensions.unitOfMeasure).to.be("In");
                      expect(data.weight).to.be.a(SellingPartnerApiForRetailProcurementShipments.Weight);
                            expect(data.weight.unitOfMeasure).to.be.a('string');
                        // expect(data.weight.unitOfMeasure).to.be("G");
                        expect(data.weight.value).to.be.a(SellingPartnerApiForRetailProcurementShipments.Decimal);
                
                      expect(data.tier).to.be.a('number');
                      // expect(data.tier).to.be(0);
                      expect(data.block).to.be.a('number');
                      // expect(data.block).to.be(0);
                      expect(data.innerContainersDetails).to.be.a(SellingPartnerApiForRetailProcurementShipments.InnerContainersDetails);
                            expect(data.innerContainersDetails.containerCount).to.be.a('number');
                        // expect(data.innerContainersDetails.containerCount).to.be(0);
                        {
                          let dataCtr = data.innerContainersDetails.containerSequenceNumbers;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.ContainerSequenceNumbers);
                            expect(data.containerSequenceNumber).to.be.a('string');
                            // expect(data.containerSequenceNumber).to.be("");
                          }
                        }
                      {
                        let dataCtr = data.packedItems;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.PackedItems);
                          expect(data.itemSequenceNumber).to.be.a('string');
                          // expect(data.itemSequenceNumber).to.be("");
                          expect(data.buyerProductIdentifier).to.be.a('string');
                          // expect(data.buyerProductIdentifier).to.be("");
                          expect(data.vendorProductIdentifier).to.be.a('string');
                          // expect(data.vendorProductIdentifier).to.be("");
                          expect(data.packedQuantity).to.be.a(SellingPartnerApiForRetailProcurementShipments.ItemQuantity);
                                expect(data.packedQuantity.amount).to.be.a('number');
                            // expect(data.packedQuantity.amount).to.be(0);
                            expect(data.packedQuantity.unitOfMeasure).to.be.a('string');
                            // expect(data.packedQuantity.unitOfMeasure).to.be("Cases");
                            expect(data.packedQuantity.unitSize).to.be.a('number');
                            // expect(data.packedQuantity.unitSize).to.be(0);
                          expect(data.itemDetails).to.be.a(SellingPartnerApiForRetailProcurementShipments.PackageItemDetails);
                                expect(data.itemDetails.purchaseOrderNumber).to.be.a('string');
                            // expect(data.itemDetails.purchaseOrderNumber).to.be("");
                            expect(data.itemDetails.lotNumber).to.be.a('string');
                            // expect(data.itemDetails.lotNumber).to.be("");
                            expect(data.itemDetails.expiry).to.be.a(SellingPartnerApiForRetailProcurementShipments.Expiry);
                                  expect(data.itemDetails.expiry.manufacturerDate).to.be.a(Date);
                              // expect(data.itemDetails.expiry.manufacturerDate).to.be(new Date());
                              expect(data.itemDetails.expiry.expiryDate).to.be.a(Date);
                              // expect(data.itemDetails.expiry.expiryDate).to.be(new Date());
                              expect(data.itemDetails.expiry.expiryAfterDuration).to.be.a(SellingPartnerApiForRetailProcurementShipments.Duration);
                                    expect(data.itemDetails.expiry.expiryAfterDuration.durationUnit).to.be.a('string');
                                // expect(data.itemDetails.expiry.expiryAfterDuration.durationUnit).to.be("Days");
                                expect(data.itemDetails.expiry.expiryAfterDuration.durationValue).to.be.a('number');
                                // expect(data.itemDetails.expiry.expiryAfterDuration.durationValue).to.be(0);
                        }
                      }
                    }
                  }
                  expect(data.transportationDetails).to.be.a(SellingPartnerApiForRetailProcurementShipments.TransportationDetails);
                        expect(data.transportationDetails.shipMode).to.be.a('string');
                    // expect(data.transportationDetails.shipMode).to.be("TruckLoad");
                    expect(data.transportationDetails.transportationMode).to.be.a('string');
                    // expect(data.transportationDetails.transportationMode).to.be("Road");
                    expect(data.transportationDetails.shippedDate).to.be.a(Date);
                    // expect(data.transportationDetails.shippedDate).to.be(new Date());
                    expect(data.transportationDetails.estimatedDeliveryDate).to.be.a(Date);
                    // expect(data.transportationDetails.estimatedDeliveryDate).to.be(new Date());
                    expect(data.transportationDetails.shipmentDeliveryDate).to.be.a(Date);
                    // expect(data.transportationDetails.shipmentDeliveryDate).to.be(new Date());
                    expect(data.transportationDetails.carrierDetails).to.be.a(SellingPartnerApiForRetailProcurementShipments.CarrierDetails);
                          expect(data.transportationDetails.carrierDetails.name).to.be.a('string');
                      // expect(data.transportationDetails.carrierDetails.name).to.be("");
                      expect(data.transportationDetails.carrierDetails.code).to.be.a('string');
                      // expect(data.transportationDetails.carrierDetails.code).to.be("");
                      expect(data.transportationDetails.carrierDetails.phone).to.be.a('string');
                      // expect(data.transportationDetails.carrierDetails.phone).to.be("");
                      expect(data.transportationDetails.carrierDetails.email).to.be.a('string');
                      // expect(data.transportationDetails.carrierDetails.email).to.be("");
                      expect(data.transportationDetails.carrierDetails.shipmentReferenceNumber).to.be.a('string');
                      // expect(data.transportationDetails.carrierDetails.shipmentReferenceNumber).to.be("");
                    expect(data.transportationDetails.billOfLadingNumber).to.be.a('string');
                    // expect(data.transportationDetails.billOfLadingNumber).to.be("");
                }
              }
            expect(data.errors).to.be.a(SellingPartnerApiForRetailProcurementShipments.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitShipmentConfirmations', function() {
        it('should call submitShipmentConfirmations successfully', function(done) {
          // TODO: uncomment, update parameter values for submitShipmentConfirmations call and complete the assertions
          /*
          var body = new SellingPartnerApiForRetailProcurementShipments.SubmitShipmentConfirmationsRequest();
          body.shipmentConfirmations = [new SellingPartnerApiForRetailProcurementShipments.ShipmentConfirmation()];
          body.shipmentConfirmations[0].shipmentIdentifier = "";
          body.shipmentConfirmations[0].shipmentConfirmationType = "Original";
          body.shipmentConfirmations[0].shipmentType = "TruckLoad";
          body.shipmentConfirmations[0].shipmentStructure = "PalletizedAssortmentCase";
          body.shipmentConfirmations[0].transportationDetails = new SellingPartnerApiForRetailProcurementShipments.TransportationDetailsForShipmentConfirmation();
          body.shipmentConfirmations[0].transportationDetails.carrierScac = "";
          body.shipmentConfirmations[0].transportationDetails.carrierShipmentReferenceNumber = "";
          body.shipmentConfirmations[0].transportationDetails.transportationMode = "Road";
          body.shipmentConfirmations[0].transportationDetails.billOfLadingNumber = "";
          body.shipmentConfirmations[0].amazonReferenceNumber = "";
          body.shipmentConfirmations[0].shipmentConfirmationDate = new Date();
          body.shipmentConfirmations[0].shippedDate = new Date();
          body.shipmentConfirmations[0].estimatedDeliveryDate = new Date();
          body.shipmentConfirmations[0].sellingParty = new SellingPartnerApiForRetailProcurementShipments.PartyIdentification();
          body.shipmentConfirmations[0].sellingParty.address = new SellingPartnerApiForRetailProcurementShipments.Address();
          body.shipmentConfirmations[0].sellingParty.address.name = "";
          body.shipmentConfirmations[0].sellingParty.address.addressLine1 = "";
          body.shipmentConfirmations[0].sellingParty.address.addressLine2 = "";
          body.shipmentConfirmations[0].sellingParty.address.addressLine3 = "";
          body.shipmentConfirmations[0].sellingParty.address.city = "";
          body.shipmentConfirmations[0].sellingParty.address.county = "";
          body.shipmentConfirmations[0].sellingParty.address.district = "";
          body.shipmentConfirmations[0].sellingParty.address.stateOrRegion = "";
          body.shipmentConfirmations[0].sellingParty.address.postalCode = "";
          body.shipmentConfirmations[0].sellingParty.address.countryCode = "";
          body.shipmentConfirmations[0].sellingParty.address.phone = "";
          body.shipmentConfirmations[0].sellingParty.partyId = "";
          body.shipmentConfirmations[0].sellingParty.taxRegistrationDetails = [new SellingPartnerApiForRetailProcurementShipments.TaxRegistrationDetails()];
          body.shipmentConfirmations[0].sellingParty.taxRegistrationDetails[0].taxRegistrationType = "VAT";
          body.shipmentConfirmations[0].sellingParty.taxRegistrationDetails[0].taxRegistrationNumber = "";
          body.shipmentConfirmations[0].shipFromParty = new SellingPartnerApiForRetailProcurementShipments.PartyIdentification();
          body.shipmentConfirmations[0].shipFromParty.address = new SellingPartnerApiForRetailProcurementShipments.Address();
          body.shipmentConfirmations[0].shipFromParty.address.name = "";
          body.shipmentConfirmations[0].shipFromParty.address.addressLine1 = "";
          body.shipmentConfirmations[0].shipFromParty.address.addressLine2 = "";
          body.shipmentConfirmations[0].shipFromParty.address.addressLine3 = "";
          body.shipmentConfirmations[0].shipFromParty.address.city = "";
          body.shipmentConfirmations[0].shipFromParty.address.county = "";
          body.shipmentConfirmations[0].shipFromParty.address.district = "";
          body.shipmentConfirmations[0].shipFromParty.address.stateOrRegion = "";
          body.shipmentConfirmations[0].shipFromParty.address.postalCode = "";
          body.shipmentConfirmations[0].shipFromParty.address.countryCode = "";
          body.shipmentConfirmations[0].shipFromParty.address.phone = "";
          body.shipmentConfirmations[0].shipFromParty.partyId = "";
          body.shipmentConfirmations[0].shipFromParty.taxRegistrationDetails = [new SellingPartnerApiForRetailProcurementShipments.TaxRegistrationDetails()];
          body.shipmentConfirmations[0].shipFromParty.taxRegistrationDetails[0].taxRegistrationType = "VAT";
          body.shipmentConfirmations[0].shipFromParty.taxRegistrationDetails[0].taxRegistrationNumber = "";
          body.shipmentConfirmations[0].shipToParty = new SellingPartnerApiForRetailProcurementShipments.PartyIdentification();
          body.shipmentConfirmations[0].shipToParty.address = new SellingPartnerApiForRetailProcurementShipments.Address();
          body.shipmentConfirmations[0].shipToParty.address.name = "";
          body.shipmentConfirmations[0].shipToParty.address.addressLine1 = "";
          body.shipmentConfirmations[0].shipToParty.address.addressLine2 = "";
          body.shipmentConfirmations[0].shipToParty.address.addressLine3 = "";
          body.shipmentConfirmations[0].shipToParty.address.city = "";
          body.shipmentConfirmations[0].shipToParty.address.county = "";
          body.shipmentConfirmations[0].shipToParty.address.district = "";
          body.shipmentConfirmations[0].shipToParty.address.stateOrRegion = "";
          body.shipmentConfirmations[0].shipToParty.address.postalCode = "";
          body.shipmentConfirmations[0].shipToParty.address.countryCode = "";
          body.shipmentConfirmations[0].shipToParty.address.phone = "";
          body.shipmentConfirmations[0].shipToParty.partyId = "";
          body.shipmentConfirmations[0].shipToParty.taxRegistrationDetails = [new SellingPartnerApiForRetailProcurementShipments.TaxRegistrationDetails()];
          body.shipmentConfirmations[0].shipToParty.taxRegistrationDetails[0].taxRegistrationType = "VAT";
          body.shipmentConfirmations[0].shipToParty.taxRegistrationDetails[0].taxRegistrationNumber = "";
          body.shipmentConfirmations[0].shipmentMeasurements = new SellingPartnerApiForRetailProcurementShipments.ShipmentMeasurements();
          body.shipmentConfirmations[0].shipmentMeasurements.grossShipmentWeight = new SellingPartnerApiForRetailProcurementShipments.Weight();
          body.shipmentConfirmations[0].shipmentMeasurements.grossShipmentWeight.unitOfMeasure = "G";
          body.shipmentConfirmations[0].shipmentMeasurements.grossShipmentWeight.value = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].shipmentMeasurements.shipmentVolume = new SellingPartnerApiForRetailProcurementShipments.Volume();
          body.shipmentConfirmations[0].shipmentMeasurements.shipmentVolume.unitOfMeasure = "CuFt";
          body.shipmentConfirmations[0].shipmentMeasurements.shipmentVolume.value = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].shipmentMeasurements.cartonCount = 0;
          body.shipmentConfirmations[0].shipmentMeasurements.palletCount = 0;
          body.shipmentConfirmations[0].importDetails = new SellingPartnerApiForRetailProcurementShipments.ImportDetails();
          body.shipmentConfirmations[0].importDetails.methodOfPayment = "PaidByBuyer";
          body.shipmentConfirmations[0].importDetails.sealNumber = "";
          body.shipmentConfirmations[0].importDetails.route = new SellingPartnerApiForRetailProcurementShipments.Route();
          body.shipmentConfirmations[0].importDetails.route.stops = [new SellingPartnerApiForRetailProcurementShipments.Stop()];
          body.shipmentConfirmations[0].importDetails.route.stops[0].functionCode = "PortOfDischarge";
          body.shipmentConfirmations[0].importDetails.route.stops[0].locationIdentification = new SellingPartnerApiForRetailProcurementShipments.Location();
          body.shipmentConfirmations[0].importDetails.route.stops[0].locationIdentification.type = "";
          body.shipmentConfirmations[0].importDetails.route.stops[0].locationIdentification.locationCode = "";
          body.shipmentConfirmations[0].importDetails.route.stops[0].locationIdentification.countryCode = "";
          body.shipmentConfirmations[0].importDetails.route.stops[0].arrivalTime = new Date();
          body.shipmentConfirmations[0].importDetails.route.stops[0].departureTime = new Date();
          body.shipmentConfirmations[0].importDetails.importContainers = "";
          body.shipmentConfirmations[0].importDetails.billableWeight = new SellingPartnerApiForRetailProcurementShipments.Weight();
          body.shipmentConfirmations[0].importDetails.billableWeight.unitOfMeasure = "G";
          body.shipmentConfirmations[0].importDetails.billableWeight.value = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].importDetails.estimatedShipByDate = new Date();
          body.shipmentConfirmations[0].importDetails.handlingInstructions = "Oversized";
          body.shipmentConfirmations[0].shippedItems = [new SellingPartnerApiForRetailProcurementShipments.Item()];
          body.shipmentConfirmations[0].shippedItems[0].itemSequenceNumber = "";
          body.shipmentConfirmations[0].shippedItems[0].amazonProductIdentifier = "";
          body.shipmentConfirmations[0].shippedItems[0].vendorProductIdentifier = "";
          body.shipmentConfirmations[0].shippedItems[0].shippedQuantity = new SellingPartnerApiForRetailProcurementShipments.ItemQuantity();
          body.shipmentConfirmations[0].shippedItems[0].shippedQuantity.amount = 0;
          body.shipmentConfirmations[0].shippedItems[0].shippedQuantity.unitOfMeasure = "Cases";
          body.shipmentConfirmations[0].shippedItems[0].shippedQuantity.unitSize = 0;
          body.shipmentConfirmations[0].shippedItems[0].itemDetails = new SellingPartnerApiForRetailProcurementShipments.ItemDetails();
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.purchaseOrderNumber = "";
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.lotNumber = "";
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.expiry = new SellingPartnerApiForRetailProcurementShipments.Expiry();
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.expiry.manufacturerDate = new Date();
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.expiry.expiryDate = new Date();
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.expiry.expiryAfterDuration = new SellingPartnerApiForRetailProcurementShipments.Duration();
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.expiry.expiryAfterDuration.durationUnit = "Days";
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.expiry.expiryAfterDuration.durationValue = 0;
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.maximumRetailPrice = new SellingPartnerApiForRetailProcurementShipments.Money();
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.maximumRetailPrice.currencyCode = "";
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.maximumRetailPrice.amount = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].shippedItems[0].itemDetails.handlingCode = "Oversized";
          body.shipmentConfirmations[0].cartons = [new SellingPartnerApiForRetailProcurementShipments.Carton()];
          body.shipmentConfirmations[0].cartons[0].cartonIdentifiers = [new SellingPartnerApiForRetailProcurementShipments.ContainerIdentification()];
          body.shipmentConfirmations[0].cartons[0].cartonIdentifiers[0].containerIdentificationType = "SSCC";
          body.shipmentConfirmations[0].cartons[0].cartonIdentifiers[0].containerIdentificationNumber = "";
          body.shipmentConfirmations[0].cartons[0].cartonSequenceNumber = "";
          body.shipmentConfirmations[0].cartons[0].dimensions = new SellingPartnerApiForRetailProcurementShipments.Dimensions();
          body.shipmentConfirmations[0].cartons[0].dimensions.length = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].cartons[0].dimensions.width = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].cartons[0].dimensions.height = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].cartons[0].dimensions.unitOfMeasure = "In";
          body.shipmentConfirmations[0].cartons[0].weight = new SellingPartnerApiForRetailProcurementShipments.Weight();
          body.shipmentConfirmations[0].cartons[0].weight.unitOfMeasure = "G";
          body.shipmentConfirmations[0].cartons[0].weight.value = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].cartons[0].trackingNumber = "";
          body.shipmentConfirmations[0].cartons[0].items = [new SellingPartnerApiForRetailProcurementShipments.ContainerItem()];
          body.shipmentConfirmations[0].cartons[0].items[0].itemReference = "";
          body.shipmentConfirmations[0].cartons[0].items[0].shippedQuantity = new SellingPartnerApiForRetailProcurementShipments.ItemQuantity();
          body.shipmentConfirmations[0].cartons[0].items[0].shippedQuantity.amount = 0;
          body.shipmentConfirmations[0].cartons[0].items[0].shippedQuantity.unitOfMeasure = "Cases";
          body.shipmentConfirmations[0].cartons[0].items[0].shippedQuantity.unitSize = 0;
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails = new SellingPartnerApiForRetailProcurementShipments.ItemDetails();
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.purchaseOrderNumber = "";
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.lotNumber = "";
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.expiry = new SellingPartnerApiForRetailProcurementShipments.Expiry();
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.expiry.manufacturerDate = new Date();
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.expiry.expiryDate = new Date();
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.expiry.expiryAfterDuration = new SellingPartnerApiForRetailProcurementShipments.Duration();
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.expiry.expiryAfterDuration.durationUnit = "Days";
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.expiry.expiryAfterDuration.durationValue = 0;
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.maximumRetailPrice = new SellingPartnerApiForRetailProcurementShipments.Money();
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.maximumRetailPrice.currencyCode = "";
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.maximumRetailPrice.amount = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].cartons[0].items[0].itemDetails.handlingCode = "Oversized";
          body.shipmentConfirmations[0].pallets = [new SellingPartnerApiForRetailProcurementShipments.Pallet()];
          body.shipmentConfirmations[0].pallets[0].palletIdentifiers = [new SellingPartnerApiForRetailProcurementShipments.ContainerIdentification()];
          body.shipmentConfirmations[0].pallets[0].palletIdentifiers[0].containerIdentificationType = "SSCC";
          body.shipmentConfirmations[0].pallets[0].palletIdentifiers[0].containerIdentificationNumber = "";
          body.shipmentConfirmations[0].pallets[0].tier = 0;
          body.shipmentConfirmations[0].pallets[0].block = 0;
          body.shipmentConfirmations[0].pallets[0].dimensions = new SellingPartnerApiForRetailProcurementShipments.Dimensions();
          body.shipmentConfirmations[0].pallets[0].dimensions.length = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].pallets[0].dimensions.width = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].pallets[0].dimensions.height = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].pallets[0].dimensions.unitOfMeasure = "In";
          body.shipmentConfirmations[0].pallets[0].weight = new SellingPartnerApiForRetailProcurementShipments.Weight();
          body.shipmentConfirmations[0].pallets[0].weight.unitOfMeasure = "G";
          body.shipmentConfirmations[0].pallets[0].weight.value = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].pallets[0].cartonReferenceDetails = new SellingPartnerApiForRetailProcurementShipments.CartonReferenceDetails();
          body.shipmentConfirmations[0].pallets[0].cartonReferenceDetails.cartonCount = 0;
          body.shipmentConfirmations[0].pallets[0].cartonReferenceDetails.cartonReferenceNumbers = [""];
          body.shipmentConfirmations[0].pallets[0].items = [new SellingPartnerApiForRetailProcurementShipments.ContainerItem()];
          body.shipmentConfirmations[0].pallets[0].items[0].itemReference = "";
          body.shipmentConfirmations[0].pallets[0].items[0].shippedQuantity = new SellingPartnerApiForRetailProcurementShipments.ItemQuantity();
          body.shipmentConfirmations[0].pallets[0].items[0].shippedQuantity.amount = 0;
          body.shipmentConfirmations[0].pallets[0].items[0].shippedQuantity.unitOfMeasure = "Cases";
          body.shipmentConfirmations[0].pallets[0].items[0].shippedQuantity.unitSize = 0;
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails = new SellingPartnerApiForRetailProcurementShipments.ItemDetails();
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.purchaseOrderNumber = "";
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.lotNumber = "";
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.expiry = new SellingPartnerApiForRetailProcurementShipments.Expiry();
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.expiry.manufacturerDate = new Date();
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.expiry.expiryDate = new Date();
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.expiry.expiryAfterDuration = new SellingPartnerApiForRetailProcurementShipments.Duration();
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.expiry.expiryAfterDuration.durationUnit = "Days";
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.expiry.expiryAfterDuration.durationValue = 0;
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.maximumRetailPrice = new SellingPartnerApiForRetailProcurementShipments.Money();
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.maximumRetailPrice.currencyCode = "";
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.maximumRetailPrice.amount = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipmentConfirmations[0].pallets[0].items[0].itemDetails.handlingCode = "Oversized";

          instance.submitShipmentConfirmations(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.SubmitShipmentConfirmationsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForRetailProcurementShipments.TransactionReference);
                  expect(data.payload.transactionId).to.be.a('string');
              // expect(data.payload.transactionId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForRetailProcurementShipments.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitShipments', function() {
        it('should call submitShipments successfully', function(done) {
          // TODO: uncomment, update parameter values for submitShipments call and complete the assertions
          /*
          var body = new SellingPartnerApiForRetailProcurementShipments.SubmitShipments();
          body.shipments = [new SellingPartnerApiForRetailProcurementShipments.Shipment()];
          body.shipments[0].vendorShipmentIdentifier = "";
          body.shipments[0].transactionType = "New";
          body.shipments[0].buyerReferenceNumber = "";
          body.shipments[0].transactionDate = new Date();
          body.shipments[0].currentShipmentStatus = "Created";
          body.shipments[0].currentshipmentStatusDate = new Date();
          body.shipments[0].shipmentStatusDetails = [new SellingPartnerApiForRetailProcurementShipments.ShipmentStatusDetails()];
          body.shipments[0].shipmentStatusDetails[0].shipmentStatus = "Created";
          body.shipments[0].shipmentStatusDetails[0].shipmentStatusDate = new Date();
          body.shipments[0].shipmentCreateDate = new Date();
          body.shipments[0].shipmentConfirmDate = new Date();
          body.shipments[0].packageLabelCreateDate = new Date();
          body.shipments[0].shipmentFreightTerm = "Collect";
          body.shipments[0].sellingParty = new SellingPartnerApiForRetailProcurementShipments.PartyIdentification();
          body.shipments[0].sellingParty.address = new SellingPartnerApiForRetailProcurementShipments.Address();
          body.shipments[0].sellingParty.address.name = "";
          body.shipments[0].sellingParty.address.addressLine1 = "";
          body.shipments[0].sellingParty.address.addressLine2 = "";
          body.shipments[0].sellingParty.address.addressLine3 = "";
          body.shipments[0].sellingParty.address.city = "";
          body.shipments[0].sellingParty.address.county = "";
          body.shipments[0].sellingParty.address.district = "";
          body.shipments[0].sellingParty.address.stateOrRegion = "";
          body.shipments[0].sellingParty.address.postalCode = "";
          body.shipments[0].sellingParty.address.countryCode = "";
          body.shipments[0].sellingParty.address.phone = "";
          body.shipments[0].sellingParty.partyId = "";
          body.shipments[0].sellingParty.taxRegistrationDetails = [new SellingPartnerApiForRetailProcurementShipments.TaxRegistrationDetails()];
          body.shipments[0].sellingParty.taxRegistrationDetails[0].taxRegistrationType = "VAT";
          body.shipments[0].sellingParty.taxRegistrationDetails[0].taxRegistrationNumber = "";
          body.shipments[0].shipFromParty = new SellingPartnerApiForRetailProcurementShipments.PartyIdentification();
          body.shipments[0].shipFromParty.address = new SellingPartnerApiForRetailProcurementShipments.Address();
          body.shipments[0].shipFromParty.address.name = "";
          body.shipments[0].shipFromParty.address.addressLine1 = "";
          body.shipments[0].shipFromParty.address.addressLine2 = "";
          body.shipments[0].shipFromParty.address.addressLine3 = "";
          body.shipments[0].shipFromParty.address.city = "";
          body.shipments[0].shipFromParty.address.county = "";
          body.shipments[0].shipFromParty.address.district = "";
          body.shipments[0].shipFromParty.address.stateOrRegion = "";
          body.shipments[0].shipFromParty.address.postalCode = "";
          body.shipments[0].shipFromParty.address.countryCode = "";
          body.shipments[0].shipFromParty.address.phone = "";
          body.shipments[0].shipFromParty.partyId = "";
          body.shipments[0].shipFromParty.taxRegistrationDetails = [new SellingPartnerApiForRetailProcurementShipments.TaxRegistrationDetails()];
          body.shipments[0].shipFromParty.taxRegistrationDetails[0].taxRegistrationType = "VAT";
          body.shipments[0].shipFromParty.taxRegistrationDetails[0].taxRegistrationNumber = "";
          body.shipments[0].shipToParty = new SellingPartnerApiForRetailProcurementShipments.PartyIdentification();
          body.shipments[0].shipToParty.address = new SellingPartnerApiForRetailProcurementShipments.Address();
          body.shipments[0].shipToParty.address.name = "";
          body.shipments[0].shipToParty.address.addressLine1 = "";
          body.shipments[0].shipToParty.address.addressLine2 = "";
          body.shipments[0].shipToParty.address.addressLine3 = "";
          body.shipments[0].shipToParty.address.city = "";
          body.shipments[0].shipToParty.address.county = "";
          body.shipments[0].shipToParty.address.district = "";
          body.shipments[0].shipToParty.address.stateOrRegion = "";
          body.shipments[0].shipToParty.address.postalCode = "";
          body.shipments[0].shipToParty.address.countryCode = "";
          body.shipments[0].shipToParty.address.phone = "";
          body.shipments[0].shipToParty.partyId = "";
          body.shipments[0].shipToParty.taxRegistrationDetails = [new SellingPartnerApiForRetailProcurementShipments.TaxRegistrationDetails()];
          body.shipments[0].shipToParty.taxRegistrationDetails[0].taxRegistrationType = "VAT";
          body.shipments[0].shipToParty.taxRegistrationDetails[0].taxRegistrationNumber = "";
          body.shipments[0].shipmentMeasurements = new SellingPartnerApiForRetailProcurementShipments.TransportShipmentMeasurements();
          body.shipments[0].shipmentMeasurements.totalCartonCount = 0;
          body.shipments[0].shipmentMeasurements.totalPalletStackable = 0;
          body.shipments[0].shipmentMeasurements.totalPalletNonStackable = 0;
          body.shipments[0].shipmentMeasurements.shipmentWeight = new SellingPartnerApiForRetailProcurementShipments.Weight();
          body.shipments[0].shipmentMeasurements.shipmentWeight.unitOfMeasure = "G";
          body.shipments[0].shipmentMeasurements.shipmentWeight.value = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipments[0].shipmentMeasurements.shipmentVolume = new SellingPartnerApiForRetailProcurementShipments.Volume();
          body.shipments[0].shipmentMeasurements.shipmentVolume.unitOfMeasure = "CuFt";
          body.shipments[0].shipmentMeasurements.shipmentVolume.value = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipments[0].collectFreightPickupDetails = new SellingPartnerApiForRetailProcurementShipments.CollectFreightPickupDetails();
          body.shipments[0].collectFreightPickupDetails.requestedPickUp = new Date();
          body.shipments[0].collectFreightPickupDetails.scheduledPickUp = new Date();
          body.shipments[0].collectFreightPickupDetails.carrierAssignmentDate = new Date();
          body.shipments[0].purchaseOrders = [new SellingPartnerApiForRetailProcurementShipments.PurchaseOrders()];
          body.shipments[0].purchaseOrders[0].purchaseOrderNumber = "";
          body.shipments[0].purchaseOrders[0].purchaseOrderDate = new Date();
          body.shipments[0].purchaseOrders[0].shipWindow = "";
          body.shipments[0].purchaseOrders[0].items = [new SellingPartnerApiForRetailProcurementShipments.PurchaseOrderItems()];
          body.shipments[0].purchaseOrders[0].items[0].itemSequenceNumber = "";
          body.shipments[0].purchaseOrders[0].items[0].buyerProductIdentifier = "";
          body.shipments[0].purchaseOrders[0].items[0].vendorProductIdentifier = "";
          body.shipments[0].purchaseOrders[0].items[0].shippedQuantity = new SellingPartnerApiForRetailProcurementShipments.ItemQuantity();
          body.shipments[0].purchaseOrders[0].items[0].shippedQuantity.amount = 0;
          body.shipments[0].purchaseOrders[0].items[0].shippedQuantity.unitOfMeasure = "Cases";
          body.shipments[0].purchaseOrders[0].items[0].shippedQuantity.unitSize = 0;
          body.shipments[0].purchaseOrders[0].items[0].maximumRetailPrice = new SellingPartnerApiForRetailProcurementShipments.Money();
          body.shipments[0].purchaseOrders[0].items[0].maximumRetailPrice.currencyCode = "";
          body.shipments[0].purchaseOrders[0].items[0].maximumRetailPrice.amount = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipments[0].importDetails = new SellingPartnerApiForRetailProcurementShipments.ImportDetails();
          body.shipments[0].importDetails.methodOfPayment = "PaidByBuyer";
          body.shipments[0].importDetails.sealNumber = "";
          body.shipments[0].importDetails.route = new SellingPartnerApiForRetailProcurementShipments.Route();
          body.shipments[0].importDetails.route.stops = [new SellingPartnerApiForRetailProcurementShipments.Stop()];
          body.shipments[0].importDetails.route.stops[0].functionCode = "PortOfDischarge";
          body.shipments[0].importDetails.route.stops[0].locationIdentification = new SellingPartnerApiForRetailProcurementShipments.Location();
          body.shipments[0].importDetails.route.stops[0].locationIdentification.type = "";
          body.shipments[0].importDetails.route.stops[0].locationIdentification.locationCode = "";
          body.shipments[0].importDetails.route.stops[0].locationIdentification.countryCode = "";
          body.shipments[0].importDetails.route.stops[0].arrivalTime = new Date();
          body.shipments[0].importDetails.route.stops[0].departureTime = new Date();
          body.shipments[0].importDetails.importContainers = "";
          body.shipments[0].importDetails.billableWeight = new SellingPartnerApiForRetailProcurementShipments.Weight();
          body.shipments[0].importDetails.billableWeight.unitOfMeasure = "G";
          body.shipments[0].importDetails.billableWeight.value = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipments[0].importDetails.estimatedShipByDate = new Date();
          body.shipments[0].importDetails.handlingInstructions = "Oversized";
          body.shipments[0].containers = [new SellingPartnerApiForRetailProcurementShipments.Containers()];
          body.shipments[0].containers[0].containerType = "carton";
          body.shipments[0].containers[0].containerSequenceNumber = "";
          body.shipments[0].containers[0].containerIdentifiers = [new SellingPartnerApiForRetailProcurementShipments.ContainerIdentification()];
          body.shipments[0].containers[0].containerIdentifiers[0].containerIdentificationType = "SSCC";
          body.shipments[0].containers[0].containerIdentifiers[0].containerIdentificationNumber = "";
          body.shipments[0].containers[0].trackingNumber = "";
          body.shipments[0].containers[0].dimensions = new SellingPartnerApiForRetailProcurementShipments.Dimensions();
          body.shipments[0].containers[0].dimensions.length = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipments[0].containers[0].dimensions.width = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipments[0].containers[0].dimensions.height = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipments[0].containers[0].dimensions.unitOfMeasure = "In";
          body.shipments[0].containers[0].weight = new SellingPartnerApiForRetailProcurementShipments.Weight();
          body.shipments[0].containers[0].weight.unitOfMeasure = "G";
          body.shipments[0].containers[0].weight.value = new SellingPartnerApiForRetailProcurementShipments.Decimal();
          body.shipments[0].containers[0].tier = 0;
          body.shipments[0].containers[0].block = 0;
          body.shipments[0].containers[0].innerContainersDetails = new SellingPartnerApiForRetailProcurementShipments.InnerContainersDetails();
          body.shipments[0].containers[0].innerContainersDetails.containerCount = 0;
          body.shipments[0].containers[0].innerContainersDetails.containerSequenceNumbers = [new SellingPartnerApiForRetailProcurementShipments.ContainerSequenceNumbers()];
          body.shipments[0].containers[0].innerContainersDetails.containerSequenceNumbers[0].containerSequenceNumber = "";
          body.shipments[0].containers[0].packedItems = [new SellingPartnerApiForRetailProcurementShipments.PackedItems()];
          body.shipments[0].containers[0].packedItems[0].itemSequenceNumber = "";
          body.shipments[0].containers[0].packedItems[0].buyerProductIdentifier = "";
          body.shipments[0].containers[0].packedItems[0].vendorProductIdentifier = "";
          body.shipments[0].containers[0].packedItems[0].packedQuantity = new SellingPartnerApiForRetailProcurementShipments.ItemQuantity();
          body.shipments[0].containers[0].packedItems[0].packedQuantity.amount = 0;
          body.shipments[0].containers[0].packedItems[0].packedQuantity.unitOfMeasure = "Cases";
          body.shipments[0].containers[0].packedItems[0].packedQuantity.unitSize = 0;
          body.shipments[0].containers[0].packedItems[0].itemDetails = new SellingPartnerApiForRetailProcurementShipments.PackageItemDetails();
          body.shipments[0].containers[0].packedItems[0].itemDetails.purchaseOrderNumber = "";
          body.shipments[0].containers[0].packedItems[0].itemDetails.lotNumber = "";
          body.shipments[0].containers[0].packedItems[0].itemDetails.expiry = new SellingPartnerApiForRetailProcurementShipments.Expiry();
          body.shipments[0].containers[0].packedItems[0].itemDetails.expiry.manufacturerDate = new Date();
          body.shipments[0].containers[0].packedItems[0].itemDetails.expiry.expiryDate = new Date();
          body.shipments[0].containers[0].packedItems[0].itemDetails.expiry.expiryAfterDuration = new SellingPartnerApiForRetailProcurementShipments.Duration();
          body.shipments[0].containers[0].packedItems[0].itemDetails.expiry.expiryAfterDuration.durationUnit = "Days";
          body.shipments[0].containers[0].packedItems[0].itemDetails.expiry.expiryAfterDuration.durationValue = 0;
          body.shipments[0].transportationDetails = new SellingPartnerApiForRetailProcurementShipments.TransportationDetails();
          body.shipments[0].transportationDetails.shipMode = "TruckLoad";
          body.shipments[0].transportationDetails.transportationMode = "Road";
          body.shipments[0].transportationDetails.shippedDate = new Date();
          body.shipments[0].transportationDetails.estimatedDeliveryDate = new Date();
          body.shipments[0].transportationDetails.shipmentDeliveryDate = new Date();
          body.shipments[0].transportationDetails.carrierDetails = new SellingPartnerApiForRetailProcurementShipments.CarrierDetails();
          body.shipments[0].transportationDetails.carrierDetails.name = "";
          body.shipments[0].transportationDetails.carrierDetails.code = "";
          body.shipments[0].transportationDetails.carrierDetails.phone = "";
          body.shipments[0].transportationDetails.carrierDetails.email = "";
          body.shipments[0].transportationDetails.carrierDetails.shipmentReferenceNumber = "";
          body.shipments[0].transportationDetails.billOfLadingNumber = "";

          instance.submitShipments(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForRetailProcurementShipments.SubmitShipmentConfirmationsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForRetailProcurementShipments.TransactionReference);
                  expect(data.payload.transactionId).to.be.a('string');
              // expect(data.payload.transactionId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForRetailProcurementShipments.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
