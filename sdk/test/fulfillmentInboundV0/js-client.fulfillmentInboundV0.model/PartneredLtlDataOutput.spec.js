/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/fulfillmentInboundV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/fulfillmentInboundV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFulfillmentInbound);
  }
}(this, function(expect, SellingPartnerApiForFulfillmentInbound) {
  'use strict';

  var instance;

  describe('fulfillmentInboundV0', function() {
    describe('PartneredLtlDataOutput', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForFulfillmentInbound.PartneredLtlDataOutput();
      });

      it('should create an instance of PartneredLtlDataOutput', function() {
        // TODO: update the code to test PartneredLtlDataOutput
        expect(instance).to.be.a(SellingPartnerApiForFulfillmentInbound.PartneredLtlDataOutput);
      });

      it('should have the property contact (base name: "Contact")', function() {
        // TODO: update the code to test the property contact
        expect(instance).to.have.property('contact');
        // expect(instance.contact).to.be(expectedValueLiteral);
      });

      it('should have the property boxCount (base name: "BoxCount")', function() {
        // TODO: update the code to test the property boxCount
        expect(instance).to.have.property('boxCount');
        // expect(instance.boxCount).to.be(expectedValueLiteral);
      });

      it('should have the property sellerFreightClass (base name: "SellerFreightClass")', function() {
        // TODO: update the code to test the property sellerFreightClass
        expect(instance).to.have.property('sellerFreightClass');
        // expect(instance.sellerFreightClass).to.be(expectedValueLiteral);
      });

      it('should have the property freightReadyDate (base name: "FreightReadyDate")', function() {
        // TODO: update the code to test the property freightReadyDate
        expect(instance).to.have.property('freightReadyDate');
        // expect(instance.freightReadyDate).to.be(expectedValueLiteral);
      });

      it('should have the property palletList (base name: "PalletList")', function() {
        // TODO: update the code to test the property palletList
        expect(instance).to.have.property('palletList');
        // expect(instance.palletList).to.be(expectedValueLiteral);
      });

      it('should have the property totalWeight (base name: "TotalWeight")', function() {
        // TODO: update the code to test the property totalWeight
        expect(instance).to.have.property('totalWeight');
        // expect(instance.totalWeight).to.be(expectedValueLiteral);
      });

      it('should have the property sellerDeclaredValue (base name: "SellerDeclaredValue")', function() {
        // TODO: update the code to test the property sellerDeclaredValue
        expect(instance).to.have.property('sellerDeclaredValue');
        // expect(instance.sellerDeclaredValue).to.be(expectedValueLiteral);
      });

      it('should have the property amazonCalculatedValue (base name: "AmazonCalculatedValue")', function() {
        // TODO: update the code to test the property amazonCalculatedValue
        expect(instance).to.have.property('amazonCalculatedValue');
        // expect(instance.amazonCalculatedValue).to.be(expectedValueLiteral);
      });

      it('should have the property previewPickupDate (base name: "PreviewPickupDate")', function() {
        // TODO: update the code to test the property previewPickupDate
        expect(instance).to.have.property('previewPickupDate');
        // expect(instance.previewPickupDate).to.be(expectedValueLiteral);
      });

      it('should have the property previewDeliveryDate (base name: "PreviewDeliveryDate")', function() {
        // TODO: update the code to test the property previewDeliveryDate
        expect(instance).to.have.property('previewDeliveryDate');
        // expect(instance.previewDeliveryDate).to.be(expectedValueLiteral);
      });

      it('should have the property previewFreightClass (base name: "PreviewFreightClass")', function() {
        // TODO: update the code to test the property previewFreightClass
        expect(instance).to.have.property('previewFreightClass');
        // expect(instance.previewFreightClass).to.be(expectedValueLiteral);
      });

      it('should have the property amazonReferenceId (base name: "AmazonReferenceId")', function() {
        // TODO: update the code to test the property amazonReferenceId
        expect(instance).to.have.property('amazonReferenceId');
        // expect(instance.amazonReferenceId).to.be(expectedValueLiteral);
      });

      it('should have the property isBillOfLadingAvailable (base name: "IsBillOfLadingAvailable")', function() {
        // TODO: update the code to test the property isBillOfLadingAvailable
        expect(instance).to.have.property('isBillOfLadingAvailable');
        // expect(instance.isBillOfLadingAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property partneredEstimate (base name: "PartneredEstimate")', function() {
        // TODO: update the code to test the property partneredEstimate
        expect(instance).to.have.property('partneredEstimate');
        // expect(instance.partneredEstimate).to.be(expectedValueLiteral);
      });

      it('should have the property carrierName (base name: "CarrierName")', function() {
        // TODO: update the code to test the property carrierName
        expect(instance).to.have.property('carrierName');
        // expect(instance.carrierName).to.be(expectedValueLiteral);
      });

    });
  });

}));
