/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/fulfillmentInboundV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/fulfillmentInboundV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFulfillmentInbound);
  }
}(this, function(expect, SellingPartnerApiForFulfillmentInbound) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForFulfillmentInbound.FbaInboundApi();
  });

  describe('fulfillmentInboundV0', function() {
    describe('FbaInboundApi', function() {
      describe('confirmPreorder', function() {
        it('should call confirmPreorder successfully', function(done) {
          // TODO: uncomment, update parameter values for confirmPreorder call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var needByDate = new Date("2013-10-20");
          var marketplaceId = "marketplaceId_example";

          instance.confirmPreorder(shipmentId, needByDate, marketplaceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.ConfirmPreorderResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.ConfirmPreorderResult);
                  expect(data.payload.confirmedNeedByDate).to.be.a(SellingPartnerApiForFulfillmentInbound.DateStringType);
                  expect(data.payload.confirmedFulfillableDate).to.be.a(SellingPartnerApiForFulfillmentInbound.DateStringType);
      
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('confirmTransport', function() {
        it('should call confirmTransport successfully', function(done) {
          // TODO: uncomment, update parameter values for confirmTransport call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.confirmTransport(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.ConfirmTransportResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.CommonTransportResult);
                  expect(data.payload.transportResult).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportResult);
                    expect(data.payload.transportResult.transportStatus).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportStatus);
                    expect(data.payload.transportResult.errorCode).to.be.a('string');
                // expect(data.payload.transportResult.errorCode).to.be("");
                expect(data.payload.transportResult.errorDescription).to.be.a('string');
                // expect(data.payload.transportResult.errorDescription).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createInboundShipment', function() {
        it('should call createInboundShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for createInboundShipment call and complete the assertions
          /*
          var body = new SellingPartnerApiForFulfillmentInbound.InboundShipmentRequest();
          body.inboundShipmentHeader = new SellingPartnerApiForFulfillmentInbound.InboundShipmentHeader();
          body.inboundShipmentHeader.shipmentName = "";
          body.inboundShipmentHeader.shipFromAddress = new SellingPartnerApiForFulfillmentInbound.Address();
          body.inboundShipmentHeader.shipFromAddress.name = "";
          body.inboundShipmentHeader.shipFromAddress.addressLine1 = "";
          body.inboundShipmentHeader.shipFromAddress.addressLine2 = "";
          body.inboundShipmentHeader.shipFromAddress.districtOrCounty = "";
          body.inboundShipmentHeader.shipFromAddress.city = "";
          body.inboundShipmentHeader.shipFromAddress.stateOrProvinceCode = "";
          body.inboundShipmentHeader.shipFromAddress.countryCode = "";
          body.inboundShipmentHeader.shipFromAddress.postalCode = "";
          body.inboundShipmentHeader.destinationFulfillmentCenterId = "";
          body.inboundShipmentHeader.areCasesRequired = false;
          body.inboundShipmentHeader.shipmentStatus = new SellingPartnerApiForFulfillmentInbound.ShipmentStatus();
          body.inboundShipmentHeader.labelPrepPreference = new SellingPartnerApiForFulfillmentInbound.LabelPrepPreference();
          body.inboundShipmentHeader.intendedBoxContentsSource = new SellingPartnerApiForFulfillmentInbound.IntendedBoxContentsSource();
          body.inboundShipmentItems = new SellingPartnerApiForFulfillmentInbound.InboundShipmentItemList();
          body.marketplaceId = "";
          var shipmentId = "shipmentId_example";

          instance.createInboundShipment(body, shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentResult);
                  expect(data.payload.shipmentId).to.be.a('string');
              // expect(data.payload.shipmentId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createInboundShipmentPlan', function() {
        it('should call createInboundShipmentPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for createInboundShipmentPlan call and complete the assertions
          /*
          var body = new SellingPartnerApiForFulfillmentInbound.CreateInboundShipmentPlanRequest();
          body.shipFromAddress = new SellingPartnerApiForFulfillmentInbound.Address();
          body.shipFromAddress.name = "";
          body.shipFromAddress.addressLine1 = "";
          body.shipFromAddress.addressLine2 = "";
          body.shipFromAddress.districtOrCounty = "";
          body.shipFromAddress.city = "";
          body.shipFromAddress.stateOrProvinceCode = "";
          body.shipFromAddress.countryCode = "";
          body.shipFromAddress.postalCode = "";
          body.labelPrepPreference = new SellingPartnerApiForFulfillmentInbound.LabelPrepPreference();
          body.shipToCountryCode = "";
          body.shipToCountrySubdivisionCode = "";
          body.inboundShipmentPlanRequestItems = new SellingPartnerApiForFulfillmentInbound.InboundShipmentPlanRequestItemList();

          instance.createInboundShipmentPlan(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.CreateInboundShipmentPlanResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.CreateInboundShipmentPlanResult);
                  expect(data.payload.inboundShipmentPlans).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentPlanList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('estimateTransport', function() {
        it('should call estimateTransport successfully', function(done) {
          // TODO: uncomment, update parameter values for estimateTransport call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.estimateTransport(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.EstimateTransportResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.CommonTransportResult);
                  expect(data.payload.transportResult).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportResult);
                    expect(data.payload.transportResult.transportStatus).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportStatus);
                    expect(data.payload.transportResult.errorCode).to.be.a('string');
                // expect(data.payload.transportResult.errorCode).to.be("");
                expect(data.payload.transportResult.errorDescription).to.be.a('string');
                // expect(data.payload.transportResult.errorDescription).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBillOfLading', function() {
        it('should call getBillOfLading successfully', function(done) {
          // TODO: uncomment, update parameter values for getBillOfLading call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.getBillOfLading(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetBillOfLadingResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.BillOfLadingDownloadURL);
                  expect(data.payload.downloadURL).to.be.a('string');
              // expect(data.payload.downloadURL).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLabels', function() {
        it('should call getLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for getLabels call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var pageType = "pageType_example";
          var labelType = "labelType_example";
          var opts = {};
          opts.numberOfPackages = 56;
          opts.packageLabelsToPrint = ["packageLabelsToPrint_example"];
          opts.numberOfPallets = 56;
          opts.pageSize = 56;
          opts.pageStartIndex = 56;

          instance.getLabels(shipmentId, pageType, labelType, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetLabelsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.LabelDownloadURL);
                  expect(data.payload.downloadURL).to.be.a('string');
              // expect(data.payload.downloadURL).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPreorderInfo', function() {
        it('should call getPreorderInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getPreorderInfo call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var marketplaceId = "marketplaceId_example";

          instance.getPreorderInfo(shipmentId, marketplaceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetPreorderInfoResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetPreorderInfoResult);
                  expect(data.payload.shipmentContainsPreorderableItems).to.be.a('boolean');
              // expect(data.payload.shipmentContainsPreorderableItems).to.be(false);
              expect(data.payload.shipmentConfirmedForPreorder).to.be.a('boolean');
              // expect(data.payload.shipmentConfirmedForPreorder).to.be(false);
              expect(data.payload.needByDate).to.be.a(SellingPartnerApiForFulfillmentInbound.DateStringType);
                  expect(data.payload.confirmedFulfillableDate).to.be.a(SellingPartnerApiForFulfillmentInbound.DateStringType);
      
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPrepInstructions', function() {
        it('should call getPrepInstructions successfully', function(done) {
          // TODO: uncomment, update parameter values for getPrepInstructions call and complete the assertions
          /*
          var shipToCountryCode = "shipToCountryCode_example";
          var opts = {};
          opts.sellerSKUList = ["sellerSKUList_example"];
          opts.aSINList = ["aSINList_example"];

          instance.getPrepInstructions(shipToCountryCode, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetPrepInstructionsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetPrepInstructionsResult);
                  expect(data.payload.sKUPrepInstructionsList).to.be.a(SellingPartnerApiForFulfillmentInbound.SKUPrepInstructionsList);
                  expect(data.payload.invalidSKUList).to.be.a(SellingPartnerApiForFulfillmentInbound.InvalidSKUList);
                  expect(data.payload.aSINPrepInstructionsList).to.be.a(SellingPartnerApiForFulfillmentInbound.ASINPrepInstructionsList);
                  expect(data.payload.invalidASINList).to.be.a(SellingPartnerApiForFulfillmentInbound.InvalidASINList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipmentItems', function() {
        it('should call getShipmentItems successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentItems call and complete the assertions
          /*
          var queryType = "queryType_example";
          var marketplaceId = "marketplaceId_example";
          var opts = {};
          opts.lastUpdatedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.lastUpdatedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.nextToken = "nextToken_example";

          instance.getShipmentItems(queryType, marketplaceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentItemsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentItemsResult);
                  expect(data.payload.itemData).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentItemList);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipmentItemsByShipmentId', function() {
        it('should call getShipmentItemsByShipmentId successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentItemsByShipmentId call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var marketplaceId = "marketplaceId_example";

          instance.getShipmentItemsByShipmentId(shipmentId, marketplaceId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentItemsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentItemsResult);
                  expect(data.payload.itemData).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentItemList);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipments', function() {
        it('should call getShipments successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipments call and complete the assertions
          /*
          var queryType = "queryType_example";
          var marketplaceId = "marketplaceId_example";
          var opts = {};
          opts.shipmentStatusList = ["shipmentStatusList_example"];
          opts.shipmentIdList = ["shipmentIdList_example"];
          opts.lastUpdatedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.lastUpdatedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.nextToken = "nextToken_example";

          instance.getShipments(queryType, marketplaceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentsResult);
                  expect(data.payload.shipmentData).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentList);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTransportDetails', function() {
        it('should call getTransportDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getTransportDetails call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.getTransportDetails(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetTransportDetailsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetTransportDetailsResult);
                  expect(data.payload.transportContent).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportContent);
                    expect(data.payload.transportContent.transportHeader).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportHeader);
                      expect(data.payload.transportContent.transportHeader.sellerId).to.be.a('string');
                  // expect(data.payload.transportContent.transportHeader.sellerId).to.be("");
                  expect(data.payload.transportContent.transportHeader.shipmentId).to.be.a('string');
                  // expect(data.payload.transportContent.transportHeader.shipmentId).to.be("");
                  expect(data.payload.transportContent.transportHeader.isPartnered).to.be.a('boolean');
                  // expect(data.payload.transportContent.transportHeader.isPartnered).to.be(false);
                  expect(data.payload.transportContent.transportHeader.shipmentType).to.be.a(SellingPartnerApiForFulfillmentInbound.ShipmentType);
          
                expect(data.payload.transportContent.transportDetails).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportDetailOutput);
                      expect(data.payload.transportContent.transportDetails.partneredSmallParcelData).to.be.a(SellingPartnerApiForFulfillmentInbound.PartneredSmallParcelDataOutput);
                        expect(data.payload.transportContent.transportDetails.partneredSmallParcelData.packageList).to.be.a(SellingPartnerApiForFulfillmentInbound.PartneredSmallParcelPackageOutputList);
                        expect(data.payload.transportContent.transportDetails.partneredSmallParcelData.partneredEstimate).to.be.a(SellingPartnerApiForFulfillmentInbound.PartneredEstimate);
                          expect(data.payload.transportContent.transportDetails.partneredSmallParcelData.partneredEstimate.amount).to.be.a(SellingPartnerApiForFulfillmentInbound.Amount);
                            expect(data.payload.transportContent.transportDetails.partneredSmallParcelData.partneredEstimate.amount.currencyCode).to.be.a(SellingPartnerApiForFulfillmentInbound.CurrencyCode);
                            expect(data.payload.transportContent.transportDetails.partneredSmallParcelData.partneredEstimate.amount.value).to.be.a(SellingPartnerApiForFulfillmentInbound.BigDecimalType);
                
                      expect(data.payload.transportContent.transportDetails.partneredSmallParcelData.partneredEstimate.confirmDeadline).to.be.a(SellingPartnerApiForFulfillmentInbound.TimeStampStringType);
                          expect(data.payload.transportContent.transportDetails.partneredSmallParcelData.partneredEstimate.voidDeadline).to.be.a(SellingPartnerApiForFulfillmentInbound.TimeStampStringType);
              
                  expect(data.payload.transportContent.transportDetails.nonPartneredSmallParcelData).to.be.a(SellingPartnerApiForFulfillmentInbound.NonPartneredSmallParcelDataOutput);
                        expect(data.payload.transportContent.transportDetails.nonPartneredSmallParcelData.packageList).to.be.a(SellingPartnerApiForFulfillmentInbound.NonPartneredSmallParcelPackageOutputList);
            
                  expect(data.payload.transportContent.transportDetails.partneredLtlData).to.be.a(SellingPartnerApiForFulfillmentInbound.PartneredLtlDataOutput);
                        expect(data.payload.transportContent.transportDetails.partneredLtlData.contact).to.be.a(SellingPartnerApiForFulfillmentInbound.Contact);
                          expect(data.payload.transportContent.transportDetails.partneredLtlData.contact.name).to.be.a('string');
                      // expect(data.payload.transportContent.transportDetails.partneredLtlData.contact.name).to.be("");
                      expect(data.payload.transportContent.transportDetails.partneredLtlData.contact.phone).to.be.a('string');
                      // expect(data.payload.transportContent.transportDetails.partneredLtlData.contact.phone).to.be("");
                      expect(data.payload.transportContent.transportDetails.partneredLtlData.contact.email).to.be.a('string');
                      // expect(data.payload.transportContent.transportDetails.partneredLtlData.contact.email).to.be("");
                      expect(data.payload.transportContent.transportDetails.partneredLtlData.contact.fax).to.be.a('string');
                      // expect(data.payload.transportContent.transportDetails.partneredLtlData.contact.fax).to.be("");
                    expect(data.payload.transportContent.transportDetails.partneredLtlData.boxCount).to.be.a(SellingPartnerApiForFulfillmentInbound.UnsignedIntType);
                        expect(data.payload.transportContent.transportDetails.partneredLtlData.sellerFreightClass).to.be.a(SellingPartnerApiForFulfillmentInbound.SellerFreightClass);
                        expect(data.payload.transportContent.transportDetails.partneredLtlData.freightReadyDate).to.be.a(SellingPartnerApiForFulfillmentInbound.DateStringType);
                        expect(data.payload.transportContent.transportDetails.partneredLtlData.palletList).to.be.a(SellingPartnerApiForFulfillmentInbound.PalletList);
                        expect(data.payload.transportContent.transportDetails.partneredLtlData.totalWeight).to.be.a(SellingPartnerApiForFulfillmentInbound.Weight);
                          expect(data.payload.transportContent.transportDetails.partneredLtlData.totalWeight.value).to.be.a(SellingPartnerApiForFulfillmentInbound.BigDecimalType);
                          expect(data.payload.transportContent.transportDetails.partneredLtlData.totalWeight.unit).to.be.a(SellingPartnerApiForFulfillmentInbound.UnitOfWeight);
              
                    expect(data.payload.transportContent.transportDetails.partneredLtlData.sellerDeclaredValue).to.be.a(SellingPartnerApiForFulfillmentInbound.Amount);
                          expect(data.payload.transportContent.transportDetails.partneredLtlData.sellerDeclaredValue.currencyCode).to.be.a(SellingPartnerApiForFulfillmentInbound.CurrencyCode);
                          expect(data.payload.transportContent.transportDetails.partneredLtlData.sellerDeclaredValue.value).to.be.a(SellingPartnerApiForFulfillmentInbound.BigDecimalType);
              
                    expect(data.payload.transportContent.transportDetails.partneredLtlData.amazonCalculatedValue).to.be.a(SellingPartnerApiForFulfillmentInbound.Amount);
                          expect(data.payload.transportContent.transportDetails.partneredLtlData.amazonCalculatedValue.currencyCode).to.be.a(SellingPartnerApiForFulfillmentInbound.CurrencyCode);
                          expect(data.payload.transportContent.transportDetails.partneredLtlData.amazonCalculatedValue.value).to.be.a(SellingPartnerApiForFulfillmentInbound.BigDecimalType);
              
                    expect(data.payload.transportContent.transportDetails.partneredLtlData.previewPickupDate).to.be.a(SellingPartnerApiForFulfillmentInbound.DateStringType);
                        expect(data.payload.transportContent.transportDetails.partneredLtlData.previewDeliveryDate).to.be.a(SellingPartnerApiForFulfillmentInbound.DateStringType);
                        expect(data.payload.transportContent.transportDetails.partneredLtlData.previewFreightClass).to.be.a(SellingPartnerApiForFulfillmentInbound.SellerFreightClass);
                        expect(data.payload.transportContent.transportDetails.partneredLtlData.amazonReferenceId).to.be.a('string');
                    // expect(data.payload.transportContent.transportDetails.partneredLtlData.amazonReferenceId).to.be("");
                    expect(data.payload.transportContent.transportDetails.partneredLtlData.isBillOfLadingAvailable).to.be.a('boolean');
                    // expect(data.payload.transportContent.transportDetails.partneredLtlData.isBillOfLadingAvailable).to.be(false);
                    expect(data.payload.transportContent.transportDetails.partneredLtlData.partneredEstimate).to.be.a(SellingPartnerApiForFulfillmentInbound.PartneredEstimate);
                          expect(data.payload.transportContent.transportDetails.partneredLtlData.partneredEstimate.amount).to.be.a(SellingPartnerApiForFulfillmentInbound.Amount);
                            expect(data.payload.transportContent.transportDetails.partneredLtlData.partneredEstimate.amount.currencyCode).to.be.a(SellingPartnerApiForFulfillmentInbound.CurrencyCode);
                            expect(data.payload.transportContent.transportDetails.partneredLtlData.partneredEstimate.amount.value).to.be.a(SellingPartnerApiForFulfillmentInbound.BigDecimalType);
                
                      expect(data.payload.transportContent.transportDetails.partneredLtlData.partneredEstimate.confirmDeadline).to.be.a(SellingPartnerApiForFulfillmentInbound.TimeStampStringType);
                          expect(data.payload.transportContent.transportDetails.partneredLtlData.partneredEstimate.voidDeadline).to.be.a(SellingPartnerApiForFulfillmentInbound.TimeStampStringType);
              
                    expect(data.payload.transportContent.transportDetails.partneredLtlData.carrierName).to.be.a('string');
                    // expect(data.payload.transportContent.transportDetails.partneredLtlData.carrierName).to.be("");
                  expect(data.payload.transportContent.transportDetails.nonPartneredLtlData).to.be.a(SellingPartnerApiForFulfillmentInbound.NonPartneredLtlDataOutput);
                        expect(data.payload.transportContent.transportDetails.nonPartneredLtlData.carrierName).to.be.a('string');
                    // expect(data.payload.transportContent.transportDetails.nonPartneredLtlData.carrierName).to.be("");
                    expect(data.payload.transportContent.transportDetails.nonPartneredLtlData.proNumber).to.be.a(SellingPartnerApiForFulfillmentInbound.ProNumber);
            
                expect(data.payload.transportContent.transportResult).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportResult);
                      expect(data.payload.transportContent.transportResult.transportStatus).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportStatus);
                      expect(data.payload.transportContent.transportResult.errorCode).to.be.a('string');
                  // expect(data.payload.transportContent.transportResult.errorCode).to.be("");
                  expect(data.payload.transportContent.transportResult.errorDescription).to.be.a('string');
                  // expect(data.payload.transportContent.transportResult.errorDescription).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putTransportDetails', function() {
        it('should call putTransportDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for putTransportDetails call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var body = new SellingPartnerApiForFulfillmentInbound.PutTransportDetailsRequest();
          body.isPartnered = false;
          body.shipmentType = new SellingPartnerApiForFulfillmentInbound.ShipmentType();
          body.transportDetails = new SellingPartnerApiForFulfillmentInbound.TransportDetailInput();
          body.transportDetails.partneredSmallParcelData = new SellingPartnerApiForFulfillmentInbound.PartneredSmallParcelDataInput();
          body.transportDetails.partneredSmallParcelData.packageList = new SellingPartnerApiForFulfillmentInbound.PartneredSmallParcelPackageInputList();
          body.transportDetails.partneredSmallParcelData.carrierName = "";
          body.transportDetails.nonPartneredSmallParcelData = new SellingPartnerApiForFulfillmentInbound.NonPartneredSmallParcelDataInput();
          body.transportDetails.nonPartneredSmallParcelData.carrierName = "";
          body.transportDetails.nonPartneredSmallParcelData.packageList = new SellingPartnerApiForFulfillmentInbound.NonPartneredSmallParcelPackageInputList();
          body.transportDetails.partneredLtlData = new SellingPartnerApiForFulfillmentInbound.PartneredLtlDataInput();
          body.transportDetails.partneredLtlData.contact = new SellingPartnerApiForFulfillmentInbound.Contact();
          body.transportDetails.partneredLtlData.contact.name = "";
          body.transportDetails.partneredLtlData.contact.phone = "";
          body.transportDetails.partneredLtlData.contact.email = "";
          body.transportDetails.partneredLtlData.contact.fax = "";
          body.transportDetails.partneredLtlData.boxCount = new SellingPartnerApiForFulfillmentInbound.UnsignedIntType();
          body.transportDetails.partneredLtlData.sellerFreightClass = new SellingPartnerApiForFulfillmentInbound.SellerFreightClass();
          body.transportDetails.partneredLtlData.freightReadyDate = new SellingPartnerApiForFulfillmentInbound.DateStringType();
          body.transportDetails.partneredLtlData.palletList = new SellingPartnerApiForFulfillmentInbound.PalletList();
          body.transportDetails.partneredLtlData.totalWeight = new SellingPartnerApiForFulfillmentInbound.Weight();
          body.transportDetails.partneredLtlData.totalWeight.value = new SellingPartnerApiForFulfillmentInbound.BigDecimalType();
          body.transportDetails.partneredLtlData.totalWeight.unit = new SellingPartnerApiForFulfillmentInbound.UnitOfWeight();
          body.transportDetails.partneredLtlData.sellerDeclaredValue = new SellingPartnerApiForFulfillmentInbound.Amount();
          body.transportDetails.partneredLtlData.sellerDeclaredValue.currencyCode = new SellingPartnerApiForFulfillmentInbound.CurrencyCode();
          body.transportDetails.partneredLtlData.sellerDeclaredValue.value = new SellingPartnerApiForFulfillmentInbound.BigDecimalType();
          body.transportDetails.nonPartneredLtlData = new SellingPartnerApiForFulfillmentInbound.NonPartneredLtlDataInput();
          body.transportDetails.nonPartneredLtlData.carrierName = "";
          body.transportDetails.nonPartneredLtlData.proNumber = new SellingPartnerApiForFulfillmentInbound.ProNumber();

          instance.putTransportDetails(shipmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.PutTransportDetailsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.CommonTransportResult);
                  expect(data.payload.transportResult).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportResult);
                    expect(data.payload.transportResult.transportStatus).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportStatus);
                    expect(data.payload.transportResult.errorCode).to.be.a('string');
                // expect(data.payload.transportResult.errorCode).to.be("");
                expect(data.payload.transportResult.errorDescription).to.be.a('string');
                // expect(data.payload.transportResult.errorDescription).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateInboundShipment', function() {
        it('should call updateInboundShipment successfully', function(done) {
          // TODO: uncomment, update parameter values for updateInboundShipment call and complete the assertions
          /*
          var body = new SellingPartnerApiForFulfillmentInbound.InboundShipmentRequest();
          body.inboundShipmentHeader = new SellingPartnerApiForFulfillmentInbound.InboundShipmentHeader();
          body.inboundShipmentHeader.shipmentName = "";
          body.inboundShipmentHeader.shipFromAddress = new SellingPartnerApiForFulfillmentInbound.Address();
          body.inboundShipmentHeader.shipFromAddress.name = "";
          body.inboundShipmentHeader.shipFromAddress.addressLine1 = "";
          body.inboundShipmentHeader.shipFromAddress.addressLine2 = "";
          body.inboundShipmentHeader.shipFromAddress.districtOrCounty = "";
          body.inboundShipmentHeader.shipFromAddress.city = "";
          body.inboundShipmentHeader.shipFromAddress.stateOrProvinceCode = "";
          body.inboundShipmentHeader.shipFromAddress.countryCode = "";
          body.inboundShipmentHeader.shipFromAddress.postalCode = "";
          body.inboundShipmentHeader.destinationFulfillmentCenterId = "";
          body.inboundShipmentHeader.areCasesRequired = false;
          body.inboundShipmentHeader.shipmentStatus = new SellingPartnerApiForFulfillmentInbound.ShipmentStatus();
          body.inboundShipmentHeader.labelPrepPreference = new SellingPartnerApiForFulfillmentInbound.LabelPrepPreference();
          body.inboundShipmentHeader.intendedBoxContentsSource = new SellingPartnerApiForFulfillmentInbound.IntendedBoxContentsSource();
          body.inboundShipmentItems = new SellingPartnerApiForFulfillmentInbound.InboundShipmentItemList();
          body.marketplaceId = "";
          var shipmentId = "shipmentId_example";

          instance.updateInboundShipment(body, shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentResult);
                  expect(data.payload.shipmentId).to.be.a('string');
              // expect(data.payload.shipmentId).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('voidTransport', function() {
        it('should call voidTransport successfully', function(done) {
          // TODO: uncomment, update parameter values for voidTransport call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.voidTransport(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.VoidTransportResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.CommonTransportResult);
                  expect(data.payload.transportResult).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportResult);
                    expect(data.payload.transportResult.transportStatus).to.be.a(SellingPartnerApiForFulfillmentInbound.TransportStatus);
                    expect(data.payload.transportResult.errorCode).to.be.a('string');
                // expect(data.payload.transportResult.errorCode).to.be("");
                expect(data.payload.transportResult.errorDescription).to.be.a('string');
                // expect(data.payload.transportResult.errorDescription).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
