/*
 * The Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/finances_2024-06-19/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/finances_2024-06-19/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForFinances);
  }
}(this, function(expect, TheSellingPartnerApiForFinances) {
  'use strict';

  var instance;

  describe('finances_2024-06-19', function() {
    describe('Item', function() {
      beforeEach(function() {
        instance = new TheSellingPartnerApiForFinances.Item();
      });

      it('should create an instance of Item', function() {
        // TODO: update the code to test Item
        expect(instance).to.be.a(TheSellingPartnerApiForFinances.Item);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property relatedIdentifiers (base name: "relatedIdentifiers")', function() {
        // TODO: update the code to test the property relatedIdentifiers
        expect(instance).to.have.property('relatedIdentifiers');
        // expect(instance.relatedIdentifiers).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "totalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property breakdowns (base name: "breakdowns")', function() {
        // TODO: update the code to test the property breakdowns
        expect(instance).to.have.property('breakdowns');
        // expect(instance.breakdowns).to.be(expectedValueLiteral);
      });

      it('should have the property contexts (base name: "contexts")', function() {
        // TODO: update the code to test the property contexts
        expect(instance).to.have.property('contexts');
        // expect(instance.contexts).to.be(expectedValueLiteral);
      });

    });
  });

}));
