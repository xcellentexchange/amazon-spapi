/*
 * Selling Partner API for Shipment Invoicing
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/shipmentInvoicingV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/shipmentInvoicingV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForShipmentInvoicing);
  }
}(this, function(expect, SellingPartnerApiForShipmentInvoicing) {
  'use strict';

  var instance;

  describe('shipmentInvoicingV0', function() {
    describe('ShipmentItem', function() {
      beforeEach(function() {
        instance = new SellingPartnerApiForShipmentInvoicing.ShipmentItem();
      });

      it('should create an instance of ShipmentItem', function() {
        // TODO: update the code to test ShipmentItem
        expect(instance).to.be.a(SellingPartnerApiForShipmentInvoicing.ShipmentItem);
      });

      it('should have the property ASIN (base name: "ASIN")', function() {
        // TODO: update the code to test the property ASIN
        expect(instance).to.have.property('ASIN');
        // expect(instance.ASIN).to.be(expectedValueLiteral);
      });

      it('should have the property sellerSKU (base name: "SellerSKU")', function() {
        // TODO: update the code to test the property sellerSKU
        expect(instance).to.have.property('sellerSKU');
        // expect(instance.sellerSKU).to.be(expectedValueLiteral);
      });

      it('should have the property orderItemId (base name: "OrderItemId")', function() {
        // TODO: update the code to test the property orderItemId
        expect(instance).to.have.property('orderItemId');
        // expect(instance.orderItemId).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "Title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property quantityOrdered (base name: "QuantityOrdered")', function() {
        // TODO: update the code to test the property quantityOrdered
        expect(instance).to.have.property('quantityOrdered');
        // expect(instance.quantityOrdered).to.be(expectedValueLiteral);
      });

      it('should have the property itemPrice (base name: "ItemPrice")', function() {
        // TODO: update the code to test the property itemPrice
        expect(instance).to.have.property('itemPrice');
        // expect(instance.itemPrice).to.be(expectedValueLiteral);
      });

      it('should have the property shippingPrice (base name: "ShippingPrice")', function() {
        // TODO: update the code to test the property shippingPrice
        expect(instance).to.have.property('shippingPrice');
        // expect(instance.shippingPrice).to.be(expectedValueLiteral);
      });

      it('should have the property giftWrapPrice (base name: "GiftWrapPrice")', function() {
        // TODO: update the code to test the property giftWrapPrice
        expect(instance).to.have.property('giftWrapPrice');
        // expect(instance.giftWrapPrice).to.be(expectedValueLiteral);
      });

      it('should have the property shippingDiscount (base name: "ShippingDiscount")', function() {
        // TODO: update the code to test the property shippingDiscount
        expect(instance).to.have.property('shippingDiscount');
        // expect(instance.shippingDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property promotionDiscount (base name: "PromotionDiscount")', function() {
        // TODO: update the code to test the property promotionDiscount
        expect(instance).to.have.property('promotionDiscount');
        // expect(instance.promotionDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property serialNumbers (base name: "SerialNumbers")', function() {
        // TODO: update the code to test the property serialNumbers
        expect(instance).to.have.property('serialNumbers');
        // expect(instance.serialNumbers).to.be(expectedValueLiteral);
      });

    });
  });

}));
