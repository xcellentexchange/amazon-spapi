/*
 * Selling Partner API for Shipment Invoicing
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/shipmentInvoicingV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/shipmentInvoicingV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForShipmentInvoicing);
  }
}(this, function(expect, SellingPartnerApiForShipmentInvoicing) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForShipmentInvoicing.ShipmentInvoiceApi();
  });

  describe('shipmentInvoicingV0', function() {
    describe('ShipmentInvoiceApi', function() {
      describe('getInvoiceStatus', function() {
        it('should call getInvoiceStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoiceStatus call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.getInvoiceStatus(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipmentInvoicing.GetInvoiceStatusResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipmentInvoicing.ShipmentInvoiceStatusResponse);
                  expect(data.payload.shipments).to.be.a(SellingPartnerApiForShipmentInvoicing.ShipmentInvoiceStatusInfo);
                    expect(data.payload.shipments.amazonShipmentId).to.be.a('string');
                // expect(data.payload.shipments.amazonShipmentId).to.be("");
                expect(data.payload.shipments.invoiceStatus).to.be.a(SellingPartnerApiForShipmentInvoicing.ShipmentInvoiceStatus);
        
            expect(data.errors).to.be.a(SellingPartnerApiForShipmentInvoicing.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipmentDetails', function() {
        it('should call getShipmentDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentDetails call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.getShipmentDetails(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipmentInvoicing.GetShipmentDetailsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForShipmentInvoicing.ShipmentDetail);
                  expect(data.payload.warehouseId).to.be.a('string');
              // expect(data.payload.warehouseId).to.be("");
              expect(data.payload.amazonOrderId).to.be.a('string');
              // expect(data.payload.amazonOrderId).to.be("");
              expect(data.payload.amazonShipmentId).to.be.a('string');
              // expect(data.payload.amazonShipmentId).to.be("");
              expect(data.payload.purchaseDate).to.be.a(Date);
              // expect(data.payload.purchaseDate).to.be(new Date());
              expect(data.payload.shippingAddress).to.be.a(SellingPartnerApiForShipmentInvoicing.Address);
                    expect(data.payload.shippingAddress.name).to.be.a('string');
                // expect(data.payload.shippingAddress.name).to.be("");
                expect(data.payload.shippingAddress.addressLine1).to.be.a('string');
                // expect(data.payload.shippingAddress.addressLine1).to.be("");
                expect(data.payload.shippingAddress.addressLine2).to.be.a('string');
                // expect(data.payload.shippingAddress.addressLine2).to.be("");
                expect(data.payload.shippingAddress.addressLine3).to.be.a('string');
                // expect(data.payload.shippingAddress.addressLine3).to.be("");
                expect(data.payload.shippingAddress.city).to.be.a('string');
                // expect(data.payload.shippingAddress.city).to.be("");
                expect(data.payload.shippingAddress.county).to.be.a('string');
                // expect(data.payload.shippingAddress.county).to.be("");
                expect(data.payload.shippingAddress.district).to.be.a('string');
                // expect(data.payload.shippingAddress.district).to.be("");
                expect(data.payload.shippingAddress.stateOrRegion).to.be.a('string');
                // expect(data.payload.shippingAddress.stateOrRegion).to.be("");
                expect(data.payload.shippingAddress.postalCode).to.be.a('string');
                // expect(data.payload.shippingAddress.postalCode).to.be("");
                expect(data.payload.shippingAddress.countryCode).to.be.a('string');
                // expect(data.payload.shippingAddress.countryCode).to.be("");
                expect(data.payload.shippingAddress.phone).to.be.a('string');
                // expect(data.payload.shippingAddress.phone).to.be("");
                expect(data.payload.shippingAddress.addressType).to.be.a(SellingPartnerApiForShipmentInvoicing.AddressTypeEnum);
        
              expect(data.payload.paymentMethodDetails).to.be.a(SellingPartnerApiForShipmentInvoicing.PaymentMethodDetailItemList);
                  expect(data.payload.marketplaceId).to.be.a('string');
              // expect(data.payload.marketplaceId).to.be("");
              expect(data.payload.sellerId).to.be.a('string');
              // expect(data.payload.sellerId).to.be("");
              expect(data.payload.buyerName).to.be.a('string');
              // expect(data.payload.buyerName).to.be("");
              expect(data.payload.buyerCounty).to.be.a('string');
              // expect(data.payload.buyerCounty).to.be("");
              expect(data.payload.buyerTaxInfo).to.be.a(SellingPartnerApiForShipmentInvoicing.BuyerTaxInfo);
                    expect(data.payload.buyerTaxInfo.companyLegalName).to.be.a('string');
                // expect(data.payload.buyerTaxInfo.companyLegalName).to.be("");
                expect(data.payload.buyerTaxInfo.taxingRegion).to.be.a('string');
                // expect(data.payload.buyerTaxInfo.taxingRegion).to.be("");
                expect(data.payload.buyerTaxInfo.taxClassifications).to.be.a(SellingPartnerApiForShipmentInvoicing.TaxClassificationList);
        
              expect(data.payload.marketplaceTaxInfo).to.be.a(SellingPartnerApiForShipmentInvoicing.MarketplaceTaxInfo);
                    expect(data.payload.marketplaceTaxInfo.companyLegalName).to.be.a('string');
                // expect(data.payload.marketplaceTaxInfo.companyLegalName).to.be("");
                expect(data.payload.marketplaceTaxInfo.taxingRegion).to.be.a('string');
                // expect(data.payload.marketplaceTaxInfo.taxingRegion).to.be("");
                expect(data.payload.marketplaceTaxInfo.taxClassifications).to.be.a(SellingPartnerApiForShipmentInvoicing.TaxClassificationList);
        
              expect(data.payload.sellerDisplayName).to.be.a('string');
              // expect(data.payload.sellerDisplayName).to.be("");
              expect(data.payload.shipmentItems).to.be.a(SellingPartnerApiForShipmentInvoicing.ShipmentItems);
      
            expect(data.errors).to.be.a(SellingPartnerApiForShipmentInvoicing.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitInvoice', function() {
        it('should call submitInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for submitInvoice call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var body = new SellingPartnerApiForShipmentInvoicing.SubmitInvoiceRequest();
          body.invoiceContent = ;
          body.marketplaceId = "";
          body.contentMD5Value = "";

          instance.submitInvoice(shipmentId, body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForShipmentInvoicing.SubmitInvoiceResponse);
            expect(data.errors).to.be.a(SellingPartnerApiForShipmentInvoicing.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
