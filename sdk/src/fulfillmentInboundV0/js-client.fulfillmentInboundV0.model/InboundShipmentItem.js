/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {DateStringType} from './DateStringType.js';
import {PrepDetailsList} from './PrepDetailsList.js';
import {Quantity} from './Quantity.js';

/**
 * The InboundShipmentItem model module.
 * @module fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentItem
 * @version v0
 */
export class InboundShipmentItem {
  /**
   * Constructs a new <code>InboundShipmentItem</code>.
   * Item information for an inbound shipment. Submitted with a call to the createInboundShipment or updateInboundShipment operation.
   * @alias module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentItem
   * @class
   * @param sellerSKU {String} The seller SKU of the item.
   * @param quantityShipped {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/Quantity} The item quantity that you are shipping.
   */
  constructor(sellerSKU, quantityShipped) {
    this.sellerSKU = sellerSKU;
    this.quantityShipped = quantityShipped;
  }

  /**
   * Constructs a <code>InboundShipmentItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentItem} obj Optional instance to populate.
   * @return {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentItem} The populated <code>InboundShipmentItem</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new InboundShipmentItem();
      if (data.hasOwnProperty('ShipmentId'))
        obj.shipmentId = ApiClient.convertToType(data['ShipmentId'], 'String');
      if (data.hasOwnProperty('SellerSKU'))
        obj.sellerSKU = ApiClient.convertToType(data['SellerSKU'], 'String');
      if (data.hasOwnProperty('FulfillmentNetworkSKU'))
        obj.fulfillmentNetworkSKU = ApiClient.convertToType(data['FulfillmentNetworkSKU'], 'String');
      if (data.hasOwnProperty('QuantityShipped'))
        obj.quantityShipped = Quantity.constructFromObject(data['QuantityShipped']);
      if (data.hasOwnProperty('QuantityReceived'))
        obj.quantityReceived = Quantity.constructFromObject(data['QuantityReceived']);
      if (data.hasOwnProperty('QuantityInCase'))
        obj.quantityInCase = Quantity.constructFromObject(data['QuantityInCase']);
      if (data.hasOwnProperty('ReleaseDate'))
        obj.releaseDate = DateStringType.constructFromObject(data['ReleaseDate']);
      if (data.hasOwnProperty('PrepDetailsList'))
        obj.prepDetailsList = PrepDetailsList.constructFromObject(data['PrepDetailsList']);
    }
    return obj;
  }
}

/**
 * A shipment identifier originally returned by the createInboundShipmentPlan operation.
 * @member {String} shipmentId
 */
InboundShipmentItem.prototype.shipmentId = undefined;

/**
 * The seller SKU of the item.
 * @member {String} sellerSKU
 */
InboundShipmentItem.prototype.sellerSKU = undefined;

/**
 * Amazon's fulfillment network SKU of the item.
 * @member {String} fulfillmentNetworkSKU
 */
InboundShipmentItem.prototype.fulfillmentNetworkSKU = undefined;

/**
 * The item quantity that you are shipping.
 * @member {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/Quantity} quantityShipped
 */
InboundShipmentItem.prototype.quantityShipped = undefined;

/**
 * The item quantity that has been received at an Amazon fulfillment center.
 * @member {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/Quantity} quantityReceived
 */
InboundShipmentItem.prototype.quantityReceived = undefined;

/**
 * The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of boxes in the inbound shipment equals QuantityShipped. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipment or the updateInboundShipment operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment.
 * @member {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/Quantity} quantityInCase
 */
InboundShipmentItem.prototype.quantityInCase = undefined;

/**
 * The date that a pre-order item will be available for sale.
 * @member {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/DateStringType} releaseDate
 */
InboundShipmentItem.prototype.releaseDate = undefined;

/**
 * @member {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/PrepDetailsList} prepDetailsList
 */
InboundShipmentItem.prototype.prepDetailsList = undefined;


