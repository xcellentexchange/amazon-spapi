/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The Address model module.
 * @module fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/Address
 * @version v0
 */
export class Address {
  /**
   * Constructs a new <code>Address</code>.
   * Specific details to identify a place.
   * @alias module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/Address
   * @class
   * @param name {String} Name of the individual or business.
   * @param addressLine1 {String} The street address information.
   * @param city {String} The city.
   * @param stateOrProvinceCode {String} The state or province code.  If state or province codes are used in your marketplace, it is recommended that you include one with your request. This helps Amazon to select the most appropriate Amazon fulfillment center for your inbound shipment plan.
   * @param countryCode {String} The country code in two-character ISO 3166-1 alpha-2 format.
   * @param postalCode {String} The postal code.  If postal codes are used in your marketplace, we recommended that you include one with your request. This helps Amazon select the most appropriate Amazon fulfillment center for the inbound shipment plan.
   */
  constructor(name, addressLine1, city, stateOrProvinceCode, countryCode, postalCode) {
    this.name = name;
    this.addressLine1 = addressLine1;
    this.city = city;
    this.stateOrProvinceCode = stateOrProvinceCode;
    this.countryCode = countryCode;
    this.postalCode = postalCode;
  }

  /**
   * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/Address} obj Optional instance to populate.
   * @return {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/Address} The populated <code>Address</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Address();
      if (data.hasOwnProperty('Name'))
        obj.name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('AddressLine1'))
        obj.addressLine1 = ApiClient.convertToType(data['AddressLine1'], 'String');
      if (data.hasOwnProperty('AddressLine2'))
        obj.addressLine2 = ApiClient.convertToType(data['AddressLine2'], 'String');
      if (data.hasOwnProperty('DistrictOrCounty'))
        obj.districtOrCounty = ApiClient.convertToType(data['DistrictOrCounty'], 'String');
      if (data.hasOwnProperty('City'))
        obj.city = ApiClient.convertToType(data['City'], 'String');
      if (data.hasOwnProperty('StateOrProvinceCode'))
        obj.stateOrProvinceCode = ApiClient.convertToType(data['StateOrProvinceCode'], 'String');
      if (data.hasOwnProperty('CountryCode'))
        obj.countryCode = ApiClient.convertToType(data['CountryCode'], 'String');
      if (data.hasOwnProperty('PostalCode'))
        obj.postalCode = ApiClient.convertToType(data['PostalCode'], 'String');
    }
    return obj;
  }
}

/**
 * Name of the individual or business.
 * @member {String} name
 */
Address.prototype.name = undefined;

/**
 * The street address information.
 * @member {String} addressLine1
 */
Address.prototype.addressLine1 = undefined;

/**
 * Additional street address information, if required.
 * @member {String} addressLine2
 */
Address.prototype.addressLine2 = undefined;

/**
 * The district or county.
 * @member {String} districtOrCounty
 */
Address.prototype.districtOrCounty = undefined;

/**
 * The city.
 * @member {String} city
 */
Address.prototype.city = undefined;

/**
 * The state or province code.  If state or province codes are used in your marketplace, it is recommended that you include one with your request. This helps Amazon to select the most appropriate Amazon fulfillment center for your inbound shipment plan.
 * @member {String} stateOrProvinceCode
 */
Address.prototype.stateOrProvinceCode = undefined;

/**
 * The country code in two-character ISO 3166-1 alpha-2 format.
 * @member {String} countryCode
 */
Address.prototype.countryCode = undefined;

/**
 * The postal code.  If postal codes are used in your marketplace, we recommended that you include one with your request. This helps Amazon select the most appropriate Amazon fulfillment center for the inbound shipment plan.
 * @member {String} postalCode
 */
Address.prototype.postalCode = undefined;


