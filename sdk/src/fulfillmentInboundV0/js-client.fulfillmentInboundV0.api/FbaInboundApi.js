/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {ConfirmPreorderResponse} from '../js-client.fulfillmentInboundV0.model/ConfirmPreorderResponse.js';
import {ConfirmTransportResponse} from '../js-client.fulfillmentInboundV0.model/ConfirmTransportResponse.js';
import {CreateInboundShipmentPlanRequest} from '../js-client.fulfillmentInboundV0.model/CreateInboundShipmentPlanRequest.js';
import {CreateInboundShipmentPlanResponse} from '../js-client.fulfillmentInboundV0.model/CreateInboundShipmentPlanResponse.js';
import {EstimateTransportResponse} from '../js-client.fulfillmentInboundV0.model/EstimateTransportResponse.js';
import {GetBillOfLadingResponse} from '../js-client.fulfillmentInboundV0.model/GetBillOfLadingResponse.js';
import {GetLabelsResponse} from '../js-client.fulfillmentInboundV0.model/GetLabelsResponse.js';
import {GetPreorderInfoResponse} from '../js-client.fulfillmentInboundV0.model/GetPreorderInfoResponse.js';
import {GetPrepInstructionsResponse} from '../js-client.fulfillmentInboundV0.model/GetPrepInstructionsResponse.js';
import {GetShipmentItemsResponse} from '../js-client.fulfillmentInboundV0.model/GetShipmentItemsResponse.js';
import {GetShipmentsResponse} from '../js-client.fulfillmentInboundV0.model/GetShipmentsResponse.js';
import {GetTransportDetailsResponse} from '../js-client.fulfillmentInboundV0.model/GetTransportDetailsResponse.js';
import {InboundShipmentRequest} from '../js-client.fulfillmentInboundV0.model/InboundShipmentRequest.js';
import {InboundShipmentResponse} from '../js-client.fulfillmentInboundV0.model/InboundShipmentResponse.js';
import {PutTransportDetailsRequest} from '../js-client.fulfillmentInboundV0.model/PutTransportDetailsRequest.js';
import {PutTransportDetailsResponse} from '../js-client.fulfillmentInboundV0.model/PutTransportDetailsResponse.js';
import {VoidTransportResponse} from '../js-client.fulfillmentInboundV0.model/VoidTransportResponse.js';

/**
* FbaInbound service.
* @module fulfillmentInboundV0/js-client.fulfillmentInboundV0.api/FbaInboundApi
* @version v0
*/
export class FbaInboundApi {

    /**
    * Constructs a new FbaInboundApi. 
    * @alias module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.api/FbaInboundApi
    * @class
    * @param {module:fulfillmentInboundV0/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:fulfillmentInboundV0/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @param {Date} needByDate Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace the shipment is tied to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/ConfirmPreorderResponse} and HTTP response
     */
    confirmPreorderWithHttpInfo(shipmentId, needByDate, marketplaceId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling confirmPreorder");
      }

      // verify the required parameter 'needByDate' is set
      if (needByDate === undefined || needByDate === null) {
        throw new Error("Missing the required parameter 'needByDate' when calling confirmPreorder");
      }

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling confirmPreorder");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
        'NeedByDate': needByDate,
        'MarketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfirmPreorderResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/preorder/confirm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @param {Date} needByDate Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace the shipment is tied to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/ConfirmPreorderResponse}
     */
    confirmPreorder(shipmentId, needByDate, marketplaceId) {
      return this.confirmPreorderWithHttpInfo(shipmentId, needByDate, marketplaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller's account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/ConfirmTransportResponse} and HTTP response
     */
    confirmTransportWithHttpInfo(shipmentId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling confirmTransport");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfirmTransportResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/transport/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller's account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/ConfirmTransportResponse}
     */
    confirmTransport(shipmentId) {
      return this.confirmTransportWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentRequest} body The request schema for the InboundShipmentRequest operation.
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentResponse} and HTTP response
     */
    createInboundShipmentWithHttpInfo(body, shipmentId) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInboundShipment");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling createInboundShipment");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InboundShipmentResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentRequest} body The request schema for the InboundShipmentRequest operation.
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentResponse}
     */
    createInboundShipment(body, shipmentId) {
      return this.createInboundShipmentWithHttpInfo(body, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon's fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/CreateInboundShipmentPlanRequest} body The request schema for the CreateInboundShipmentPlanRequest operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/CreateInboundShipmentPlanResponse} and HTTP response
     */
    createInboundShipmentPlanWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInboundShipmentPlan");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInboundShipmentPlanResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon's fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/CreateInboundShipmentPlanRequest} body The request schema for the CreateInboundShipmentPlanRequest operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/CreateInboundShipmentPlanResponse}
     */
    createInboundShipmentPlan(body) {
      return this.createInboundShipmentPlanWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/EstimateTransportResponse} and HTTP response
     */
    estimateTransportWithHttpInfo(shipmentId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling estimateTransport");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EstimateTransportResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/transport/estimate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/EstimateTransportResponse}
     */
    estimateTransport(shipmentId) {
      return this.estimateTransportWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetBillOfLadingResponse} and HTTP response
     */
    getBillOfLadingWithHttpInfo(shipmentId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getBillOfLading");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBillOfLadingResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/billOfLading', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetBillOfLadingResponse}
     */
    getBillOfLading(shipmentId) {
      return this.getBillOfLadingWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String} pageType The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String} labelType The type of labels requested. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.numberOfPackages The number of packages in the shipment.
     * @param {Array.<String>} opts.packageLabelsToPrint A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then `PackageLabelsToPrint` must match the `CartonId` values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then `PackageLabelsToPrint` must match the `boxID` values from the [`listShipmentBoxes`](https://developer-docs.amazon.com/sp-api/docs/fulfillment-inbound-api-v2024-03-20-reference#listshipmentboxes) response. If these values do not match as required, the operation returns the `IncorrectPackageIdentifier` error code.
     * @param {Number} opts.numberOfPallets The number of pallets in the shipment. This returns four identical labels for each pallet.
     * @param {Number} opts.pageSize The page size for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000.
     * @param {Number} opts.pageStartIndex The page start index for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetLabelsResponse} and HTTP response
     */
    getLabelsWithHttpInfo(shipmentId, pageType, labelType, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getLabels");
      }

      // verify the required parameter 'pageType' is set
      if (pageType === undefined || pageType === null) {
        throw new Error("Missing the required parameter 'pageType' when calling getLabels");
      }

      // verify the required parameter 'labelType' is set
      if (labelType === undefined || labelType === null) {
        throw new Error("Missing the required parameter 'labelType' when calling getLabels");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
        'PageType': pageType,
        'LabelType': labelType,
        'NumberOfPackages': opts['numberOfPackages'],
        'PackageLabelsToPrint': this.apiClient.buildCollectionParam(opts['packageLabelsToPrint'], 'csv'),
        'NumberOfPallets': opts['numberOfPallets'],
        'PageSize': opts['pageSize'],
        'PageStartIndex': opts['pageStartIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLabelsResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String} pageType The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String} labelType The type of labels requested. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.numberOfPackages The number of packages in the shipment.
     * @param {Array.<String>} opts.packageLabelsToPrint A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then `PackageLabelsToPrint` must match the `CartonId` values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then `PackageLabelsToPrint` must match the `boxID` values from the [`listShipmentBoxes`](https://developer-docs.amazon.com/sp-api/docs/fulfillment-inbound-api-v2024-03-20-reference#listshipmentboxes) response. If these values do not match as required, the operation returns the `IncorrectPackageIdentifier` error code.
     * @param {Number} opts.numberOfPallets The number of pallets in the shipment. This returns four identical labels for each pallet.
     * @param {Number} opts.pageSize The page size for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000.
     * @param {Number} opts.pageStartIndex The page start index for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetLabelsResponse}
     */
    getLabels(shipmentId, pageType, labelType, opts) {
      return this.getLabelsWithHttpInfo(shipmentId, pageType, labelType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace the shipment is tied to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetPreorderInfoResponse} and HTTP response
     */
    getPreorderInfoWithHttpInfo(shipmentId, marketplaceId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getPreorderInfo");
      }

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getPreorderInfo");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
        'MarketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPreorderInfoResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/preorder', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace the shipment is tied to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetPreorderInfoResponse}
     */
    getPreorderInfo(shipmentId, marketplaceId) {
      return this.getPreorderInfoWithHttpInfo(shipmentId, marketplaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon's fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipToCountryCode The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sellerSKUList A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.
     * @param {Array.<String>} opts.aSINList A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetPrepInstructionsResponse} and HTTP response
     */
    getPrepInstructionsWithHttpInfo(shipToCountryCode, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'shipToCountryCode' is set
      if (shipToCountryCode === undefined || shipToCountryCode === null) {
        throw new Error("Missing the required parameter 'shipToCountryCode' when calling getPrepInstructions");
      }


      let pathParams = {
      };
      let queryParams = {
        'ShipToCountryCode': shipToCountryCode,
        'SellerSKUList': this.apiClient.buildCollectionParam(opts['sellerSKUList'], 'csv'),
        'ASINList': this.apiClient.buildCollectionParam(opts['aSINList'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPrepInstructionsResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/prepInstructions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon's fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipToCountryCode The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sellerSKUList A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.
     * @param {Array.<String>} opts.aSINList A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetPrepInstructionsResponse}
     */
    getPrepInstructions(shipToCountryCode, opts) {
      return this.getPrepInstructionsWithHttpInfo(shipToCountryCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String} queryType Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.lastUpdatedAfter A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.
     * @param {Date} opts.lastUpdatedBefore A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.
     * @param {String} opts.nextToken A string token returned in the response to your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetShipmentItemsResponse} and HTTP response
     */
    getShipmentItemsWithHttpInfo(queryType, marketplaceId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'queryType' is set
      if (queryType === undefined || queryType === null) {
        throw new Error("Missing the required parameter 'queryType' when calling getShipmentItems");
      }

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getShipmentItems");
      }


      let pathParams = {
      };
      let queryParams = {
        'LastUpdatedAfter': opts['lastUpdatedAfter'],
        'LastUpdatedBefore': opts['lastUpdatedBefore'],
        'QueryType': queryType,
        'NextToken': opts['nextToken'],
        'MarketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetShipmentItemsResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipmentItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String} queryType Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.lastUpdatedAfter A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.
     * @param {Date} opts.lastUpdatedBefore A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.
     * @param {String} opts.nextToken A string token returned in the response to your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetShipmentItemsResponse}
     */
    getShipmentItems(queryType, marketplaceId, opts) {
      return this.getShipmentItemsWithHttpInfo(queryType, marketplaceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier used for selecting items in a specific inbound shipment.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetShipmentItemsResponse} and HTTP response
     */
    getShipmentItemsByShipmentIdWithHttpInfo(shipmentId, marketplaceId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getShipmentItemsByShipmentId");
      }

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getShipmentItemsByShipmentId");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
        'MarketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetShipmentItemsResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier used for selecting items in a specific inbound shipment.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetShipmentItemsResponse}
     */
    getShipmentItemsByShipmentId(shipmentId, marketplaceId) {
      return this.getShipmentItemsByShipmentIdWithHttpInfo(shipmentId, marketplaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String} queryType Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String>} opts.shipmentStatusList A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify.
     * @param {Array.<String>} opts.shipmentIdList A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.
     * @param {Date} opts.lastUpdatedAfter A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.
     * @param {Date} opts.lastUpdatedBefore A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.
     * @param {String} opts.nextToken A string token returned in the response to your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetShipmentsResponse} and HTTP response
     */
    getShipmentsWithHttpInfo(queryType, marketplaceId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'queryType' is set
      if (queryType === undefined || queryType === null) {
        throw new Error("Missing the required parameter 'queryType' when calling getShipments");
      }

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getShipments");
      }


      let pathParams = {
      };
      let queryParams = {
        'ShipmentStatusList': this.apiClient.buildCollectionParam(opts['shipmentStatusList'], 'csv'),
        'ShipmentIdList': this.apiClient.buildCollectionParam(opts['shipmentIdList'], 'csv'),
        'LastUpdatedAfter': opts['lastUpdatedAfter'],
        'LastUpdatedBefore': opts['lastUpdatedBefore'],
        'QueryType': queryType,
        'NextToken': opts['nextToken'],
        'MarketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetShipmentsResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String} queryType Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/String>} opts.shipmentStatusList A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify.
     * @param {Array.<String>} opts.shipmentIdList A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.
     * @param {Date} opts.lastUpdatedAfter A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.
     * @param {Date} opts.lastUpdatedBefore A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.
     * @param {String} opts.nextToken A string token returned in the response to your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetShipmentsResponse}
     */
    getShipments(queryType, marketplaceId, opts) {
      return this.getShipmentsWithHttpInfo(queryType, marketplaceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetTransportDetailsResponse} and HTTP response
     */
    getTransportDetailsWithHttpInfo(shipmentId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getTransportDetails");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTransportDetailsResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/transport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/GetTransportDetailsResponse}
     */
    getTransportDetails(shipmentId) {
      return this.getTransportDetailsWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/PutTransportDetailsRequest} body The request schema for the PutTransportDetailsRequest operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/PutTransportDetailsResponse} and HTTP response
     */
    putTransportDetailsWithHttpInfo(shipmentId, body) {
      let postBody = body;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling putTransportDetails");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTransportDetails");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutTransportDetailsResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/transport', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/PutTransportDetailsRequest} body The request schema for the PutTransportDetailsRequest operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/PutTransportDetailsResponse}
     */
    putTransportDetails(shipmentId, body) {
      return this.putTransportDetailsWithHttpInfo(shipmentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates or removes items from the inbound shipment identified by the specified shipment identifier. Adding new items is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentRequest} body The request schema for the InboundShipmentRequest operation.
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentResponse} and HTTP response
     */
    updateInboundShipmentWithHttpInfo(body, shipmentId) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInboundShipment");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling updateInboundShipment");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InboundShipmentResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Updates or removes items from the inbound shipment identified by the specified shipment identifier. Adding new items is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentRequest} body The request schema for the InboundShipmentRequest operation.
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/InboundShipmentResponse}
     */
    updateInboundShipment(body, shipmentId) {
      return this.updateInboundShipmentWithHttpInfo(body, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/VoidTransportResponse} and HTTP response
     */
    voidTransportWithHttpInfo(shipmentId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling voidTransport");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VoidTransportResponse;

      return this.apiClient.callApi(
        '/fba/inbound/v0/shipments/{shipmentId}/transport/void', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentInboundV0/js-client.fulfillmentInboundV0.model/VoidTransportResponse}
     */
    voidTransport(shipmentId) {
      return this.voidTransportWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
