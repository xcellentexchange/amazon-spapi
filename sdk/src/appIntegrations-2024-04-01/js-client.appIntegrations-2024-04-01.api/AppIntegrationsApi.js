/*
 * The Selling Partner API for third party application integrations.
 * With the AppIntegrations API v2024-04-01, you can send notifications to Amazon Selling Partners and display the notifications in Seller Central.
 *
 * OpenAPI spec version: 2024-04-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {CreateNotificationRequest} from '../js-client.appIntegrations-2024-04-01.model/CreateNotificationRequest.js';
import {CreateNotificationResponse} from '../js-client.appIntegrations-2024-04-01.model/CreateNotificationResponse.js';
import {DeleteNotificationsRequest} from '../js-client.appIntegrations-2024-04-01.model/DeleteNotificationsRequest.js';
import {ErrorList} from '../js-client.appIntegrations-2024-04-01.model/ErrorList.js';
import {RecordActionFeedbackRequest} from '../js-client.appIntegrations-2024-04-01.model/RecordActionFeedbackRequest.js';

/**
* AppIntegrations service.
* @module appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.api/AppIntegrationsApi
* @version 2024-04-01
*/
export class AppIntegrationsApi {

    /**
    * Constructs a new AppIntegrationsApi. 
    * @alias module:appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.api/AppIntegrationsApi
    * @class
    * @param {module:appIntegrations-2024-04-01/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:appIntegrations-2024-04-01/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a notification for sellers in Seller Central.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.model/CreateNotificationRequest} body The request body for the `createNotification` operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.model/CreateNotificationResponse} and HTTP response
     */
    createNotificationWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createNotification");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNotificationResponse;

      return this.apiClient.callApi(
        '/appIntegrations/2024-04-01/notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Create a notification for sellers in Seller Central.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.model/CreateNotificationRequest} body The request body for the `createNotification` operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.model/CreateNotificationResponse}
     */
    createNotification(body) {
      return this.createNotificationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove your application's notifications from the Appstore notifications dashboard.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.model/DeleteNotificationsRequest} body The request body for the `deleteNotifications` operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteNotificationsWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteNotifications");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/appIntegrations/2024-04-01/notifications/deletion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Remove your application's notifications from the Appstore notifications dashboard.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.model/DeleteNotificationsRequest} body The request body for the `deleteNotifications` operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteNotifications(body) {
      return this.deleteNotificationsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Records the seller's response to a notification.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} notificationId A `notificationId` uniquely identifies a notification.
     * @param {module:appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.model/RecordActionFeedbackRequest} body The request body for the `recordActionFeedback` operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordActionFeedbackWithHttpInfo(notificationId, body) {
      let postBody = body;

      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling recordActionFeedback");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling recordActionFeedback");
      }


      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/appIntegrations/2024-04-01/notifications/{notificationId}/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Records the seller's response to a notification.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} notificationId A `notificationId` uniquely identifies a notification.
     * @param {module:appIntegrations-2024-04-01/js-client.appIntegrations-2024-04-01.model/RecordActionFeedbackRequest} body The request body for the `recordActionFeedback` operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordActionFeedback(notificationId, body) {
      return this.recordActionFeedbackWithHttpInfo(notificationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
