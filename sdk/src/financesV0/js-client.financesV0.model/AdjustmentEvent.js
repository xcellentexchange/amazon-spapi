/*
 * Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information that is relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range. 
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {AdjustmentItemList} from './AdjustmentItemList.js';
import {Currency} from './Currency.js';
import {ModelDate} from './ModelDate.js';

/**
 * The AdjustmentEvent model module.
 * @module financesV0/js-client.financesV0.model/AdjustmentEvent
 * @version v0
 */
export class AdjustmentEvent {
  /**
   * Constructs a new <code>AdjustmentEvent</code>.
   * An adjustment to the seller's account.
   * @alias module:financesV0/js-client.financesV0.model/AdjustmentEvent
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>AdjustmentEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:financesV0/js-client.financesV0.model/AdjustmentEvent} obj Optional instance to populate.
   * @return {module:financesV0/js-client.financesV0.model/AdjustmentEvent} The populated <code>AdjustmentEvent</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new AdjustmentEvent();
      if (data.hasOwnProperty('AdjustmentType'))
        obj.adjustmentType = ApiClient.convertToType(data['AdjustmentType'], 'String');
      if (data.hasOwnProperty('PostedDate'))
        obj.postedDate = ModelDate.constructFromObject(data['PostedDate']);
      if (data.hasOwnProperty('AdjustmentAmount'))
        obj.adjustmentAmount = Currency.constructFromObject(data['AdjustmentAmount']);
      if (data.hasOwnProperty('AdjustmentItemList'))
        obj.adjustmentItemList = AdjustmentItemList.constructFromObject(data['AdjustmentItemList']);
    }
    return obj;
  }
}

/**
 * The type of adjustment.  Possible values:  * `FBAInventoryReimbursement`: An FBA inventory reimbursement to a seller's account. This occurs if a seller's inventory is damaged. * `ReserveEvent`: A reserve event that is generated at the time a settlement period closes. This occurs when some money from a seller's account is held back. * `PostageBilling`: The amount paid by a seller for shipping labels. * `PostageRefund`: The reimbursement of shipping labels purchased for orders that were canceled or refunded. * `LostOrDamagedReimbursement`: An Amazon Easy Ship reimbursement to a seller's account for a package that we lost or damaged. * `CanceledButPickedUpReimbursement`: An Amazon Easy Ship reimbursement to a seller's account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace. * `ReimbursementClawback`: An Amazon Easy Ship reimbursement clawback from a seller's account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace. * `SellerRewards`: An award credited to a seller's account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace.
 * @member {String} adjustmentType
 */
AdjustmentEvent.prototype.adjustmentType = undefined;

/**
 * The date and time when the financial event was posted.
 * @member {module:financesV0/js-client.financesV0.model/ModelDate} postedDate
 */
AdjustmentEvent.prototype.postedDate = undefined;

/**
 * The amount adjusted as part of this event.
 * @member {module:financesV0/js-client.financesV0.model/Currency} adjustmentAmount
 */
AdjustmentEvent.prototype.adjustmentAmount = undefined;

/**
 * A list of information about adjustments to an account.
 * @member {module:financesV0/js-client.financesV0.model/AdjustmentItemList} adjustmentItemList
 */
AdjustmentEvent.prototype.adjustmentItemList = undefined;


