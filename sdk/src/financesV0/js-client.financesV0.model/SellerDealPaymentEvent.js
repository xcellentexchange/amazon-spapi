/*
 * Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information that is relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range. 
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Currency} from './Currency.js';
import {ModelDate} from './ModelDate.js';

/**
 * The SellerDealPaymentEvent model module.
 * @module financesV0/js-client.financesV0.model/SellerDealPaymentEvent
 * @version v0
 */
export class SellerDealPaymentEvent {
  /**
   * Constructs a new <code>SellerDealPaymentEvent</code>.
   * An event linked to the payment of a fee related to the specified deal.
   * @alias module:financesV0/js-client.financesV0.model/SellerDealPaymentEvent
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>SellerDealPaymentEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:financesV0/js-client.financesV0.model/SellerDealPaymentEvent} obj Optional instance to populate.
   * @return {module:financesV0/js-client.financesV0.model/SellerDealPaymentEvent} The populated <code>SellerDealPaymentEvent</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new SellerDealPaymentEvent();
      if (data.hasOwnProperty('postedDate'))
        obj.postedDate = ModelDate.constructFromObject(data['postedDate']);
      if (data.hasOwnProperty('dealId'))
        obj.dealId = ApiClient.convertToType(data['dealId'], 'String');
      if (data.hasOwnProperty('dealDescription'))
        obj.dealDescription = ApiClient.convertToType(data['dealDescription'], 'String');
      if (data.hasOwnProperty('eventType'))
        obj.eventType = ApiClient.convertToType(data['eventType'], 'String');
      if (data.hasOwnProperty('feeType'))
        obj.feeType = ApiClient.convertToType(data['feeType'], 'String');
      if (data.hasOwnProperty('feeAmount'))
        obj.feeAmount = Currency.constructFromObject(data['feeAmount']);
      if (data.hasOwnProperty('taxAmount'))
        obj.taxAmount = Currency.constructFromObject(data['taxAmount']);
      if (data.hasOwnProperty('totalAmount'))
        obj.totalAmount = Currency.constructFromObject(data['totalAmount']);
    }
    return obj;
  }
}

/**
 * The date and time when the financial event was posted.
 * @member {module:financesV0/js-client.financesV0.model/ModelDate} postedDate
 */
SellerDealPaymentEvent.prototype.postedDate = undefined;

/**
 * The unique identifier of the deal.
 * @member {String} dealId
 */
SellerDealPaymentEvent.prototype.dealId = undefined;

/**
 * The internal description of the deal.
 * @member {String} dealDescription
 */
SellerDealPaymentEvent.prototype.dealDescription = undefined;

/**
 * The type of event: `SellerDealComplete`.
 * @member {String} eventType
 */
SellerDealPaymentEvent.prototype.eventType = undefined;

/**
 * The type of fee: `RunLightningDealFee`.
 * @member {String} feeType
 */
SellerDealPaymentEvent.prototype.feeType = undefined;

/**
 * The monetary amount of the fee.
 * @member {module:financesV0/js-client.financesV0.model/Currency} feeAmount
 */
SellerDealPaymentEvent.prototype.feeAmount = undefined;

/**
 * The monetary amount of the tax applied.
 * @member {module:financesV0/js-client.financesV0.model/Currency} taxAmount
 */
SellerDealPaymentEvent.prototype.taxAmount = undefined;

/**
 * The total monetary amount paid.
 * @member {module:financesV0/js-client.financesV0.model/Currency} totalAmount
 */
SellerDealPaymentEvent.prototype.totalAmount = undefined;


