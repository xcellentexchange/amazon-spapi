/*
 * Selling Partner API for Data Kiosk
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2023-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {QueryPagination} from './QueryPagination.js';

/**
 * The Query model module.
 * @module dataKiosk_2023-11-15/js-client.dataKiosk_2023-11-15.model/Query
 * @version 2023-11-15
 */
export class Query {
  /**
   * Constructs a new <code>Query</code>.
   * Detailed information about the query.
   * @alias module:dataKiosk_2023-11-15/js-client.dataKiosk_2023-11-15.model/Query
   * @class
   * @param queryId {String} The query identifier. This identifier is unique only in combination with a selling partner account ID.
   * @param query {String} The submitted query.
   * @param createdTime {Date} The date and time when the query was created, in ISO 8601 date time format.
   * @param processingStatus {module:dataKiosk_2023-11-15/js-client.dataKiosk_2023-11-15.model/Query.ProcessingStatusEnum} The processing status of the query.
   */
  constructor(queryId, query, createdTime, processingStatus) {
    this.queryId = queryId;
    this.query = query;
    this.createdTime = createdTime;
    this.processingStatus = processingStatus;
  }

  /**
   * Constructs a <code>Query</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:dataKiosk_2023-11-15/js-client.dataKiosk_2023-11-15.model/Query} obj Optional instance to populate.
   * @return {module:dataKiosk_2023-11-15/js-client.dataKiosk_2023-11-15.model/Query} The populated <code>Query</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Query();
      if (data.hasOwnProperty('queryId'))
        obj.queryId = ApiClient.convertToType(data['queryId'], 'String');
      if (data.hasOwnProperty('query'))
        obj.query = ApiClient.convertToType(data['query'], 'String');
      if (data.hasOwnProperty('createdTime'))
        obj.createdTime = ApiClient.convertToType(data['createdTime'], 'Date');
      if (data.hasOwnProperty('processingStatus'))
        obj.processingStatus = ApiClient.convertToType(data['processingStatus'], 'String');
      if (data.hasOwnProperty('processingStartTime'))
        obj.processingStartTime = ApiClient.convertToType(data['processingStartTime'], 'Date');
      if (data.hasOwnProperty('processingEndTime'))
        obj.processingEndTime = ApiClient.convertToType(data['processingEndTime'], 'Date');
      if (data.hasOwnProperty('dataDocumentId'))
        obj.dataDocumentId = ApiClient.convertToType(data['dataDocumentId'], 'String');
      if (data.hasOwnProperty('errorDocumentId'))
        obj.errorDocumentId = ApiClient.convertToType(data['errorDocumentId'], 'String');
      if (data.hasOwnProperty('pagination'))
        obj.pagination = QueryPagination.constructFromObject(data['pagination']);
    }
    return obj;
  }
}

/**
 * The query identifier. This identifier is unique only in combination with a selling partner account ID.
 * @member {String} queryId
 */
Query.prototype.queryId = undefined;

/**
 * The submitted query.
 * @member {String} query
 */
Query.prototype.query = undefined;

/**
 * The date and time when the query was created, in ISO 8601 date time format.
 * @member {Date} createdTime
 */
Query.prototype.createdTime = undefined;

/**
 * Allowed values for the <code>processingStatus</code> property.
 * @enum {String}
 * @readonly
 */
Query.ProcessingStatusEnum = {
  /**
   * value: "CANCELLED"
   * @const
   */
  CANCELLED: "CANCELLED",

  /**
   * value: "DONE"
   * @const
   */
  DONE: "DONE",

  /**
   * value: "FATAL"
   * @const
   */
  FATAL: "FATAL",

  /**
   * value: "IN_PROGRESS"
   * @const
   */
  IN_PROGRESS: "IN_PROGRESS",

  /**
   * value: "IN_QUEUE"
   * @const
   */
  IN_QUEUE: "IN_QUEUE"
};

/**
 * The processing status of the query.
 * @member {module:dataKiosk_2023-11-15/js-client.dataKiosk_2023-11-15.model/Query.ProcessingStatusEnum} processingStatus
 */
Query.prototype.processingStatus = undefined;

/**
 * The date and time when the query processing started, in ISO 8601 date time format.
 * @member {Date} processingStartTime
 */
Query.prototype.processingStartTime = undefined;

/**
 * The date and time when the query processing completed, in ISO 8601 date time format.
 * @member {Date} processingEndTime
 */
Query.prototype.processingEndTime = undefined;

/**
 * The data document identifier. This identifier is only present when there is data available as a result of the query. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the `getDocument` operation to get the information required to retrieve the data document's contents.
 * @member {String} dataDocumentId
 */
Query.prototype.dataDocumentId = undefined;

/**
 * The error document identifier. This identifier is only present when an error occurs during query processing. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the `getDocument` operation to get the information required to retrieve the error document's contents.
 * @member {String} errorDocumentId
 */
Query.prototype.errorDocumentId = undefined;

/**
 * @member {module:dataKiosk_2023-11-15/js-client.dataKiosk_2023-11-15.model/QueryPagination} pagination
 */
Query.prototype.pagination = undefined;


