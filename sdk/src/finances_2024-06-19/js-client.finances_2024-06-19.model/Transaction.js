/*
 * The Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Breakdowns} from './Breakdowns.js';
import {Contexts} from './Contexts.js';
import {Currency} from './Currency.js';
import {Items} from './Items.js';
import {MarketplaceDetails} from './MarketplaceDetails.js';
import {ModelDate} from './ModelDate.js';
import {RelatedIdentifiers} from './RelatedIdentifiers.js';
import {SellingPartnerMetadata} from './SellingPartnerMetadata.js';

/**
 * The Transaction model module.
 * @module finances_2024-06-19/js-client.finances_2024-06-19.model/Transaction
 * @version 2024-06-19
 */
export class Transaction {
  /**
   * Constructs a new <code>Transaction</code>.
   * All the information related to a transaction.
   * @alias module:finances_2024-06-19/js-client.finances_2024-06-19.model/Transaction
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:finances_2024-06-19/js-client.finances_2024-06-19.model/Transaction} obj Optional instance to populate.
   * @return {module:finances_2024-06-19/js-client.finances_2024-06-19.model/Transaction} The populated <code>Transaction</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Transaction();
      if (data.hasOwnProperty('sellingPartnerMetadata'))
        obj.sellingPartnerMetadata = SellingPartnerMetadata.constructFromObject(data['sellingPartnerMetadata']);
      if (data.hasOwnProperty('relatedIdentifiers'))
        obj.relatedIdentifiers = RelatedIdentifiers.constructFromObject(data['relatedIdentifiers']);
      if (data.hasOwnProperty('transactionType'))
        obj.transactionType = ApiClient.convertToType(data['transactionType'], 'String');
      if (data.hasOwnProperty('transactionId'))
        obj.transactionId = ApiClient.convertToType(data['transactionId'], 'String');
      if (data.hasOwnProperty('transactionStatus'))
        obj.transactionStatus = ApiClient.convertToType(data['transactionStatus'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('postedDate'))
        obj.postedDate = ModelDate.constructFromObject(data['postedDate']);
      if (data.hasOwnProperty('totalAmount'))
        obj.totalAmount = Currency.constructFromObject(data['totalAmount']);
      if (data.hasOwnProperty('marketplaceDetails'))
        obj.marketplaceDetails = MarketplaceDetails.constructFromObject(data['marketplaceDetails']);
      if (data.hasOwnProperty('items'))
        obj.items = Items.constructFromObject(data['items']);
      if (data.hasOwnProperty('contexts'))
        obj.contexts = Contexts.constructFromObject(data['contexts']);
      if (data.hasOwnProperty('breakdowns'))
        obj.breakdowns = Breakdowns.constructFromObject(data['breakdowns']);
    }
    return obj;
  }
}

/**
 * Metadata that describes the seller.
 * @member {module:finances_2024-06-19/js-client.finances_2024-06-19.model/SellingPartnerMetadata} sellingPartnerMetadata
 */
Transaction.prototype.sellingPartnerMetadata = undefined;

/**
 * Identifiers related to the transaction, such as order and shipment IDs.
 * @member {module:finances_2024-06-19/js-client.finances_2024-06-19.model/RelatedIdentifiers} relatedIdentifiers
 */
Transaction.prototype.relatedIdentifiers = undefined;

/**
 * The type of transaction.  **Possible value:** `Shipment`
 * @member {String} transactionType
 */
Transaction.prototype.transactionType = undefined;

/**
 * The unique identifier of the transaction.
 * @member {String} transactionId
 */
Transaction.prototype.transactionId = undefined;

/**
 * The status of the transaction.   **Possible values:**  * `Deferred` * `Released`
 * @member {String} transactionStatus
 */
Transaction.prototype.transactionStatus = undefined;

/**
 * Describes the reasons for the transaction.  **Example:** 'Order Payment', 'Refund Order'
 * @member {String} description
 */
Transaction.prototype.description = undefined;

/**
 * The date and time when the transaction was posted.
 * @member {module:finances_2024-06-19/js-client.finances_2024-06-19.model/ModelDate} postedDate
 */
Transaction.prototype.postedDate = undefined;

/**
 * The total amount of money in the transaction.
 * @member {module:finances_2024-06-19/js-client.finances_2024-06-19.model/Currency} totalAmount
 */
Transaction.prototype.totalAmount = undefined;

/**
 * Information about the marketplace where the transaction occurred.
 * @member {module:finances_2024-06-19/js-client.finances_2024-06-19.model/MarketplaceDetails} marketplaceDetails
 */
Transaction.prototype.marketplaceDetails = undefined;

/**
 * Additional information about the items in the transaction.
 * @member {module:finances_2024-06-19/js-client.finances_2024-06-19.model/Items} items
 */
Transaction.prototype.items = undefined;

/**
 * Additional Information about the transaction.
 * @member {module:finances_2024-06-19/js-client.finances_2024-06-19.model/Contexts} contexts
 */
Transaction.prototype.contexts = undefined;

/**
 * A list of breakdowns that provide details on how the total amount is calculated for the transaction.
 * @member {module:finances_2024-06-19/js-client.finances_2024-06-19.model/Breakdowns} breakdowns
 */
Transaction.prototype.breakdowns = undefined;


