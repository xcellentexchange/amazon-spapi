/*
 * Selling Partner API for Direct Fulfillment Payments
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The ItemQuantity model module.
 * @module vendorDirectFulfillmentPaymentsV1/js-client.vendorDirectFulfillmentPaymentsV1.model/ItemQuantity
 * @version v1
 */
export class ItemQuantity {
  /**
   * Constructs a new <code>ItemQuantity</code>.
   * Details of item quantity.
   * @alias module:vendorDirectFulfillmentPaymentsV1/js-client.vendorDirectFulfillmentPaymentsV1.model/ItemQuantity
   * @class
   * @param amount {Number} Quantity of units available for a specific item.
   * @param unitOfMeasure {String} Unit of measure for the available quantity.
   */
  constructor(amount, unitOfMeasure) {
    this.amount = amount;
    this.unitOfMeasure = unitOfMeasure;
  }

  /**
   * Constructs a <code>ItemQuantity</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:vendorDirectFulfillmentPaymentsV1/js-client.vendorDirectFulfillmentPaymentsV1.model/ItemQuantity} obj Optional instance to populate.
   * @return {module:vendorDirectFulfillmentPaymentsV1/js-client.vendorDirectFulfillmentPaymentsV1.model/ItemQuantity} The populated <code>ItemQuantity</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new ItemQuantity();
      if (data.hasOwnProperty('amount'))
        obj.amount = ApiClient.convertToType(data['amount'], 'Number');
      if (data.hasOwnProperty('unitOfMeasure'))
        obj.unitOfMeasure = ApiClient.convertToType(data['unitOfMeasure'], 'String');
    }
    return obj;
  }
}

/**
 * Quantity of units available for a specific item.
 * @member {Number} amount
 */
ItemQuantity.prototype.amount = undefined;

/**
 * Unit of measure for the available quantity.
 * @member {String} unitOfMeasure
 */
ItemQuantity.prototype.unitOfMeasure = undefined;


