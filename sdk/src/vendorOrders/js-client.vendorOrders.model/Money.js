/*
 * Selling Partner API for Retail Procurement Orders
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Decimal} from './Decimal.js';

/**
 * The Money model module.
 * @module vendorOrders/js-client.vendorOrders.model/Money
 * @version v1
 */
export class Money {
  /**
   * Constructs a new <code>Money</code>.
   * An amount of money. Includes the currency code and an optional unit of measure for items priced by weight.
   * @alias module:vendorOrders/js-client.vendorOrders.model/Money
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Money</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:vendorOrders/js-client.vendorOrders.model/Money} obj Optional instance to populate.
   * @return {module:vendorOrders/js-client.vendorOrders.model/Money} The populated <code>Money</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Money();
      if (data.hasOwnProperty('currencyCode'))
        obj.currencyCode = ApiClient.convertToType(data['currencyCode'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = Decimal.constructFromObject(data['amount']);
      if (data.hasOwnProperty('unitOfMeasure'))
        obj.unitOfMeasure = ApiClient.convertToType(data['unitOfMeasure'], 'String');
    }
    return obj;
  }
}

/**
 * Three digit currency code in ISO 4217 format. String of length 3.
 * @member {String} currencyCode
 */
Money.prototype.currencyCode = undefined;

/**
 * @member {module:vendorOrders/js-client.vendorOrders.model/Decimal} amount
 */
Money.prototype.amount = undefined;

/**
 * Allowed values for the <code>unitOfMeasure</code> property.
 * @enum {String}
 * @readonly
 */
Money.UnitOfMeasureEnum = {
  /**
   * value: "POUNDS"
   * @const
   */
  POUNDS: "POUNDS",

  /**
   * value: "OUNCES"
   * @const
   */
  OUNCES: "OUNCES",

  /**
   * value: "GRAMS"
   * @const
   */
  GRAMS: "GRAMS",

  /**
   * value: "KILOGRAMS"
   * @const
   */
  KILOGRAMS: "KILOGRAMS"
};

/**
 * The unit of measure for prices of items sold by weight. If this field is absent, the item is sold by eaches.
 * @member {module:vendorOrders/js-client.vendorOrders.model/Money.UnitOfMeasureEnum} unitOfMeasure
 */
Money.prototype.unitOfMeasure = undefined;


