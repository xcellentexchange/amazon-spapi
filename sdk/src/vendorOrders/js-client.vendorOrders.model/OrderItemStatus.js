/*
 * Selling Partner API for Retail Procurement Orders
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Money} from './Money.js';
import {OrderItemStatusAcknowledgementStatus} from './OrderItemStatusAcknowledgementStatus.js';
import {OrderItemStatusOrderedQuantity} from './OrderItemStatusOrderedQuantity.js';
import {OrderItemStatusReceivingStatus} from './OrderItemStatusReceivingStatus.js';

/**
 * The OrderItemStatus model module.
 * @module vendorOrders/js-client.vendorOrders.model/OrderItemStatus
 * @version v1
 */
export class OrderItemStatus {
  /**
   * Constructs a new <code>OrderItemStatus</code>.
   * @alias module:vendorOrders/js-client.vendorOrders.model/OrderItemStatus
   * @class
   * @param itemSequenceNumber {String} Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
   */
  constructor(itemSequenceNumber) {
    this.itemSequenceNumber = itemSequenceNumber;
  }

  /**
   * Constructs a <code>OrderItemStatus</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:vendorOrders/js-client.vendorOrders.model/OrderItemStatus} obj Optional instance to populate.
   * @return {module:vendorOrders/js-client.vendorOrders.model/OrderItemStatus} The populated <code>OrderItemStatus</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new OrderItemStatus();
      if (data.hasOwnProperty('itemSequenceNumber'))
        obj.itemSequenceNumber = ApiClient.convertToType(data['itemSequenceNumber'], 'String');
      if (data.hasOwnProperty('buyerProductIdentifier'))
        obj.buyerProductIdentifier = ApiClient.convertToType(data['buyerProductIdentifier'], 'String');
      if (data.hasOwnProperty('vendorProductIdentifier'))
        obj.vendorProductIdentifier = ApiClient.convertToType(data['vendorProductIdentifier'], 'String');
      if (data.hasOwnProperty('netCost'))
        obj.netCost = Money.constructFromObject(data['netCost']);
      if (data.hasOwnProperty('listPrice'))
        obj.listPrice = Money.constructFromObject(data['listPrice']);
      if (data.hasOwnProperty('orderedQuantity'))
        obj.orderedQuantity = OrderItemStatusOrderedQuantity.constructFromObject(data['orderedQuantity']);
      if (data.hasOwnProperty('acknowledgementStatus'))
        obj.acknowledgementStatus = OrderItemStatusAcknowledgementStatus.constructFromObject(data['acknowledgementStatus']);
      if (data.hasOwnProperty('receivingStatus'))
        obj.receivingStatus = OrderItemStatusReceivingStatus.constructFromObject(data['receivingStatus']);
    }
    return obj;
  }
}

/**
 * Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
 * @member {String} itemSequenceNumber
 */
OrderItemStatus.prototype.itemSequenceNumber = undefined;

/**
 * Buyer's Standard Identification Number (ASIN) of an item.
 * @member {String} buyerProductIdentifier
 */
OrderItemStatus.prototype.buyerProductIdentifier = undefined;

/**
 * The vendor selected product identification of the item.
 * @member {String} vendorProductIdentifier
 */
OrderItemStatus.prototype.vendorProductIdentifier = undefined;

/**
 * The net cost of an item per each or weight unit.
 * @member {module:vendorOrders/js-client.vendorOrders.model/Money} netCost
 */
OrderItemStatus.prototype.netCost = undefined;

/**
 * The list price of an item per each or weight unit.
 * @member {module:vendorOrders/js-client.vendorOrders.model/Money} listPrice
 */
OrderItemStatus.prototype.listPrice = undefined;

/**
 * @member {module:vendorOrders/js-client.vendorOrders.model/OrderItemStatusOrderedQuantity} orderedQuantity
 */
OrderItemStatus.prototype.orderedQuantity = undefined;

/**
 * @member {module:vendorOrders/js-client.vendorOrders.model/OrderItemStatusAcknowledgementStatus} acknowledgementStatus
 */
OrderItemStatus.prototype.acknowledgementStatus = undefined;

/**
 * @member {module:vendorOrders/js-client.vendorOrders.model/OrderItemStatusReceivingStatus} receivingStatus
 */
OrderItemStatus.prototype.receivingStatus = undefined;


