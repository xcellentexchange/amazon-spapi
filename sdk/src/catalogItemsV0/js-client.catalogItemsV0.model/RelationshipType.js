/*
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {DecimalWithUnits} from './DecimalWithUnits.js';
import {DimensionType} from './DimensionType.js';
import {IdentifierType} from './IdentifierType.js';

/**
 * The RelationshipType model module.
 * @module catalogItemsV0/js-client.catalogItemsV0.model/RelationshipType
 * @version v0
 */
export class RelationshipType {
  /**
   * Constructs a new <code>RelationshipType</code>.
   * Specific variations of the item.
   * @alias module:catalogItemsV0/js-client.catalogItemsV0.model/RelationshipType
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>RelationshipType</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:catalogItemsV0/js-client.catalogItemsV0.model/RelationshipType} obj Optional instance to populate.
   * @return {module:catalogItemsV0/js-client.catalogItemsV0.model/RelationshipType} The populated <code>RelationshipType</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new RelationshipType();
      if (data.hasOwnProperty('Identifiers'))
        obj.identifiers = IdentifierType.constructFromObject(data['Identifiers']);
      if (data.hasOwnProperty('Color'))
        obj.color = ApiClient.convertToType(data['Color'], 'String');
      if (data.hasOwnProperty('Edition'))
        obj.edition = ApiClient.convertToType(data['Edition'], 'String');
      if (data.hasOwnProperty('Flavor'))
        obj.flavor = ApiClient.convertToType(data['Flavor'], 'String');
      if (data.hasOwnProperty('GemType'))
        obj.gemType = ApiClient.convertToType(data['GemType'], ['String']);
      if (data.hasOwnProperty('GolfClubFlex'))
        obj.golfClubFlex = ApiClient.convertToType(data['GolfClubFlex'], 'String');
      if (data.hasOwnProperty('HandOrientation'))
        obj.handOrientation = ApiClient.convertToType(data['HandOrientation'], 'String');
      if (data.hasOwnProperty('HardwarePlatform'))
        obj.hardwarePlatform = ApiClient.convertToType(data['HardwarePlatform'], 'String');
      if (data.hasOwnProperty('MaterialType'))
        obj.materialType = ApiClient.convertToType(data['MaterialType'], ['String']);
      if (data.hasOwnProperty('MetalType'))
        obj.metalType = ApiClient.convertToType(data['MetalType'], 'String');
      if (data.hasOwnProperty('Model'))
        obj.model = ApiClient.convertToType(data['Model'], 'String');
      if (data.hasOwnProperty('OperatingSystem'))
        obj.operatingSystem = ApiClient.convertToType(data['OperatingSystem'], ['String']);
      if (data.hasOwnProperty('ProductTypeSubcategory'))
        obj.productTypeSubcategory = ApiClient.convertToType(data['ProductTypeSubcategory'], 'String');
      if (data.hasOwnProperty('RingSize'))
        obj.ringSize = ApiClient.convertToType(data['RingSize'], 'String');
      if (data.hasOwnProperty('ShaftMaterial'))
        obj.shaftMaterial = ApiClient.convertToType(data['ShaftMaterial'], 'String');
      if (data.hasOwnProperty('Scent'))
        obj.scent = ApiClient.convertToType(data['Scent'], 'String');
      if (data.hasOwnProperty('Size'))
        obj.size = ApiClient.convertToType(data['Size'], 'String');
      if (data.hasOwnProperty('SizePerPearl'))
        obj.sizePerPearl = ApiClient.convertToType(data['SizePerPearl'], 'String');
      if (data.hasOwnProperty('GolfClubLoft'))
        obj.golfClubLoft = DecimalWithUnits.constructFromObject(data['GolfClubLoft']);
      if (data.hasOwnProperty('TotalDiamondWeight'))
        obj.totalDiamondWeight = DecimalWithUnits.constructFromObject(data['TotalDiamondWeight']);
      if (data.hasOwnProperty('TotalGemWeight'))
        obj.totalGemWeight = DecimalWithUnits.constructFromObject(data['TotalGemWeight']);
      if (data.hasOwnProperty('PackageQuantity'))
        obj.packageQuantity = ApiClient.convertToType(data['PackageQuantity'], 'Number');
      if (data.hasOwnProperty('ItemDimensions'))
        obj.itemDimensions = DimensionType.constructFromObject(data['ItemDimensions']);
    }
    return obj;
  }
}

/**
 * The identifiers that uniquely identify the item that is related.
 * @member {module:catalogItemsV0/js-client.catalogItemsV0.model/IdentifierType} identifiers
 */
RelationshipType.prototype.identifiers = undefined;

/**
 * The color variation of the item.
 * @member {String} color
 */
RelationshipType.prototype.color = undefined;

/**
 * The edition variation of the item.
 * @member {String} edition
 */
RelationshipType.prototype.edition = undefined;

/**
 * The flavor variation of the item.
 * @member {String} flavor
 */
RelationshipType.prototype.flavor = undefined;

/**
 * The gem type variations of the item.
 * @member {Array.<String>} gemType
 */
RelationshipType.prototype.gemType = undefined;

/**
 * The golf club flex variation of an item.
 * @member {String} golfClubFlex
 */
RelationshipType.prototype.golfClubFlex = undefined;

/**
 * The hand orientation variation of an item.
 * @member {String} handOrientation
 */
RelationshipType.prototype.handOrientation = undefined;

/**
 * The hardware platform variation of an item.
 * @member {String} hardwarePlatform
 */
RelationshipType.prototype.hardwarePlatform = undefined;

/**
 * The material type variations of an item.
 * @member {Array.<String>} materialType
 */
RelationshipType.prototype.materialType = undefined;

/**
 * The metal type variation of an item.
 * @member {String} metalType
 */
RelationshipType.prototype.metalType = undefined;

/**
 * The model variation of an item.
 * @member {String} model
 */
RelationshipType.prototype.model = undefined;

/**
 * The operating system variations of an item.
 * @member {Array.<String>} operatingSystem
 */
RelationshipType.prototype.operatingSystem = undefined;

/**
 * The product type subcategory variation of an item.
 * @member {String} productTypeSubcategory
 */
RelationshipType.prototype.productTypeSubcategory = undefined;

/**
 * The ring size variation of an item.
 * @member {String} ringSize
 */
RelationshipType.prototype.ringSize = undefined;

/**
 * The shaft material variation of an item.
 * @member {String} shaftMaterial
 */
RelationshipType.prototype.shaftMaterial = undefined;

/**
 * The scent variation of an item.
 * @member {String} scent
 */
RelationshipType.prototype.scent = undefined;

/**
 * The size variation of an item.
 * @member {String} size
 */
RelationshipType.prototype.size = undefined;

/**
 * The size per pearl variation of an item.
 * @member {String} sizePerPearl
 */
RelationshipType.prototype.sizePerPearl = undefined;

/**
 * The golf club loft variation of an item.
 * @member {module:catalogItemsV0/js-client.catalogItemsV0.model/DecimalWithUnits} golfClubLoft
 */
RelationshipType.prototype.golfClubLoft = undefined;

/**
 * The total diamond weight variation of an item.
 * @member {module:catalogItemsV0/js-client.catalogItemsV0.model/DecimalWithUnits} totalDiamondWeight
 */
RelationshipType.prototype.totalDiamondWeight = undefined;

/**
 * The total gem weight variation of an item.
 * @member {module:catalogItemsV0/js-client.catalogItemsV0.model/DecimalWithUnits} totalGemWeight
 */
RelationshipType.prototype.totalGemWeight = undefined;

/**
 * The package quantity variation of an item.
 * @member {Number} packageQuantity
 */
RelationshipType.prototype.packageQuantity = undefined;

/**
 * The item dimensions relationship of an item.
 * @member {module:catalogItemsV0/js-client.catalogItemsV0.model/DimensionType} itemDimensions
 */
RelationshipType.prototype.itemDimensions = undefined;


