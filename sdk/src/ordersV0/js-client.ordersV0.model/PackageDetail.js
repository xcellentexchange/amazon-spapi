/*
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {ConfirmShipmentOrderItemsList} from './ConfirmShipmentOrderItemsList.js';
import {PackageReferenceId} from './PackageReferenceId.js';

/**
 * The PackageDetail model module.
 * @module ordersV0/js-client.ordersV0.model/PackageDetail
 * @version v0
 */
export class PackageDetail {
  /**
   * Constructs a new <code>PackageDetail</code>.
   * Properties of packages
   * @alias module:ordersV0/js-client.ordersV0.model/PackageDetail
   * @class
   * @param packageReferenceId {module:ordersV0/js-client.ordersV0.model/PackageReferenceId} 
   * @param carrierCode {String} Identifies the carrier that will deliver the package. This field is required for all marketplaces. For more information, refer to the [`CarrierCode` announcement](https://developer-docs.amazon.com/sp-api/changelog/carriercode-value-required-in-shipment-confirmations-for-br-mx-ca-sg-au-in-jp-marketplaces).
   * @param trackingNumber {String} The tracking number used to obtain tracking and delivery information.
   * @param shipDate {Date} The shipping date for the package. Must be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date/time format.
   * @param orderItems {module:ordersV0/js-client.ordersV0.model/ConfirmShipmentOrderItemsList} The list of order items and quantities to be updated.
   */
  constructor(packageReferenceId, carrierCode, trackingNumber, shipDate, orderItems) {
    this.packageReferenceId = packageReferenceId;
    this.carrierCode = carrierCode;
    this.trackingNumber = trackingNumber;
    this.shipDate = shipDate;
    this.orderItems = orderItems;
  }

  /**
   * Constructs a <code>PackageDetail</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:ordersV0/js-client.ordersV0.model/PackageDetail} obj Optional instance to populate.
   * @return {module:ordersV0/js-client.ordersV0.model/PackageDetail} The populated <code>PackageDetail</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new PackageDetail();
      if (data.hasOwnProperty('packageReferenceId'))
        obj.packageReferenceId = PackageReferenceId.constructFromObject(data['packageReferenceId']);
      if (data.hasOwnProperty('carrierCode'))
        obj.carrierCode = ApiClient.convertToType(data['carrierCode'], 'String');
      if (data.hasOwnProperty('carrierName'))
        obj.carrierName = ApiClient.convertToType(data['carrierName'], 'String');
      if (data.hasOwnProperty('shippingMethod'))
        obj.shippingMethod = ApiClient.convertToType(data['shippingMethod'], 'String');
      if (data.hasOwnProperty('trackingNumber'))
        obj.trackingNumber = ApiClient.convertToType(data['trackingNumber'], 'String');
      if (data.hasOwnProperty('shipDate'))
        obj.shipDate = ApiClient.convertToType(data['shipDate'], 'Date');
      if (data.hasOwnProperty('shipFromSupplySourceId'))
        obj.shipFromSupplySourceId = ApiClient.convertToType(data['shipFromSupplySourceId'], 'String');
      if (data.hasOwnProperty('orderItems'))
        obj.orderItems = ConfirmShipmentOrderItemsList.constructFromObject(data['orderItems']);
    }
    return obj;
  }
}

/**
 * @member {module:ordersV0/js-client.ordersV0.model/PackageReferenceId} packageReferenceId
 */
PackageDetail.prototype.packageReferenceId = undefined;

/**
 * Identifies the carrier that will deliver the package. This field is required for all marketplaces. For more information, refer to the [`CarrierCode` announcement](https://developer-docs.amazon.com/sp-api/changelog/carriercode-value-required-in-shipment-confirmations-for-br-mx-ca-sg-au-in-jp-marketplaces).
 * @member {String} carrierCode
 */
PackageDetail.prototype.carrierCode = undefined;

/**
 * Carrier Name that will deliver the package. Required when `carrierCode` is \"Others\" 
 * @member {String} carrierName
 */
PackageDetail.prototype.carrierName = undefined;

/**
 * Ship method to be used for shipping the order.
 * @member {String} shippingMethod
 */
PackageDetail.prototype.shippingMethod = undefined;

/**
 * The tracking number used to obtain tracking and delivery information.
 * @member {String} trackingNumber
 */
PackageDetail.prototype.trackingNumber = undefined;

/**
 * The shipping date for the package. Must be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date/time format.
 * @member {Date} shipDate
 */
PackageDetail.prototype.shipDate = undefined;

/**
 * The unique identifier for the supply source.
 * @member {String} shipFromSupplySourceId
 */
PackageDetail.prototype.shipFromSupplySourceId = undefined;

/**
 * The list of order items and quantities to be updated.
 * @member {module:ordersV0/js-client.ordersV0.model/ConfirmShipmentOrderItemsList} orderItems
 */
PackageDetail.prototype.orderItems = undefined;


