/*
 * Selling Partner API for Supply Sources
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {CreateSupplySourceRequest} from '../js-client.supplySources_2020-07-01.model/CreateSupplySourceRequest.js';
import {CreateSupplySourceResponse} from '../js-client.supplySources_2020-07-01.model/CreateSupplySourceResponse.js';
import {ErrorList} from '../js-client.supplySources_2020-07-01.model/ErrorList.js';
import {GetSupplySourcesResponse} from '../js-client.supplySources_2020-07-01.model/GetSupplySourcesResponse.js';
import {SupplySource} from '../js-client.supplySources_2020-07-01.model/SupplySource.js';
import {UpdateSupplySourceRequest} from '../js-client.supplySources_2020-07-01.model/UpdateSupplySourceRequest.js';
import {UpdateSupplySourceStatusRequest} from '../js-client.supplySources_2020-07-01.model/UpdateSupplySourceStatusRequest.js';

/**
* SupplySources service.
* @module supplySources_2020-07-01/js-client.supplySources_2020-07-01.api/SupplySourcesApi
* @version 2020-07-01
*/
export class SupplySourcesApi {

    /**
    * Constructs a new SupplySourcesApi. 
    * @alias module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.api/SupplySourcesApi
    * @class
    * @param {module:supplySources_2020-07-01/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:supplySources_2020-07-01/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Archive a supply source, making it inactive. Cannot be undone.
     * @param {String} supplySourceId The unique identifier of a supply source.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ErrorList} and HTTP response
     */
    archiveSupplySourceWithHttpInfo(supplySourceId) {
      let postBody = null;

      // verify the required parameter 'supplySourceId' is set
      if (supplySourceId === undefined || supplySourceId === null) {
        throw new Error("Missing the required parameter 'supplySourceId' when calling archiveSupplySource");
      }


      let pathParams = {
        'supplySourceId': supplySourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorList;

      return this.apiClient.callApi(
        '/supplySources/2020-07-01/supplySources/{supplySourceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Archive a supply source, making it inactive. Cannot be undone.
     * @param {String} supplySourceId The unique identifier of a supply source.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ErrorList}
     */
    archiveSupplySource(supplySourceId) {
      return this.archiveSupplySourceWithHttpInfo(supplySourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new supply source.
     * @param {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/CreateSupplySourceRequest} payload A request to create a supply source.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/CreateSupplySourceResponse} and HTTP response
     */
    createSupplySourceWithHttpInfo(payload) {
      let postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createSupplySource");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSupplySourceResponse;

      return this.apiClient.callApi(
        '/supplySources/2020-07-01/supplySources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new supply source.
     * @param {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/CreateSupplySourceRequest} payload A request to create a supply source.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/CreateSupplySourceResponse}
     */
    createSupplySource(payload) {
      return this.createSupplySourceWithHttpInfo(payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a supply source.
     * @param {String} supplySourceId The unique identifier of a supply source.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/SupplySource} and HTTP response
     */
    getSupplySourceWithHttpInfo(supplySourceId) {
      let postBody = null;

      // verify the required parameter 'supplySourceId' is set
      if (supplySourceId === undefined || supplySourceId === null) {
        throw new Error("Missing the required parameter 'supplySourceId' when calling getSupplySource");
      }


      let pathParams = {
        'supplySourceId': supplySourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupplySource;

      return this.apiClient.callApi(
        '/supplySources/2020-07-01/supplySources/{supplySourceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a supply source.
     * @param {String} supplySourceId The unique identifier of a supply source.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/SupplySource}
     */
    getSupplySource(supplySourceId) {
      return this.getSupplySourceWithHttpInfo(supplySourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * The path to retrieve paginated supply sources.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken The pagination token to retrieve a specific page of results.
     * @param {Number} opts.pageSize The number of supply sources to return per paginated request. (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/GetSupplySourcesResponse} and HTTP response
     */
    getSupplySourcesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'nextPageToken': opts['nextPageToken'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSupplySourcesResponse;

      return this.apiClient.callApi(
        '/supplySources/2020-07-01/supplySources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * The path to retrieve paginated supply sources.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken The pagination token to retrieve a specific page of results.
     * @param {Number} opts.pageSize The number of supply sources to return per paginated request. (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/GetSupplySourcesResponse}
     */
    getSupplySources(opts) {
      return this.getSupplySourcesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the configuration and capabilities of a supply source.
     * @param {String} supplySourceId The unique identitier of a supply source.
     * @param {Object} opts Optional parameters
     * @param {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/UpdateSupplySourceRequest} opts.payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ErrorList} and HTTP response
     */
    updateSupplySourceWithHttpInfo(supplySourceId, opts) {
      opts = opts || {};
      let postBody = opts['payload'];

      // verify the required parameter 'supplySourceId' is set
      if (supplySourceId === undefined || supplySourceId === null) {
        throw new Error("Missing the required parameter 'supplySourceId' when calling updateSupplySource");
      }


      let pathParams = {
        'supplySourceId': supplySourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorList;

      return this.apiClient.callApi(
        '/supplySources/2020-07-01/supplySources/{supplySourceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Update the configuration and capabilities of a supply source.
     * @param {String} supplySourceId The unique identitier of a supply source.
     * @param {Object} opts Optional parameters
     * @param {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/UpdateSupplySourceRequest} opts.payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ErrorList}
     */
    updateSupplySource(supplySourceId, opts) {
      return this.updateSupplySourceWithHttpInfo(supplySourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the status of a supply source.
     * @param {String} supplySourceId The unique identifier of a supply source.
     * @param {Object} opts Optional parameters
     * @param {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/UpdateSupplySourceStatusRequest} opts.payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ErrorList} and HTTP response
     */
    updateSupplySourceStatusWithHttpInfo(supplySourceId, opts) {
      opts = opts || {};
      let postBody = opts['payload'];

      // verify the required parameter 'supplySourceId' is set
      if (supplySourceId === undefined || supplySourceId === null) {
        throw new Error("Missing the required parameter 'supplySourceId' when calling updateSupplySourceStatus");
      }


      let pathParams = {
        'supplySourceId': supplySourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorList;

      return this.apiClient.callApi(
        '/supplySources/2020-07-01/supplySources/{supplySourceId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Update the status of a supply source.
     * @param {String} supplySourceId The unique identifier of a supply source.
     * @param {Object} opts Optional parameters
     * @param {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/UpdateSupplySourceStatusRequest} opts.payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ErrorList}
     */
    updateSupplySourceStatus(supplySourceId, opts) {
      return this.updateSupplySourceStatusWithHttpInfo(supplySourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
