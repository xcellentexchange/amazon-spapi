/*
 * Selling Partner API for Supply Sources
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {NonNegativeInteger} from './NonNegativeInteger.js';
import {ParkingCostType} from './ParkingCostType.js';
import {ParkingSpotIdentificationType} from './ParkingSpotIdentificationType.js';

/**
 * The ParkingConfiguration model module.
 * @module supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ParkingConfiguration
 * @version 2020-07-01
 */
export class ParkingConfiguration {
  /**
   * Constructs a new <code>ParkingConfiguration</code>.
   * The parking configuration.
   * @alias module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ParkingConfiguration
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ParkingConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ParkingConfiguration} obj Optional instance to populate.
   * @return {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ParkingConfiguration} The populated <code>ParkingConfiguration</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new ParkingConfiguration();
      if (data.hasOwnProperty('parkingCostType'))
        obj.parkingCostType = ParkingCostType.constructFromObject(data['parkingCostType']);
      if (data.hasOwnProperty('parkingSpotIdentificationType'))
        obj.parkingSpotIdentificationType = ParkingSpotIdentificationType.constructFromObject(data['parkingSpotIdentificationType']);
      if (data.hasOwnProperty('numberOfParkingSpots'))
        obj.numberOfParkingSpots = NonNegativeInteger.constructFromObject(data['numberOfParkingSpots']);
    }
    return obj;
  }
}

/**
 * The type of cost at parking location.
 * @member {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ParkingCostType} parkingCostType
 */
ParkingConfiguration.prototype.parkingCostType = undefined;

/**
 * The type of parking spot identification used at parking location.
 * @member {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/ParkingSpotIdentificationType} parkingSpotIdentificationType
 */
ParkingConfiguration.prototype.parkingSpotIdentificationType = undefined;

/**
 * The number of parking spots.
 * @member {module:supplySources_2020-07-01/js-client.supplySources_2020-07-01.model/NonNegativeInteger} numberOfParkingSpots
 */
ParkingConfiguration.prototype.numberOfParkingSpots = undefined;


