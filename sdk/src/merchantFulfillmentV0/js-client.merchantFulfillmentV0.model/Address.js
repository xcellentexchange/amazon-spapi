/*
 * Selling Partner API for Merchant Fulfillment
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {AddressLine1} from './AddressLine1.js';
import {AddressLine2} from './AddressLine2.js';
import {AddressLine3} from './AddressLine3.js';
import {AddressName} from './AddressName.js';
import {City} from './City.js';
import {CountryCode} from './CountryCode.js';
import {DistrictOrCounty} from './DistrictOrCounty.js';
import {EmailAddress} from './EmailAddress.js';
import {PhoneNumber} from './PhoneNumber.js';
import {PostalCode} from './PostalCode.js';
import {StateOrProvinceCode} from './StateOrProvinceCode.js';

/**
 * The Address model module.
 * @module merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/Address
 * @version v0
 */
export class Address {
  /**
   * Constructs a new <code>Address</code>.
   * The postal address information.
   * @alias module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/Address
   * @class
   * @param name {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/AddressName} 
   * @param addressLine1 {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/AddressLine1} 
   * @param email {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/EmailAddress} 
   * @param city {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/City} 
   * @param postalCode {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/PostalCode} 
   * @param countryCode {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/CountryCode} 
   * @param phone {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/PhoneNumber} 
   */
  constructor(name, addressLine1, email, city, postalCode, countryCode, phone) {
    this.name = name;
    this.addressLine1 = addressLine1;
    this.email = email;
    this.city = city;
    this.postalCode = postalCode;
    this.countryCode = countryCode;
    this.phone = phone;
  }

  /**
   * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/Address} obj Optional instance to populate.
   * @return {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/Address} The populated <code>Address</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Address();
      if (data.hasOwnProperty('Name'))
        obj.name = AddressName.constructFromObject(data['Name']);
      if (data.hasOwnProperty('AddressLine1'))
        obj.addressLine1 = AddressLine1.constructFromObject(data['AddressLine1']);
      if (data.hasOwnProperty('AddressLine2'))
        obj.addressLine2 = AddressLine2.constructFromObject(data['AddressLine2']);
      if (data.hasOwnProperty('AddressLine3'))
        obj.addressLine3 = AddressLine3.constructFromObject(data['AddressLine3']);
      if (data.hasOwnProperty('DistrictOrCounty'))
        obj.districtOrCounty = DistrictOrCounty.constructFromObject(data['DistrictOrCounty']);
      if (data.hasOwnProperty('Email'))
        obj.email = EmailAddress.constructFromObject(data['Email']);
      if (data.hasOwnProperty('City'))
        obj.city = City.constructFromObject(data['City']);
      if (data.hasOwnProperty('StateOrProvinceCode'))
        obj.stateOrProvinceCode = StateOrProvinceCode.constructFromObject(data['StateOrProvinceCode']);
      if (data.hasOwnProperty('PostalCode'))
        obj.postalCode = PostalCode.constructFromObject(data['PostalCode']);
      if (data.hasOwnProperty('CountryCode'))
        obj.countryCode = CountryCode.constructFromObject(data['CountryCode']);
      if (data.hasOwnProperty('Phone'))
        obj.phone = PhoneNumber.constructFromObject(data['Phone']);
    }
    return obj;
  }
}

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/AddressName} name
 */
Address.prototype.name = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/AddressLine1} addressLine1
 */
Address.prototype.addressLine1 = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/AddressLine2} addressLine2
 */
Address.prototype.addressLine2 = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/AddressLine3} addressLine3
 */
Address.prototype.addressLine3 = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/DistrictOrCounty} districtOrCounty
 */
Address.prototype.districtOrCounty = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/EmailAddress} email
 */
Address.prototype.email = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/City} city
 */
Address.prototype.city = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/StateOrProvinceCode} stateOrProvinceCode
 */
Address.prototype.stateOrProvinceCode = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/PostalCode} postalCode
 */
Address.prototype.postalCode = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/CountryCode} countryCode
 */
Address.prototype.countryCode = undefined;

/**
 * @member {module:merchantFulfillmentV0/js-client.merchantFulfillmentV0.model/PhoneNumber} phone
 */
Address.prototype.phone = undefined;


