/*
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Carrier} from './Carrier.js';
import {CarrierAppointment} from './CarrierAppointment.js';
import {Quote} from './Quote.js';

/**
 * The TransportationOption model module.
 * @module fulfillmentInbound_2024-03-20/js-client.fulfillmentInbound_2024-03-20.model/TransportationOption
 * @version 2024-03-20
 */
export class TransportationOption {
  /**
   * Constructs a new <code>TransportationOption</code>.
   * Contains information pertaining to a transportation option and the related carrier.
   * @alias module:fulfillmentInbound_2024-03-20/js-client.fulfillmentInbound_2024-03-20.model/TransportationOption
   * @class
   * @param carrier {module:fulfillmentInbound_2024-03-20/js-client.fulfillmentInbound_2024-03-20.model/Carrier} 
   * @param preconditions {Array.<String>} Identifies a list of preconditions for confirming the transportation option.
   * @param shipmentId {String} Identifier of a shipment. A shipment contains the boxes and units being inbounded.
   * @param shippingMode {String} Mode of shipment transportation that this option will provide.  Possible values: `GROUND_SMALL_PARCEL`, `FREIGHT_LTL`, `FREIGHT_FTL_PALLET`, `FREIGHT_FTL_NONPALLET`, `OCEAN_LCL`, `OCEAN_FCL`, `AIR_SMALL_PARCEL`, `AIR_SMALL_PARCEL_EXPRESS`.
   * @param shippingSolution {String} Shipping program for the option. Possible values: `AMAZON_PARTNERED_CARRIER`, `USE_YOUR_OWN_CARRIER`.
   * @param transportationOptionId {String} Identifier of a transportation option. A transportation option represent one option for how to send a shipment.
   */
  constructor(carrier, preconditions, shipmentId, shippingMode, shippingSolution, transportationOptionId) {
    this.carrier = carrier;
    this.preconditions = preconditions;
    this.shipmentId = shipmentId;
    this.shippingMode = shippingMode;
    this.shippingSolution = shippingSolution;
    this.transportationOptionId = transportationOptionId;
  }

  /**
   * Constructs a <code>TransportationOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:fulfillmentInbound_2024-03-20/js-client.fulfillmentInbound_2024-03-20.model/TransportationOption} obj Optional instance to populate.
   * @return {module:fulfillmentInbound_2024-03-20/js-client.fulfillmentInbound_2024-03-20.model/TransportationOption} The populated <code>TransportationOption</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new TransportationOption();
      if (data.hasOwnProperty('carrier'))
        obj.carrier = Carrier.constructFromObject(data['carrier']);
      if (data.hasOwnProperty('carrierAppointment'))
        obj.carrierAppointment = CarrierAppointment.constructFromObject(data['carrierAppointment']);
      if (data.hasOwnProperty('preconditions'))
        obj.preconditions = ApiClient.convertToType(data['preconditions'], ['String']);
      if (data.hasOwnProperty('quote'))
        obj.quote = Quote.constructFromObject(data['quote']);
      if (data.hasOwnProperty('shipmentId'))
        obj.shipmentId = ApiClient.convertToType(data['shipmentId'], 'String');
      if (data.hasOwnProperty('shippingMode'))
        obj.shippingMode = ApiClient.convertToType(data['shippingMode'], 'String');
      if (data.hasOwnProperty('shippingSolution'))
        obj.shippingSolution = ApiClient.convertToType(data['shippingSolution'], 'String');
      if (data.hasOwnProperty('transportationOptionId'))
        obj.transportationOptionId = ApiClient.convertToType(data['transportationOptionId'], 'String');
    }
    return obj;
  }
}

/**
 * @member {module:fulfillmentInbound_2024-03-20/js-client.fulfillmentInbound_2024-03-20.model/Carrier} carrier
 */
TransportationOption.prototype.carrier = undefined;

/**
 * @member {module:fulfillmentInbound_2024-03-20/js-client.fulfillmentInbound_2024-03-20.model/CarrierAppointment} carrierAppointment
 */
TransportationOption.prototype.carrierAppointment = undefined;

/**
 * Identifies a list of preconditions for confirming the transportation option.
 * @member {Array.<String>} preconditions
 */
TransportationOption.prototype.preconditions = undefined;

/**
 * @member {module:fulfillmentInbound_2024-03-20/js-client.fulfillmentInbound_2024-03-20.model/Quote} quote
 */
TransportationOption.prototype.quote = undefined;

/**
 * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
 * @member {String} shipmentId
 */
TransportationOption.prototype.shipmentId = undefined;

/**
 * Mode of shipment transportation that this option will provide.  Possible values: `GROUND_SMALL_PARCEL`, `FREIGHT_LTL`, `FREIGHT_FTL_PALLET`, `FREIGHT_FTL_NONPALLET`, `OCEAN_LCL`, `OCEAN_FCL`, `AIR_SMALL_PARCEL`, `AIR_SMALL_PARCEL_EXPRESS`.
 * @member {String} shippingMode
 */
TransportationOption.prototype.shippingMode = undefined;

/**
 * Shipping program for the option. Possible values: `AMAZON_PARTNERED_CARRIER`, `USE_YOUR_OWN_CARRIER`.
 * @member {String} shippingSolution
 */
TransportationOption.prototype.shippingSolution = undefined;

/**
 * Identifier of a transportation option. A transportation option represent one option for how to send a shipment.
 * @member {String} transportationOptionId
 */
TransportationOption.prototype.transportationOptionId = undefined;


