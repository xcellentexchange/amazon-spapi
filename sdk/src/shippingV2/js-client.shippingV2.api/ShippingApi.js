/*
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {CancelShipmentResponse} from '../js-client.shippingV2.model/CancelShipmentResponse.js';
import {DirectPurchaseRequest} from '../js-client.shippingV2.model/DirectPurchaseRequest.js';
import {DirectPurchaseResponse} from '../js-client.shippingV2.model/DirectPurchaseResponse.js';
import {ErrorList} from '../js-client.shippingV2.model/ErrorList.js';
import {GenerateCollectionFormRequest} from '../js-client.shippingV2.model/GenerateCollectionFormRequest.js';
import {GenerateCollectionFormResponse} from '../js-client.shippingV2.model/GenerateCollectionFormResponse.js';
import {GetAccessPointsResponse} from '../js-client.shippingV2.model/GetAccessPointsResponse.js';
import {GetAdditionalInputsResponse} from '../js-client.shippingV2.model/GetAdditionalInputsResponse.js';
import {GetCarrierAccountFormInputsResponse} from '../js-client.shippingV2.model/GetCarrierAccountFormInputsResponse.js';
import {GetCarrierAccountsRequest} from '../js-client.shippingV2.model/GetCarrierAccountsRequest.js';
import {GetCarrierAccountsResponse} from '../js-client.shippingV2.model/GetCarrierAccountsResponse.js';
import {GetCollectionFormHistoryRequest} from '../js-client.shippingV2.model/GetCollectionFormHistoryRequest.js';
import {GetCollectionFormHistoryResponse} from '../js-client.shippingV2.model/GetCollectionFormHistoryResponse.js';
import {GetCollectionFormResponse} from '../js-client.shippingV2.model/GetCollectionFormResponse.js';
import {GetRatesRequest} from '../js-client.shippingV2.model/GetRatesRequest.js';
import {GetRatesResponse} from '../js-client.shippingV2.model/GetRatesResponse.js';
import {GetShipmentDocumentsResponse} from '../js-client.shippingV2.model/GetShipmentDocumentsResponse.js';
import {GetTrackingResponse} from '../js-client.shippingV2.model/GetTrackingResponse.js';
import {GetUnmanifestedShipmentsRequest} from '../js-client.shippingV2.model/GetUnmanifestedShipmentsRequest.js';
import {GetUnmanifestedShipmentsResponse} from '../js-client.shippingV2.model/GetUnmanifestedShipmentsResponse.js';
import {LinkCarrierAccountRequest} from '../js-client.shippingV2.model/LinkCarrierAccountRequest.js';
import {LinkCarrierAccountResponse} from '../js-client.shippingV2.model/LinkCarrierAccountResponse.js';
import {OneClickShipmentRequest} from '../js-client.shippingV2.model/OneClickShipmentRequest.js';
import {OneClickShipmentResponse} from '../js-client.shippingV2.model/OneClickShipmentResponse.js';
import {PurchaseShipmentRequest} from '../js-client.shippingV2.model/PurchaseShipmentRequest.js';
import {PurchaseShipmentResponse} from '../js-client.shippingV2.model/PurchaseShipmentResponse.js';
import {UnlinkCarrierAccountRequest} from '../js-client.shippingV2.model/UnlinkCarrierAccountRequest.js';
import {UnlinkCarrierAccountResponse} from '../js-client.shippingV2.model/UnlinkCarrierAccountResponse.js';

/**
* Shipping service.
* @module shippingV2/js-client.shippingV2.api/ShippingApi
* @version v2
*/
export class ShippingApi {

    /**
    * Constructs a new ShippingApi. 
    * @alias module:shippingV2/js-client.shippingV2.api/ShippingApi
    * @class
    * @param {module:shippingV2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:shippingV2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId The shipment identifier originally returned by the purchaseShipment operation.
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/CancelShipmentResponse} and HTTP response
     */
    cancelShipmentWithHttpInfo(shipmentId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling cancelShipment");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelShipmentResponse;

      return this.apiClient.callApi(
        '/shipping/v2/shipments/{shipmentId}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId The shipment identifier originally returned by the purchaseShipment operation.
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/CancelShipmentResponse}
     */
    cancelShipment(shipmentId, opts) {
      return this.cancelShipmentWithHttpInfo(shipmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/DirectPurchaseRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request.
     * @param {String} opts.locale The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. 
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/DirectPurchaseResponse} and HTTP response
     */
    directPurchaseShipmentWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling directPurchaseShipment");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-IdempotencyKey': opts['xAmznIdempotencyKey'],
        'locale': opts['locale'],
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DirectPurchaseResponse;

      return this.apiClient.callApi(
        '/shipping/v2/shipments/directPurchase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/DirectPurchaseRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request.
     * @param {String} opts.locale The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. 
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/DirectPurchaseResponse}
     */
    directPurchaseShipment(body, opts) {
      return this.directPurchaseShipmentWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GenerateCollectionFormRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request.
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GenerateCollectionFormResponse} and HTTP response
     */
    generateCollectionFormWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling generateCollectionForm");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-IdempotencyKey': opts['xAmznIdempotencyKey'],
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateCollectionFormResponse;

      return this.apiClient.callApi(
        '/shipping/v2/collectionForms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GenerateCollectionFormRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request.
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GenerateCollectionFormResponse}
     */
    generateCollectionForm(body, opts) {
      return this.generateCollectionFormWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array.<module:shippingV2/js-client.shippingV2.model/String>} accessPointTypes 
     * @param {String} countryCode 
     * @param {String} postalCode 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetAccessPointsResponse} and HTTP response
     */
    getAccessPointsWithHttpInfo(accessPointTypes, countryCode, postalCode, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'accessPointTypes' is set
      if (accessPointTypes === undefined || accessPointTypes === null) {
        throw new Error("Missing the required parameter 'accessPointTypes' when calling getAccessPoints");
      }

      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getAccessPoints");
      }

      // verify the required parameter 'postalCode' is set
      if (postalCode === undefined || postalCode === null) {
        throw new Error("Missing the required parameter 'postalCode' when calling getAccessPoints");
      }


      let pathParams = {
      };
      let queryParams = {
        'accessPointTypes': this.apiClient.buildCollectionParam(accessPointTypes, 'csv'),
        'countryCode': countryCode,
        'postalCode': postalCode
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccessPointsResponse;

      return this.apiClient.callApi(
        '/shipping/v2/accessPoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array.<module:shippingV2/js-client.shippingV2.model/String>} accessPointTypes 
     * @param {String} countryCode 
     * @param {String} postalCode 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetAccessPointsResponse}
     */
    getAccessPoints(accessPointTypes, countryCode, postalCode, opts) {
      return this.getAccessPointsWithHttpInfo(accessPointTypes, countryCode, postalCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} requestToken The request token returned in the response to the getRates operation.
     * @param {String} rateId The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetAdditionalInputsResponse} and HTTP response
     */
    getAdditionalInputsWithHttpInfo(requestToken, rateId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'requestToken' is set
      if (requestToken === undefined || requestToken === null) {
        throw new Error("Missing the required parameter 'requestToken' when calling getAdditionalInputs");
      }

      // verify the required parameter 'rateId' is set
      if (rateId === undefined || rateId === null) {
        throw new Error("Missing the required parameter 'rateId' when calling getAdditionalInputs");
      }


      let pathParams = {
      };
      let queryParams = {
        'requestToken': requestToken,
        'rateId': rateId
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAdditionalInputsResponse;

      return this.apiClient.callApi(
        '/shipping/v2/shipments/additionalInputs/schema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} requestToken The request token returned in the response to the getRates operation.
     * @param {String} rateId The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetAdditionalInputsResponse}
     */
    getAdditionalInputs(requestToken, rateId, opts) {
      return this.getAdditionalInputsWithHttpInfo(requestToken, rateId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetCarrierAccountFormInputsResponse} and HTTP response
     */
    getCarrierAccountFormInputsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCarrierAccountFormInputsResponse;

      return this.apiClient.callApi(
        '/shipping/v2/carrierAccountFormInputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetCarrierAccountFormInputsResponse}
     */
    getCarrierAccountFormInputs(opts) {
      return this.getCarrierAccountFormInputsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GetCarrierAccountsRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetCarrierAccountsResponse} and HTTP response
     */
    getCarrierAccountsWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCarrierAccounts");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCarrierAccountsResponse;

      return this.apiClient.callApi(
        '/shipping/v2/carrierAccounts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GetCarrierAccountsRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetCarrierAccountsResponse}
     */
    getCarrierAccounts(body, opts) {
      return this.getCarrierAccountsWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} collectionFormId collection form Id to reprint a collection.
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetCollectionFormResponse} and HTTP response
     */
    getCollectionFormWithHttpInfo(collectionFormId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'collectionFormId' is set
      if (collectionFormId === undefined || collectionFormId === null) {
        throw new Error("Missing the required parameter 'collectionFormId' when calling getCollectionForm");
      }


      let pathParams = {
        'collectionFormId': collectionFormId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCollectionFormResponse;

      return this.apiClient.callApi(
        '/shipping/v2/collectionForms/{collectionFormId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} collectionFormId collection form Id to reprint a collection.
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetCollectionFormResponse}
     */
    getCollectionForm(collectionFormId, opts) {
      return this.getCollectionFormWithHttpInfo(collectionFormId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GetCollectionFormHistoryRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetCollectionFormHistoryResponse} and HTTP response
     */
    getCollectionFormHistoryWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCollectionFormHistory");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCollectionFormHistoryResponse;

      return this.apiClient.callApi(
        '/shipping/v2/collectionForms/history', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GetCollectionFormHistoryRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetCollectionFormHistoryResponse}
     */
    getCollectionFormHistory(body, opts) {
      return this.getCollectionFormHistoryWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GetRatesRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetRatesResponse} and HTTP response
     */
    getRatesWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRates");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRatesResponse;

      return this.apiClient.callApi(
        '/shipping/v2/shipments/rates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GetRatesRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetRatesResponse}
     */
    getRates(body, opts) {
      return this.getRatesWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId The shipment identifier originally returned by the purchaseShipment operation.
     * @param {String} packageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The file format of the document. Must be one of the supported formats returned by the getRates operation.
     * @param {Number} opts.dpi The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation.
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetShipmentDocumentsResponse} and HTTP response
     */
    getShipmentDocumentsWithHttpInfo(shipmentId, packageClientReferenceId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getShipmentDocuments");
      }

      // verify the required parameter 'packageClientReferenceId' is set
      if (packageClientReferenceId === undefined || packageClientReferenceId === null) {
        throw new Error("Missing the required parameter 'packageClientReferenceId' when calling getShipmentDocuments");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
        'packageClientReferenceId': packageClientReferenceId,
        'format': opts['format'],
        'dpi': opts['dpi']
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetShipmentDocumentsResponse;

      return this.apiClient.callApi(
        '/shipping/v2/shipments/{shipmentId}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} shipmentId The shipment identifier originally returned by the purchaseShipment operation.
     * @param {String} packageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The file format of the document. Must be one of the supported formats returned by the getRates operation.
     * @param {Number} opts.dpi The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation.
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetShipmentDocumentsResponse}
     */
    getShipmentDocuments(shipmentId, packageClientReferenceId, opts) {
      return this.getShipmentDocumentsWithHttpInfo(shipmentId, packageClientReferenceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} trackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation.
     * @param {String} carrierId A carrier identifier originally returned by the getRates operation for the selected rate.
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetTrackingResponse} and HTTP response
     */
    getTrackingWithHttpInfo(trackingId, carrierId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'trackingId' is set
      if (trackingId === undefined || trackingId === null) {
        throw new Error("Missing the required parameter 'trackingId' when calling getTracking");
      }

      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling getTracking");
      }


      let pathParams = {
      };
      let queryParams = {
        'trackingId': trackingId,
        'carrierId': carrierId
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTrackingResponse;

      return this.apiClient.callApi(
        '/shipping/v2/tracking', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} trackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation.
     * @param {String} carrierId A carrier identifier originally returned by the getRates operation for the selected rate.
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetTrackingResponse}
     */
    getTracking(trackingId, carrierId, opts) {
      return this.getTrackingWithHttpInfo(trackingId, carrierId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GetUnmanifestedShipmentsRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/GetUnmanifestedShipmentsResponse} and HTTP response
     */
    getUnmanifestedShipmentsWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getUnmanifestedShipments");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetUnmanifestedShipmentsResponse;

      return this.apiClient.callApi(
        '/shipping/v2/unmanifestedShipments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/GetUnmanifestedShipmentsRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/GetUnmanifestedShipmentsResponse}
     */
    getUnmanifestedShipments(body, opts) {
      return this.getUnmanifestedShipmentsWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} carrierId The unique identifier associated with the carrier account.
     * @param {module:shippingV2/js-client.shippingV2.model/LinkCarrierAccountRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/LinkCarrierAccountResponse} and HTTP response
     */
    linkCarrierAccountWithHttpInfo(carrierId, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling linkCarrierAccount");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling linkCarrierAccount");
      }


      let pathParams = {
        'carrierId': carrierId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkCarrierAccountResponse;

      return this.apiClient.callApi(
        '/shipping/v2/carrierAccounts/{carrierId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} carrierId The unique identifier associated with the carrier account.
     * @param {module:shippingV2/js-client.shippingV2.model/LinkCarrierAccountRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/LinkCarrierAccountResponse}
     */
    linkCarrierAccount(carrierId, body, opts) {
      return this.linkCarrierAccountWithHttpInfo(carrierId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/OneClickShipmentRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/OneClickShipmentResponse} and HTTP response
     */
    oneClickShipmentWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling oneClickShipment");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OneClickShipmentResponse;

      return this.apiClient.callApi(
        '/shipping/v2/oneClickShipment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/OneClickShipmentRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/OneClickShipmentResponse}
     */
    oneClickShipment(body, opts) {
      return this.oneClickShipmentWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \"TOKEN_EXPIRED\". If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/PurchaseShipmentRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request.
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/PurchaseShipmentResponse} and HTTP response
     */
    purchaseShipmentWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling purchaseShipment");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-IdempotencyKey': opts['xAmznIdempotencyKey'],
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseShipmentResponse;

      return this.apiClient.callApi(
        '/shipping/v2/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \"TOKEN_EXPIRED\". If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shippingV2/js-client.shippingV2.model/PurchaseShipmentRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request.
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/PurchaseShipmentResponse}
     */
    purchaseShipment(body, opts) {
      return this.purchaseShipmentWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} carrierId carrier Id to unlink with merchant.
     * @param {module:shippingV2/js-client.shippingV2.model/UnlinkCarrierAccountRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shippingV2/js-client.shippingV2.model/UnlinkCarrierAccountResponse} and HTTP response
     */
    unlinkCarrierAccountWithHttpInfo(carrierId, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling unlinkCarrierAccount");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unlinkCarrierAccount");
      }


      let pathParams = {
        'carrierId': carrierId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amzn-shipping-business-id': opts['xAmznShippingBusinessId']
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnlinkCarrierAccountResponse;

      return this.apiClient.callApi(
        '/shipping/v2/carrierAccounts/{carrierId}/unlink', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} carrierId carrier Id to unlink with merchant.
     * @param {module:shippingV2/js-client.shippingV2.model/UnlinkCarrierAccountRequest} body 
     * @param {Object} opts Optional parameters
     * @param {module:shippingV2/js-client.shippingV2.model/String} opts.xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shippingV2/js-client.shippingV2.model/UnlinkCarrierAccountResponse}
     */
    unlinkCarrierAccount(carrierId, body, opts) {
      return this.unlinkCarrierAccountWithHttpInfo(carrierId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
