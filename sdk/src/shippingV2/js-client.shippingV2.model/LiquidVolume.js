/*
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The LiquidVolume model module.
 * @module shippingV2/js-client.shippingV2.model/LiquidVolume
 * @version v2
 */
export class LiquidVolume {
  /**
   * Constructs a new <code>LiquidVolume</code>.
   * Liquid Volume.
   * @alias module:shippingV2/js-client.shippingV2.model/LiquidVolume
   * @class
   * @param unit {module:shippingV2/js-client.shippingV2.model/LiquidVolume.UnitEnum} The unit of measurement.
   * @param value {Number} The measurement value.
   */
  constructor(unit, value) {
    this.unit = unit;
    this.value = value;
  }

  /**
   * Constructs a <code>LiquidVolume</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:shippingV2/js-client.shippingV2.model/LiquidVolume} obj Optional instance to populate.
   * @return {module:shippingV2/js-client.shippingV2.model/LiquidVolume} The populated <code>LiquidVolume</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new LiquidVolume();
      if (data.hasOwnProperty('unit'))
        obj.unit = ApiClient.convertToType(data['unit'], 'String');
      if (data.hasOwnProperty('value'))
        obj.value = ApiClient.convertToType(data['value'], 'Number');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
LiquidVolume.UnitEnum = {
  /**
   * value: "ML"
   * @const
   */
  ML: "ML",

  /**
   * value: "L"
   * @const
   */
  L: "L",

  /**
   * value: "FL_OZ"
   * @const
   */
  FL_OZ: "FL_OZ",

  /**
   * value: "GAL"
   * @const
   */
  GAL: "GAL",

  /**
   * value: "PT"
   * @const
   */
  PT: "PT",

  /**
   * value: "QT"
   * @const
   */
  QT: "QT",

  /**
   * value: "C"
   * @const
   */
  C: "C"
};

/**
 * The unit of measurement.
 * @member {module:shippingV2/js-client.shippingV2.model/LiquidVolume.UnitEnum} unit
 */
LiquidVolume.prototype.unit = undefined;

/**
 * The measurement value.
 * @member {Number} value
 */
LiquidVolume.prototype.value = undefined;


