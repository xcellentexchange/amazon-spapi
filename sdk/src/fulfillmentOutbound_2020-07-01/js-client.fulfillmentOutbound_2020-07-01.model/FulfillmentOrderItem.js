/*
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Money} from './Money.js';
import {Quantity} from './Quantity.js';
import {Timestamp} from './Timestamp.js';

/**
 * The FulfillmentOrderItem model module.
 * @module fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/FulfillmentOrderItem
 * @version 2020-07-01
 */
export class FulfillmentOrderItem {
  /**
   * Constructs a new <code>FulfillmentOrderItem</code>.
   * Item information for a fulfillment order.
   * @alias module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/FulfillmentOrderItem
   * @class
   * @param sellerSku {String} The seller SKU of the item.
   * @param sellerFulfillmentOrderItemId {String} A fulfillment order item identifier submitted with a call to the `createFulfillmentOrder` operation.
   * @param quantity {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Quantity} 
   * @param cancelledQuantity {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Quantity} The item quantity that was cancelled by the seller.
   * @param unfulfillableQuantity {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Quantity} The item quantity that is unfulfillable.
   */
  constructor(sellerSku, sellerFulfillmentOrderItemId, quantity, cancelledQuantity, unfulfillableQuantity) {
    this.sellerSku = sellerSku;
    this.sellerFulfillmentOrderItemId = sellerFulfillmentOrderItemId;
    this.quantity = quantity;
    this.cancelledQuantity = cancelledQuantity;
    this.unfulfillableQuantity = unfulfillableQuantity;
  }

  /**
   * Constructs a <code>FulfillmentOrderItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/FulfillmentOrderItem} obj Optional instance to populate.
   * @return {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/FulfillmentOrderItem} The populated <code>FulfillmentOrderItem</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new FulfillmentOrderItem();
      if (data.hasOwnProperty('sellerSku'))
        obj.sellerSku = ApiClient.convertToType(data['sellerSku'], 'String');
      if (data.hasOwnProperty('sellerFulfillmentOrderItemId'))
        obj.sellerFulfillmentOrderItemId = ApiClient.convertToType(data['sellerFulfillmentOrderItemId'], 'String');
      if (data.hasOwnProperty('quantity'))
        obj.quantity = Quantity.constructFromObject(data['quantity']);
      if (data.hasOwnProperty('giftMessage'))
        obj.giftMessage = ApiClient.convertToType(data['giftMessage'], 'String');
      if (data.hasOwnProperty('displayableComment'))
        obj.displayableComment = ApiClient.convertToType(data['displayableComment'], 'String');
      if (data.hasOwnProperty('fulfillmentNetworkSku'))
        obj.fulfillmentNetworkSku = ApiClient.convertToType(data['fulfillmentNetworkSku'], 'String');
      if (data.hasOwnProperty('orderItemDisposition'))
        obj.orderItemDisposition = ApiClient.convertToType(data['orderItemDisposition'], 'String');
      if (data.hasOwnProperty('cancelledQuantity'))
        obj.cancelledQuantity = Quantity.constructFromObject(data['cancelledQuantity']);
      if (data.hasOwnProperty('unfulfillableQuantity'))
        obj.unfulfillableQuantity = Quantity.constructFromObject(data['unfulfillableQuantity']);
      if (data.hasOwnProperty('estimatedShipDate'))
        obj.estimatedShipDate = Timestamp.constructFromObject(data['estimatedShipDate']);
      if (data.hasOwnProperty('estimatedArrivalDate'))
        obj.estimatedArrivalDate = Timestamp.constructFromObject(data['estimatedArrivalDate']);
      if (data.hasOwnProperty('perUnitPrice'))
        obj.perUnitPrice = Money.constructFromObject(data['perUnitPrice']);
      if (data.hasOwnProperty('perUnitTax'))
        obj.perUnitTax = Money.constructFromObject(data['perUnitTax']);
      if (data.hasOwnProperty('perUnitDeclaredValue'))
        obj.perUnitDeclaredValue = Money.constructFromObject(data['perUnitDeclaredValue']);
    }
    return obj;
  }
}

/**
 * The seller SKU of the item.
 * @member {String} sellerSku
 */
FulfillmentOrderItem.prototype.sellerSku = undefined;

/**
 * A fulfillment order item identifier submitted with a call to the `createFulfillmentOrder` operation.
 * @member {String} sellerFulfillmentOrderItemId
 */
FulfillmentOrderItem.prototype.sellerFulfillmentOrderItemId = undefined;

/**
 * @member {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Quantity} quantity
 */
FulfillmentOrderItem.prototype.quantity = undefined;

/**
 * A message to the gift recipient, if applicable.
 * @member {String} giftMessage
 */
FulfillmentOrderItem.prototype.giftMessage = undefined;

/**
 * Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
 * @member {String} displayableComment
 */
FulfillmentOrderItem.prototype.displayableComment = undefined;

/**
 * Amazon's fulfillment network SKU of the item.
 * @member {String} fulfillmentNetworkSku
 */
FulfillmentOrderItem.prototype.fulfillmentNetworkSku = undefined;

/**
 * Indicates whether the item is sellable or unsellable.
 * @member {String} orderItemDisposition
 */
FulfillmentOrderItem.prototype.orderItemDisposition = undefined;

/**
 * The item quantity that was cancelled by the seller.
 * @member {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Quantity} cancelledQuantity
 */
FulfillmentOrderItem.prototype.cancelledQuantity = undefined;

/**
 * The item quantity that is unfulfillable.
 * @member {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Quantity} unfulfillableQuantity
 */
FulfillmentOrderItem.prototype.unfulfillableQuantity = undefined;

/**
 * The estimated date and time that the item quantity is scheduled to ship from the fulfillment center. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, `estimatedShipDate` is not returned.
 * @member {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Timestamp} estimatedShipDate
 */
FulfillmentOrderItem.prototype.estimatedShipDate = undefined;

/**
 * The estimated arrival date and time of the item quantity. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, `estimatedArrivalDate` is not returned.
 * @member {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Timestamp} estimatedArrivalDate
 */
FulfillmentOrderItem.prototype.estimatedArrivalDate = undefined;

/**
 * The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
 * @member {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Money} perUnitPrice
 */
FulfillmentOrderItem.prototype.perUnitPrice = undefined;

/**
 * The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
 * @member {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Money} perUnitTax
 */
FulfillmentOrderItem.prototype.perUnitTax = undefined;

/**
 * The monetary value assigned by the seller to this item. This is a required field for India MCF orders.
 * @member {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/Money} perUnitDeclaredValue
 */
FulfillmentOrderItem.prototype.perUnitDeclaredValue = undefined;


