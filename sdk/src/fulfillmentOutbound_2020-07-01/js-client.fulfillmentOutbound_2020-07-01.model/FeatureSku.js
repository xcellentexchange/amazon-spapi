/*
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The FeatureSku model module.
 * @module fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/FeatureSku
 * @version 2020-07-01
 */
export class FeatureSku {
  /**
   * Constructs a new <code>FeatureSku</code>.
   * Information about an SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.
   * @alias module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/FeatureSku
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>FeatureSku</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/FeatureSku} obj Optional instance to populate.
   * @return {module:fulfillmentOutbound_2020-07-01/js-client.fulfillmentOutbound_2020-07-01.model/FeatureSku} The populated <code>FeatureSku</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new FeatureSku();
      if (data.hasOwnProperty('sellerSku'))
        obj.sellerSku = ApiClient.convertToType(data['sellerSku'], 'String');
      if (data.hasOwnProperty('fnSku'))
        obj.fnSku = ApiClient.convertToType(data['fnSku'], 'String');
      if (data.hasOwnProperty('asin'))
        obj.asin = ApiClient.convertToType(data['asin'], 'String');
      if (data.hasOwnProperty('skuCount'))
        obj.skuCount = ApiClient.convertToType(data['skuCount'], 'Number');
      if (data.hasOwnProperty('overlappingSkus'))
        obj.overlappingSkus = ApiClient.convertToType(data['overlappingSkus'], ['String']);
    }
    return obj;
  }
}

/**
 * Used to identify an item in the given marketplace. `SellerSKU` is qualified by the seller's SellerId, which is included with every operation that you submit.
 * @member {String} sellerSku
 */
FeatureSku.prototype.sellerSku = undefined;

/**
 * The unique SKU used by Amazon's fulfillment network.
 * @member {String} fnSku
 */
FeatureSku.prototype.fnSku = undefined;

/**
 * The Amazon Standard Identification Number (ASIN) of the item.
 * @member {String} asin
 */
FeatureSku.prototype.asin = undefined;

/**
 * The number of SKUs available for this service.
 * @member {Number} skuCount
 */
FeatureSku.prototype.skuCount = undefined;

/**
 * Other seller SKUs that are shared across the same inventory.
 * @member {Array.<String>} overlappingSkus
 */
FeatureSku.prototype.overlappingSkus = undefined;


