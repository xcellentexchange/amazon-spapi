/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {BuyBoxEligibleOffers} from './BuyBoxEligibleOffers.js';
import {BuyBoxPrices} from './BuyBoxPrices.js';
import {LowestPrices} from './LowestPrices.js';
import {MoneyType} from './MoneyType.js';
import {NumberOfOffers} from './NumberOfOffers.js';
import {SalesRankList} from './SalesRankList.js';

/**
 * The Summary model module.
 * @module productPricingV0/js-client.productPricingV0.model/Summary
 * @version v0
 */
export class Summary {
  /**
   * Constructs a new <code>Summary</code>.
   * Contains price information about the product, including the LowestPrices and BuyBoxPrices, the ListPrice, the SuggestedLowerPricePlusShipping, and NumberOfOffers and NumberOfBuyBoxEligibleOffers.
   * @alias module:productPricingV0/js-client.productPricingV0.model/Summary
   * @class
   * @param totalOfferCount {Number} The number of unique offers contained in NumberOfOffers.
   */
  constructor(totalOfferCount) {
    this.totalOfferCount = totalOfferCount;
  }

  /**
   * Constructs a <code>Summary</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:productPricingV0/js-client.productPricingV0.model/Summary} obj Optional instance to populate.
   * @return {module:productPricingV0/js-client.productPricingV0.model/Summary} The populated <code>Summary</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Summary();
      if (data.hasOwnProperty('TotalOfferCount'))
        obj.totalOfferCount = ApiClient.convertToType(data['TotalOfferCount'], 'Number');
      if (data.hasOwnProperty('NumberOfOffers'))
        obj.numberOfOffers = NumberOfOffers.constructFromObject(data['NumberOfOffers']);
      if (data.hasOwnProperty('LowestPrices'))
        obj.lowestPrices = LowestPrices.constructFromObject(data['LowestPrices']);
      if (data.hasOwnProperty('BuyBoxPrices'))
        obj.buyBoxPrices = BuyBoxPrices.constructFromObject(data['BuyBoxPrices']);
      if (data.hasOwnProperty('ListPrice'))
        obj.listPrice = MoneyType.constructFromObject(data['ListPrice']);
      if (data.hasOwnProperty('CompetitivePriceThreshold'))
        obj.competitivePriceThreshold = MoneyType.constructFromObject(data['CompetitivePriceThreshold']);
      if (data.hasOwnProperty('SuggestedLowerPricePlusShipping'))
        obj.suggestedLowerPricePlusShipping = MoneyType.constructFromObject(data['SuggestedLowerPricePlusShipping']);
      if (data.hasOwnProperty('SalesRankings'))
        obj.salesRankings = SalesRankList.constructFromObject(data['SalesRankings']);
      if (data.hasOwnProperty('BuyBoxEligibleOffers'))
        obj.buyBoxEligibleOffers = BuyBoxEligibleOffers.constructFromObject(data['BuyBoxEligibleOffers']);
      if (data.hasOwnProperty('OffersAvailableTime'))
        obj.offersAvailableTime = ApiClient.convertToType(data['OffersAvailableTime'], 'Date');
    }
    return obj;
  }
}

/**
 * The number of unique offers contained in NumberOfOffers.
 * @member {Number} totalOfferCount
 */
Summary.prototype.totalOfferCount = undefined;

/**
 * A list that contains the total number of offers for the item for the given conditions and fulfillment channels.
 * @member {module:productPricingV0/js-client.productPricingV0.model/NumberOfOffers} numberOfOffers
 */
Summary.prototype.numberOfOffers = undefined;

/**
 * A list of the lowest prices for the item.
 * @member {module:productPricingV0/js-client.productPricingV0.model/LowestPrices} lowestPrices
 */
Summary.prototype.lowestPrices = undefined;

/**
 * A list of item prices.
 * @member {module:productPricingV0/js-client.productPricingV0.model/BuyBoxPrices} buyBoxPrices
 */
Summary.prototype.buyBoxPrices = undefined;

/**
 * The list price of the item as suggested by the manufacturer.
 * @member {module:productPricingV0/js-client.productPricingV0.model/MoneyType} listPrice
 */
Summary.prototype.listPrice = undefined;

/**
 * This price is based on competitive prices from other retailers (excluding other Amazon sellers). The offer may be ineligible for the Buy Box if the seller's price + shipping (minus Amazon Points) is greater than this competitive price.
 * @member {module:productPricingV0/js-client.productPricingV0.model/MoneyType} competitivePriceThreshold
 */
Summary.prototype.competitivePriceThreshold = undefined;

/**
 * The suggested lower price of the item, including shipping and Amazon Points. The suggested lower price is based on a range of factors, including historical selling prices, recent Buy Box-eligible prices, and input from customers for your products.
 * @member {module:productPricingV0/js-client.productPricingV0.model/MoneyType} suggestedLowerPricePlusShipping
 */
Summary.prototype.suggestedLowerPricePlusShipping = undefined;

/**
 * A list that contains the sales rank of the item in the given product categories.
 * @member {module:productPricingV0/js-client.productPricingV0.model/SalesRankList} salesRankings
 */
Summary.prototype.salesRankings = undefined;

/**
 * A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and fulfillment channels.
 * @member {module:productPricingV0/js-client.productPricingV0.model/BuyBoxEligibleOffers} buyBoxEligibleOffers
 */
Summary.prototype.buyBoxEligibleOffers = undefined;

/**
 * When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing.
 * @member {Date} offersAvailableTime
 */
Summary.prototype.offersAvailableTime = undefined;


