/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {Errors} from '../js-client.productPricingV0.model/Errors.js';
import {GetItemOffersBatchRequest} from '../js-client.productPricingV0.model/GetItemOffersBatchRequest.js';
import {GetItemOffersBatchResponse} from '../js-client.productPricingV0.model/GetItemOffersBatchResponse.js';
import {GetListingOffersBatchRequest} from '../js-client.productPricingV0.model/GetListingOffersBatchRequest.js';
import {GetListingOffersBatchResponse} from '../js-client.productPricingV0.model/GetListingOffersBatchResponse.js';
import {GetOffersResponse} from '../js-client.productPricingV0.model/GetOffersResponse.js';
import {GetPricingResponse} from '../js-client.productPricingV0.model/GetPricingResponse.js';

/**
* ProductPricing service.
* @module productPricingV0/js-client.productPricingV0.api/ProductPricingApi
* @version v0
*/
export class ProductPricingApi {

    /**
    * Constructs a new ProductPricingApi. 
    * @alias module:productPricingV0/js-client.productPricingV0.api/ProductPricingApi
    * @class
    * @param {module:productPricingV0/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:productPricingV0/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns competitive pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.asins A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @param {Array.<String>} opts.skus A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.customerType Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetPricingResponse} and HTTP response
     */
    getCompetitivePricingWithHttpInfo(marketplaceId, itemType, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getCompetitivePricing");
      }

      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling getCompetitivePricing");
      }


      let pathParams = {
      };
      let queryParams = {
        'MarketplaceId': marketplaceId,
        'Asins': this.apiClient.buildCollectionParam(opts['asins'], 'csv'),
        'Skus': this.apiClient.buildCollectionParam(opts['skus'], 'csv'),
        'ItemType': itemType,
        'CustomerType': opts['customerType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPricingResponse;

      return this.apiClient.callApi(
        '/products/pricing/v0/competitivePrice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns competitive pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.asins A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @param {Array.<String>} opts.skus A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.customerType Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetPricingResponse}
     */
    getCompetitivePricing(marketplaceId, itemType, opts) {
      return this.getCompetitivePricingWithHttpInfo(marketplaceId, itemType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @param {String} asin The Amazon Standard Identification Number (ASIN) of the item.
     * @param {Object} opts Optional parameters
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.customerType Indicates whether to request Consumer or Business offers. Default is Consumer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetOffersResponse} and HTTP response
     */
    getItemOffersWithHttpInfo(marketplaceId, itemCondition, asin, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getItemOffers");
      }

      // verify the required parameter 'itemCondition' is set
      if (itemCondition === undefined || itemCondition === null) {
        throw new Error("Missing the required parameter 'itemCondition' when calling getItemOffers");
      }

      // verify the required parameter 'asin' is set
      if (asin === undefined || asin === null) {
        throw new Error("Missing the required parameter 'asin' when calling getItemOffers");
      }


      let pathParams = {
        'Asin': asin
      };
      let queryParams = {
        'MarketplaceId': marketplaceId,
        'ItemCondition': itemCondition,
        'CustomerType': opts['customerType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOffersResponse;

      return this.apiClient.callApi(
        '/products/pricing/v0/items/{Asin}/offers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @param {String} asin The Amazon Standard Identification Number (ASIN) of the item.
     * @param {Object} opts Optional parameters
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.customerType Indicates whether to request Consumer or Business offers. Default is Consumer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetOffersResponse}
     */
    getItemOffers(marketplaceId, itemCondition, asin, opts) {
      return this.getItemOffersWithHttpInfo(marketplaceId, itemCondition, asin, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:productPricingV0/js-client.productPricingV0.model/GetItemOffersBatchRequest} getItemOffersBatchRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetItemOffersBatchResponse} and HTTP response
     */
    getItemOffersBatchWithHttpInfo(getItemOffersBatchRequestBody) {
      let postBody = getItemOffersBatchRequestBody;

      // verify the required parameter 'getItemOffersBatchRequestBody' is set
      if (getItemOffersBatchRequestBody === undefined || getItemOffersBatchRequestBody === null) {
        throw new Error("Missing the required parameter 'getItemOffersBatchRequestBody' when calling getItemOffersBatch");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetItemOffersBatchResponse;

      return this.apiClient.callApi(
        '/batches/products/pricing/v0/itemOffers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:productPricingV0/js-client.productPricingV0.model/GetItemOffersBatchRequest} getItemOffersBatchRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetItemOffersBatchResponse}
     */
    getItemOffersBatch(getItemOffersBatchRequestBody) {
      return this.getItemOffersBatchWithHttpInfo(getItemOffersBatchRequestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the lowest priced offers for a single SKU listing.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @param {String} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
     * @param {Object} opts Optional parameters
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.customerType Indicates whether to request Consumer or Business offers. Default is Consumer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetOffersResponse} and HTTP response
     */
    getListingOffersWithHttpInfo(marketplaceId, itemCondition, sellerSKU, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getListingOffers");
      }

      // verify the required parameter 'itemCondition' is set
      if (itemCondition === undefined || itemCondition === null) {
        throw new Error("Missing the required parameter 'itemCondition' when calling getListingOffers");
      }

      // verify the required parameter 'sellerSKU' is set
      if (sellerSKU === undefined || sellerSKU === null) {
        throw new Error("Missing the required parameter 'sellerSKU' when calling getListingOffers");
      }


      let pathParams = {
        'SellerSKU': sellerSKU
      };
      let queryParams = {
        'MarketplaceId': marketplaceId,
        'ItemCondition': itemCondition,
        'CustomerType': opts['customerType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOffersResponse;

      return this.apiClient.callApi(
        '/products/pricing/v0/listings/{SellerSKU}/offers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the lowest priced offers for a single SKU listing.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @param {String} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
     * @param {Object} opts Optional parameters
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.customerType Indicates whether to request Consumer or Business offers. Default is Consumer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetOffersResponse}
     */
    getListingOffers(marketplaceId, itemCondition, sellerSKU, opts) {
      return this.getListingOffersWithHttpInfo(marketplaceId, itemCondition, sellerSKU, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:productPricingV0/js-client.productPricingV0.model/GetListingOffersBatchRequest} getListingOffersBatchRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetListingOffersBatchResponse} and HTTP response
     */
    getListingOffersBatchWithHttpInfo(getListingOffersBatchRequestBody) {
      let postBody = getListingOffersBatchRequestBody;

      // verify the required parameter 'getListingOffersBatchRequestBody' is set
      if (getListingOffersBatchRequestBody === undefined || getListingOffersBatchRequestBody === null) {
        throw new Error("Missing the required parameter 'getListingOffersBatchRequestBody' when calling getListingOffersBatch");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetListingOffersBatchResponse;

      return this.apiClient.callApi(
        '/batches/products/pricing/v0/listingOffers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:productPricingV0/js-client.productPricingV0.model/GetListingOffersBatchRequest} getListingOffersBatchRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetListingOffersBatchResponse}
     */
    getListingOffersBatch(getListingOffersBatchRequestBody) {
      return this.getListingOffersBatchWithHttpInfo(getListingOffersBatchRequestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.asins A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @param {Array.<String>} opts.skus A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.offerType Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetPricingResponse} and HTTP response
     */
    getPricingWithHttpInfo(marketplaceId, itemType, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getPricing");
      }

      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling getPricing");
      }


      let pathParams = {
      };
      let queryParams = {
        'MarketplaceId': marketplaceId,
        'Asins': this.apiClient.buildCollectionParam(opts['asins'], 'csv'),
        'Skus': this.apiClient.buildCollectionParam(opts['skus'], 'csv'),
        'ItemType': itemType,
        'ItemCondition': opts['itemCondition'],
        'OfferType': opts['offerType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPricingResponse;

      return this.apiClient.callApi(
        '/products/pricing/v0/price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.asins A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @param {Array.<String>} opts.skus A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @param {module:productPricingV0/js-client.productPricingV0.model/String} opts.offerType Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:productPricingV0/js-client.productPricingV0.model/GetPricingResponse}
     */
    getPricing(marketplaceId, itemType, opts) {
      return this.getPricingWithHttpInfo(marketplaceId, itemType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
