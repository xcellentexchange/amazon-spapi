/*
 * Selling Partner API for Direct Fulfillment Shipping
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The LabelData model module.
 * @module vendorDirectFulfillmentShippingV1/js-client.vendorDirectFulfillmentShippingV1.model/LabelData
 * @version v1
 */
export class LabelData {
  /**
   * Constructs a new <code>LabelData</code>.
   * Details of the shipment label.
   * @alias module:vendorDirectFulfillmentShippingV1/js-client.vendorDirectFulfillmentShippingV1.model/LabelData
   * @class
   * @param content {String} This field will contain the Base64encoded string of the shipment label content.
   */
  constructor(content) {
    this.content = content;
  }

  /**
   * Constructs a <code>LabelData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:vendorDirectFulfillmentShippingV1/js-client.vendorDirectFulfillmentShippingV1.model/LabelData} obj Optional instance to populate.
   * @return {module:vendorDirectFulfillmentShippingV1/js-client.vendorDirectFulfillmentShippingV1.model/LabelData} The populated <code>LabelData</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new LabelData();
      if (data.hasOwnProperty('packageIdentifier'))
        obj.packageIdentifier = ApiClient.convertToType(data['packageIdentifier'], 'String');
      if (data.hasOwnProperty('trackingNumber'))
        obj.trackingNumber = ApiClient.convertToType(data['trackingNumber'], 'String');
      if (data.hasOwnProperty('shipMethod'))
        obj.shipMethod = ApiClient.convertToType(data['shipMethod'], 'String');
      if (data.hasOwnProperty('shipMethodName'))
        obj.shipMethodName = ApiClient.convertToType(data['shipMethodName'], 'String');
      if (data.hasOwnProperty('content'))
        obj.content = ApiClient.convertToType(data['content'], 'String');
    }
    return obj;
  }
}

/**
 * Identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.
 * @member {String} packageIdentifier
 */
LabelData.prototype.packageIdentifier = undefined;

/**
 * Package tracking identifier from the shipping carrier.
 * @member {String} trackingNumber
 */
LabelData.prototype.trackingNumber = undefined;

/**
 * Ship method to be used for shipping the order. Amazon defines ship method codes indicating shipping carrier and shipment service level. Ship method codes are case and format sensitive. The same ship method code should returned on the shipment confirmation. Note that the ship method codes are vendor specific and will be provided to each vendor during the implementation.
 * @member {String} shipMethod
 */
LabelData.prototype.shipMethod = undefined;

/**
 * Shipping method name for internal reference.
 * @member {String} shipMethodName
 */
LabelData.prototype.shipMethodName = undefined;

/**
 * This field will contain the Base64encoded string of the shipment label content.
 * @member {String} content
 */
LabelData.prototype.content = undefined;


