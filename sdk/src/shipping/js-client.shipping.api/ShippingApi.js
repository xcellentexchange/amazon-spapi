/*
 * Selling Partner API for Shipping
 * Provides programmatic access to Amazon Shipping APIs.   **Note:** If you are new to the Amazon Shipping API, refer to the latest version of <a href=\"https://developer-docs.amazon.com/amazon-shipping/docs/shipping-api-v2-reference\">Amazon Shipping API (v2)</a> on the <a href=\"https://developer-docs.amazon.com/amazon-shipping/\">Amazon Shipping Developer Documentation</a> site.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {CancelShipmentResponse} from '../js-client.shipping.model/CancelShipmentResponse.js';
import {CreateShipmentRequest} from '../js-client.shipping.model/CreateShipmentRequest.js';
import {CreateShipmentResponse} from '../js-client.shipping.model/CreateShipmentResponse.js';
import {GetAccountResponse} from '../js-client.shipping.model/GetAccountResponse.js';
import {GetRatesRequest} from '../js-client.shipping.model/GetRatesRequest.js';
import {GetRatesResponse} from '../js-client.shipping.model/GetRatesResponse.js';
import {GetShipmentResponse} from '../js-client.shipping.model/GetShipmentResponse.js';
import {GetTrackingInformationResponse} from '../js-client.shipping.model/GetTrackingInformationResponse.js';
import {PurchaseLabelsRequest} from '../js-client.shipping.model/PurchaseLabelsRequest.js';
import {PurchaseLabelsResponse} from '../js-client.shipping.model/PurchaseLabelsResponse.js';
import {PurchaseShipmentRequest} from '../js-client.shipping.model/PurchaseShipmentRequest.js';
import {PurchaseShipmentResponse} from '../js-client.shipping.model/PurchaseShipmentResponse.js';
import {RetrieveShippingLabelRequest} from '../js-client.shipping.model/RetrieveShippingLabelRequest.js';
import {RetrieveShippingLabelResponse} from '../js-client.shipping.model/RetrieveShippingLabelResponse.js';

/**
* Shipping service.
* @module shipping/js-client.shipping.api/ShippingApi
* @version v1
*/
export class ShippingApi {

    /**
    * Constructs a new ShippingApi. 
    * @alias module:shipping/js-client.shipping.api/ShippingApi
    * @class
    * @param {module:shipping/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:shipping/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel a shipment by the given shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shipping/js-client.shipping.model/CancelShipmentResponse} and HTTP response
     */
    cancelShipmentWithHttpInfo(shipmentId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling cancelShipment");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelShipmentResponse;

      return this.apiClient.callApi(
        '/shipping/v1/shipments/{shipmentId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel a shipment by the given shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shipping/js-client.shipping.model/CancelShipmentResponse}
     */
    cancelShipment(shipmentId) {
      return this.cancelShipmentWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shipping/js-client.shipping.model/CreateShipmentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shipping/js-client.shipping.model/CreateShipmentResponse} and HTTP response
     */
    createShipmentWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createShipment");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateShipmentResponse;

      return this.apiClient.callApi(
        '/shipping/v1/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:shipping/js-client.shipping.model/CreateShipmentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shipping/js-client.shipping.model/CreateShipmentResponse}
     */
    createShipment(body) {
      return this.createShipmentWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Verify if the current account is valid.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shipping/js-client.shipping.model/GetAccountResponse} and HTTP response
     */
    getAccountWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccountResponse;

      return this.apiClient.callApi(
        '/shipping/v1/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Verify if the current account is valid.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shipping/js-client.shipping.model/GetAccountResponse}
     */
    getAccount() {
      return this.getAccountWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get service rates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {module:shipping/js-client.shipping.model/GetRatesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shipping/js-client.shipping.model/GetRatesResponse} and HTTP response
     */
    getRatesWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRates");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRatesResponse;

      return this.apiClient.callApi(
        '/shipping/v1/rates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Get service rates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {module:shipping/js-client.shipping.model/GetRatesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shipping/js-client.shipping.model/GetRatesResponse}
     */
    getRates(body) {
      return this.getRatesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return the entire shipment object for the shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shipping/js-client.shipping.model/GetShipmentResponse} and HTTP response
     */
    getShipmentWithHttpInfo(shipmentId) {
      let postBody = null;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getShipment");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetShipmentResponse;

      return this.apiClient.callApi(
        '/shipping/v1/shipments/{shipmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Return the entire shipment object for the shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shipping/js-client.shipping.model/GetShipmentResponse}
     */
    getShipment(shipmentId) {
      return this.getShipmentWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return the tracking information of a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} trackingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shipping/js-client.shipping.model/GetTrackingInformationResponse} and HTTP response
     */
    getTrackingInformationWithHttpInfo(trackingId) {
      let postBody = null;

      // verify the required parameter 'trackingId' is set
      if (trackingId === undefined || trackingId === null) {
        throw new Error("Missing the required parameter 'trackingId' when calling getTrackingInformation");
      }


      let pathParams = {
        'trackingId': trackingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTrackingInformationResponse;

      return this.apiClient.callApi(
        '/shipping/v1/tracking/{trackingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Return the tracking information of a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} trackingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shipping/js-client.shipping.model/GetTrackingInformationResponse}
     */
    getTrackingInformation(trackingId) {
      return this.getTrackingInformationWithHttpInfo(trackingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Purchase shipping labels based on a given rate.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} shipmentId 
     * @param {module:shipping/js-client.shipping.model/PurchaseLabelsRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shipping/js-client.shipping.model/PurchaseLabelsResponse} and HTTP response
     */
    purchaseLabelsWithHttpInfo(shipmentId, body) {
      let postBody = body;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling purchaseLabels");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling purchaseLabels");
      }


      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseLabelsResponse;

      return this.apiClient.callApi(
        '/shipping/v1/shipments/{shipmentId}/purchaseLabels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Purchase shipping labels based on a given rate.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} shipmentId 
     * @param {module:shipping/js-client.shipping.model/PurchaseLabelsRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shipping/js-client.shipping.model/PurchaseLabelsResponse}
     */
    purchaseLabels(shipmentId, body) {
      return this.purchaseLabelsWithHttpInfo(shipmentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Purchase shipping labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {module:shipping/js-client.shipping.model/PurchaseShipmentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shipping/js-client.shipping.model/PurchaseShipmentResponse} and HTTP response
     */
    purchaseShipmentWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling purchaseShipment");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseShipmentResponse;

      return this.apiClient.callApi(
        '/shipping/v1/purchaseShipment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Purchase shipping labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {module:shipping/js-client.shipping.model/PurchaseShipmentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shipping/js-client.shipping.model/PurchaseShipmentResponse}
     */
    purchaseShipment(body) {
      return this.purchaseShipmentWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve shipping label based on the shipment id and tracking id.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} shipmentId 
     * @param {String} trackingId 
     * @param {module:shipping/js-client.shipping.model/RetrieveShippingLabelRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:shipping/js-client.shipping.model/RetrieveShippingLabelResponse} and HTTP response
     */
    retrieveShippingLabelWithHttpInfo(shipmentId, trackingId, body) {
      let postBody = body;

      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling retrieveShippingLabel");
      }

      // verify the required parameter 'trackingId' is set
      if (trackingId === undefined || trackingId === null) {
        throw new Error("Missing the required parameter 'trackingId' when calling retrieveShippingLabel");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling retrieveShippingLabel");
      }


      let pathParams = {
        'shipmentId': shipmentId,
        'trackingId': trackingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetrieveShippingLabelResponse;

      return this.apiClient.callApi(
        '/shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve shipping label based on the shipment id and tracking id.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {String} shipmentId 
     * @param {String} trackingId 
     * @param {module:shipping/js-client.shipping.model/RetrieveShippingLabelRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:shipping/js-client.shipping.model/RetrieveShippingLabelResponse}
     */
    retrieveShippingLabel(shipmentId, trackingId, body) {
      return this.retrieveShippingLabelWithHttpInfo(shipmentId, trackingId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
