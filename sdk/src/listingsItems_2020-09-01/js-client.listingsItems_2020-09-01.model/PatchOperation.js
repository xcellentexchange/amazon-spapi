/*
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listing Items API Use Case Guide](doc:listings-items-api-v2020-09-01-use-case-guide).
 *
 * OpenAPI spec version: 2020-09-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The PatchOperation model module.
 * @module listingsItems_2020-09-01/js-client.listingsItems_2020-09-01.model/PatchOperation
 * @version 2020-09-01
 */
export class PatchOperation {
  /**
   * Constructs a new <code>PatchOperation</code>.
   * Individual JSON Patch operation for an HTTP PATCH request.
   * @alias module:listingsItems_2020-09-01/js-client.listingsItems_2020-09-01.model/PatchOperation
   * @class
   * @param op {module:listingsItems_2020-09-01/js-client.listingsItems_2020-09-01.model/PatchOperation.OpEnum} Type of JSON Patch operation. Supported JSON Patch operations include add, replace, and delete. See <https://tools.ietf.org/html/rfc6902>.
   * @param path {String} JSON Pointer path of the element to patch. See <https://tools.ietf.org/html/rfc6902>.
   */
  constructor(op, path) {
    this.op = op;
    this.path = path;
  }

  /**
   * Constructs a <code>PatchOperation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:listingsItems_2020-09-01/js-client.listingsItems_2020-09-01.model/PatchOperation} obj Optional instance to populate.
   * @return {module:listingsItems_2020-09-01/js-client.listingsItems_2020-09-01.model/PatchOperation} The populated <code>PatchOperation</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new PatchOperation();
      if (data.hasOwnProperty('op'))
        obj.op = ApiClient.convertToType(data['op'], 'String');
      if (data.hasOwnProperty('path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
      if (data.hasOwnProperty('value'))
        obj.value = ApiClient.convertToType(data['value'], [Object]);
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
PatchOperation.OpEnum = {
  /**
   * value: "add"
   * @const
   */
  add: "add",

  /**
   * value: "replace"
   * @const
   */
  replace: "replace",

  /**
   * value: "delete"
   * @const
   */
  _delete: "delete"
};

/**
 * Type of JSON Patch operation. Supported JSON Patch operations include add, replace, and delete. See <https://tools.ietf.org/html/rfc6902>.
 * @member {module:listingsItems_2020-09-01/js-client.listingsItems_2020-09-01.model/PatchOperation.OpEnum} op
 */
PatchOperation.prototype.op = undefined;

/**
 * JSON Pointer path of the element to patch. See <https://tools.ietf.org/html/rfc6902>.
 * @member {String} path
 */
PatchOperation.prototype.path = undefined;

/**
 * JSON value to add, replace, or delete.
 * @member {Array.<Object>} value
 */
PatchOperation.prototype.value = undefined;


