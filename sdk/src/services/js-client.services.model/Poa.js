/*
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {AppointmentTime} from './AppointmentTime.js';
import {Technician} from './Technician.js';

/**
 * The Poa model module.
 * @module services/js-client.services.model/Poa
 * @version v1
 */
export class Poa {
  /**
   * Constructs a new <code>Poa</code>.
   * Proof of Appointment (POA) details.
   * @alias module:services/js-client.services.model/Poa
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Poa</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:services/js-client.services.model/Poa} obj Optional instance to populate.
   * @return {module:services/js-client.services.model/Poa} The populated <code>Poa</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Poa();
      if (data.hasOwnProperty('appointmentTime'))
        obj.appointmentTime = AppointmentTime.constructFromObject(data['appointmentTime']);
      if (data.hasOwnProperty('technicians'))
        obj.technicians = ApiClient.convertToType(data['technicians'], [Technician]);
      if (data.hasOwnProperty('uploadingTechnician'))
        obj.uploadingTechnician = ApiClient.convertToType(data['uploadingTechnician'], 'String');
      if (data.hasOwnProperty('uploadTime'))
        obj.uploadTime = ApiClient.convertToType(data['uploadTime'], 'Date');
      if (data.hasOwnProperty('poaType'))
        obj.poaType = ApiClient.convertToType(data['poaType'], 'String');
    }
    return obj;
  }
}

/**
 * The time of the appointment window.
 * @member {module:services/js-client.services.model/AppointmentTime} appointmentTime
 */
Poa.prototype.appointmentTime = undefined;

/**
 * A list of technicians.
 * @member {Array.<module:services/js-client.services.model/Technician>} technicians
 */
Poa.prototype.technicians = undefined;

/**
 * The identifier of the technician who uploaded the POA.
 * @member {String} uploadingTechnician
 */
Poa.prototype.uploadingTechnician = undefined;

/**
 * The date and time when the POA was uploaded in ISO 8601 format.
 * @member {Date} uploadTime
 */
Poa.prototype.uploadTime = undefined;

/**
 * Allowed values for the <code>poaType</code> property.
 * @enum {String}
 * @readonly
 */
Poa.PoaTypeEnum = {
  /**
   * value: "NO_SIGNATURE_DUMMY_POS"
   * @const
   */
  NO_SIGNATURE_DUMMY_POS: "NO_SIGNATURE_DUMMY_POS",

  /**
   * value: "CUSTOMER_SIGNATURE"
   * @const
   */
  CUSTOMER_SIGNATURE: "CUSTOMER_SIGNATURE",

  /**
   * value: "DUMMY_RECEIPT"
   * @const
   */
  DUMMY_RECEIPT: "DUMMY_RECEIPT",

  /**
   * value: "POA_RECEIPT"
   * @const
   */
  POA_RECEIPT: "POA_RECEIPT"
};

/**
 * The type of POA uploaded.
 * @member {module:services/js-client.services.model/Poa.PoaTypeEnum} poaType
 */
Poa.prototype.poaType = undefined;


