/*
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The ServiceUploadDocument model module.
 * @module services/js-client.services.model/ServiceUploadDocument
 * @version v1
 */
export class ServiceUploadDocument {
  /**
   * Constructs a new <code>ServiceUploadDocument</code>.
   * Input for to be uploaded document.
   * @alias module:services/js-client.services.model/ServiceUploadDocument
   * @class
   * @param contentType {module:services/js-client.services.model/ServiceUploadDocument.ContentTypeEnum} The content type of the to-be-uploaded file
   * @param contentLength {Number} The content length of the to-be-uploaded file
   */
  constructor(contentType, contentLength) {
    this.contentType = contentType;
    this.contentLength = contentLength;
  }

  /**
   * Constructs a <code>ServiceUploadDocument</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:services/js-client.services.model/ServiceUploadDocument} obj Optional instance to populate.
   * @return {module:services/js-client.services.model/ServiceUploadDocument} The populated <code>ServiceUploadDocument</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new ServiceUploadDocument();
      if (data.hasOwnProperty('contentType'))
        obj.contentType = ApiClient.convertToType(data['contentType'], 'String');
      if (data.hasOwnProperty('contentLength'))
        obj.contentLength = ApiClient.convertToType(data['contentLength'], 'Number');
      if (data.hasOwnProperty('contentMD5'))
        obj.contentMD5 = ApiClient.convertToType(data['contentMD5'], 'String');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>contentType</code> property.
 * @enum {String}
 * @readonly
 */
ServiceUploadDocument.ContentTypeEnum = {
  /**
   * value: "TIFF"
   * @const
   */
  TIFF: "TIFF",

  /**
   * value: "JPG"
   * @const
   */
  JPG: "JPG",

  /**
   * value: "PNG"
   * @const
   */
  PNG: "PNG",

  /**
   * value: "JPEG"
   * @const
   */
  JPEG: "JPEG",

  /**
   * value: "GIF"
   * @const
   */
  GIF: "GIF",

  /**
   * value: "PDF"
   * @const
   */
  PDF: "PDF"
};

/**
 * The content type of the to-be-uploaded file
 * @member {module:services/js-client.services.model/ServiceUploadDocument.ContentTypeEnum} contentType
 */
ServiceUploadDocument.prototype.contentType = undefined;

/**
 * The content length of the to-be-uploaded file
 * @member {Number} contentLength
 */
ServiceUploadDocument.prototype.contentLength = undefined;

/**
 * An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit.
 * @member {String} contentMD5
 */
ServiceUploadDocument.prototype.contentMD5 = undefined;


